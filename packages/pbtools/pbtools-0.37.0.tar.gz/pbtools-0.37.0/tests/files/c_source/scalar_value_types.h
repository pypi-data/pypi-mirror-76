/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools.
 */

#ifndef SCALAR_VALUE_TYPES_H
#define SCALAR_VALUE_TYPES_H

#ifdef __cplusplus
extern "C" {
#endif

#include "pbtools.h"

/**
 * Message scalar_value_types.Message.
 */
struct scalar_value_types_message_repeated_t {
    int length;
    struct scalar_value_types_message_t *items_p;
};

struct scalar_value_types_message_t {
    struct pbtools_message_base_t base;
    bool v1;
    struct pbtools_bytes_t v2;
    double v3;
    uint32_t v4;
    uint64_t v5;
    float v6;
    int32_t v7;
    int64_t v8;
    int32_t v9;
    int64_t v10;
    int32_t v11;
    int64_t v12;
    char *v13_p;
    uint32_t v14;
    uint64_t v15;
};

/**
 * Encoding and decoding of scalar_value_types.Message.
 */
struct scalar_value_types_message_t *
scalar_value_types_message_new(
    void *workspace_p,
    size_t size);

int scalar_value_types_message_encode(
    struct scalar_value_types_message_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int scalar_value_types_message_decode(
    struct scalar_value_types_message_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/* Internal functions. Do not use! */

void scalar_value_types_message_init(
    struct scalar_value_types_message_t *self_p,
    struct pbtools_heap_t *heap_p);

void scalar_value_types_message_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct scalar_value_types_message_t *self_p);

void scalar_value_types_message_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct scalar_value_types_message_t *self_p);

void scalar_value_types_message_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct scalar_value_types_message_repeated_t *repeated_p);

void scalar_value_types_message_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct scalar_value_types_message_repeated_t *repeated_p);

#ifdef __cplusplus
}
#endif

#endif
