/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools.
 */

#ifndef TAGS_H
#define TAGS_H

#ifdef __cplusplus
extern "C" {
#endif

#include "pbtools.h"

/**
 * Message tags.Message1.
 */
struct tags_message1_repeated_t {
    int length;
    struct tags_message1_t *items_p;
};

struct tags_message1_t {
    struct pbtools_message_base_t base;
    bool value;
};

/**
 * Message tags.Message2.
 */
struct tags_message2_repeated_t {
    int length;
    struct tags_message2_t *items_p;
};

struct tags_message2_t {
    struct pbtools_message_base_t base;
    bool value;
};

/**
 * Message tags.Message3.
 */
struct tags_message3_repeated_t {
    int length;
    struct tags_message3_t *items_p;
};

struct tags_message3_t {
    struct pbtools_message_base_t base;
    bool value;
};

/**
 * Message tags.Message4.
 */
struct tags_message4_repeated_t {
    int length;
    struct tags_message4_t *items_p;
};

struct tags_message4_t {
    struct pbtools_message_base_t base;
    bool value;
};

/**
 * Message tags.Message5.
 */
struct tags_message5_repeated_t {
    int length;
    struct tags_message5_t *items_p;
};

struct tags_message5_t {
    struct pbtools_message_base_t base;
    bool value;
};

/**
 * Message tags.Message6.
 */
struct tags_message6_repeated_t {
    int length;
    struct tags_message6_t *items_p;
};

struct tags_message6_t {
    struct pbtools_message_base_t base;
    bool value;
};

/**
 * Encoding and decoding of tags.Message1.
 */
struct tags_message1_t *
tags_message1_new(
    void *workspace_p,
    size_t size);

int tags_message1_encode(
    struct tags_message1_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int tags_message1_decode(
    struct tags_message1_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of tags.Message2.
 */
struct tags_message2_t *
tags_message2_new(
    void *workspace_p,
    size_t size);

int tags_message2_encode(
    struct tags_message2_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int tags_message2_decode(
    struct tags_message2_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of tags.Message3.
 */
struct tags_message3_t *
tags_message3_new(
    void *workspace_p,
    size_t size);

int tags_message3_encode(
    struct tags_message3_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int tags_message3_decode(
    struct tags_message3_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of tags.Message4.
 */
struct tags_message4_t *
tags_message4_new(
    void *workspace_p,
    size_t size);

int tags_message4_encode(
    struct tags_message4_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int tags_message4_decode(
    struct tags_message4_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of tags.Message5.
 */
struct tags_message5_t *
tags_message5_new(
    void *workspace_p,
    size_t size);

int tags_message5_encode(
    struct tags_message5_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int tags_message5_decode(
    struct tags_message5_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of tags.Message6.
 */
struct tags_message6_t *
tags_message6_new(
    void *workspace_p,
    size_t size);

int tags_message6_encode(
    struct tags_message6_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int tags_message6_decode(
    struct tags_message6_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/* Internal functions. Do not use! */

void tags_message1_init(
    struct tags_message1_t *self_p,
    struct pbtools_heap_t *heap_p);

void tags_message1_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct tags_message1_t *self_p);

void tags_message1_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct tags_message1_t *self_p);

void tags_message1_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct tags_message1_repeated_t *repeated_p);

void tags_message1_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct tags_message1_repeated_t *repeated_p);

void tags_message2_init(
    struct tags_message2_t *self_p,
    struct pbtools_heap_t *heap_p);

void tags_message2_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct tags_message2_t *self_p);

void tags_message2_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct tags_message2_t *self_p);

void tags_message2_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct tags_message2_repeated_t *repeated_p);

void tags_message2_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct tags_message2_repeated_t *repeated_p);

void tags_message3_init(
    struct tags_message3_t *self_p,
    struct pbtools_heap_t *heap_p);

void tags_message3_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct tags_message3_t *self_p);

void tags_message3_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct tags_message3_t *self_p);

void tags_message3_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct tags_message3_repeated_t *repeated_p);

void tags_message3_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct tags_message3_repeated_t *repeated_p);

void tags_message4_init(
    struct tags_message4_t *self_p,
    struct pbtools_heap_t *heap_p);

void tags_message4_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct tags_message4_t *self_p);

void tags_message4_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct tags_message4_t *self_p);

void tags_message4_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct tags_message4_repeated_t *repeated_p);

void tags_message4_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct tags_message4_repeated_t *repeated_p);

void tags_message5_init(
    struct tags_message5_t *self_p,
    struct pbtools_heap_t *heap_p);

void tags_message5_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct tags_message5_t *self_p);

void tags_message5_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct tags_message5_t *self_p);

void tags_message5_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct tags_message5_repeated_t *repeated_p);

void tags_message5_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct tags_message5_repeated_t *repeated_p);

void tags_message6_init(
    struct tags_message6_t *self_p,
    struct pbtools_heap_t *heap_p);

void tags_message6_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct tags_message6_t *self_p);

void tags_message6_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct tags_message6_t *self_p);

void tags_message6_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct tags_message6_repeated_t *repeated_p);

void tags_message6_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct tags_message6_repeated_t *repeated_p);

#ifdef __cplusplus
}
#endif

#endif
