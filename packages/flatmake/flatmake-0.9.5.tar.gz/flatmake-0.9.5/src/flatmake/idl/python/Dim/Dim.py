# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Dim

import flatbuffers


class Dim(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsDim(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Dim()
        x.Init(buf, n + offset)
        return x

    # Dim
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Dim
    def UbyteArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .UByteArray import UByteArray

            obj = UByteArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Dim
    def Float32bArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Float32bArray import Float32bArray

            obj = Float32bArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Dim
    def Coordinates2d(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Coordinates2D import Coordinates2D

            obj = Coordinates2D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Dim
    def ColorArray1d(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .ColorArray1D import ColorArray1D

            obj = ColorArray1D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Dim
    def RgbTripleArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .RGBTripleArray import RGBTripleArray

            obj = RGBTripleArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None


def DimStart(builder):
    builder.StartObject(5)


def DimAddUbyteArray(builder, ubyteArray):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(ubyteArray), 0
    )


def DimAddFloat32bArray(builder, float32bArray):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(float32bArray), 0
    )


def DimAddCoordinates2d(builder, coordinates2d):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(coordinates2d), 0
    )


def DimAddColorArray1d(builder, colorArray1d):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(colorArray1d), 0
    )


def DimAddRgbTripleArray(builder, rgbTripleArray):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(rgbTripleArray), 0
    )


def DimEnd(builder):
    return builder.EndObject()
