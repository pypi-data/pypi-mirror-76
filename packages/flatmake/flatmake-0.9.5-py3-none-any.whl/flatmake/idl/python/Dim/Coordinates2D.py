# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Dim

import flatbuffers


class Coordinates2D(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsCoordinates2D(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Coordinates2D()
        x.Init(buf, n + offset)
        return x

    # Coordinates2D
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Coordinates2D
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Float32bArray import Float32bArray

            obj = Float32bArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Coordinates2D
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Float32bArray import Float32bArray

            obj = Float32bArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None


def Coordinates2DStart(builder):
    builder.StartObject(2)


def Coordinates2DAddX(builder, x):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(x), 0
    )


def Coordinates2DAddY(builder, y):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(y), 0
    )


def Coordinates2DEnd(builder):
    return builder.EndObject()
