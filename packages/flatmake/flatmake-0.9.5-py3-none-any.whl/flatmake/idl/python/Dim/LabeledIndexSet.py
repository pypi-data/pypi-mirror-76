# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Dim

import flatbuffers


class LabeledIndexSet(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsLabeledIndexSet(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LabeledIndexSet()
        x.Init(buf, n + offset)
        return x

    # LabeledIndexSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LabeledIndexSet
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LabeledIndexSet
    def Indices(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .UInt32bArray import UInt32bArray

            obj = UInt32bArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None


def LabeledIndexSetStart(builder):
    builder.StartObject(2)


def LabeledIndexSetAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0
    )


def LabeledIndexSetAddIndices(builder, indices):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0
    )


def LabeledIndexSetEnd(builder):
    return builder.EndObject()
