# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatmake

import flatbuffers

class LabeledIndexSuperSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLabeledIndexSuperSet(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LabeledIndexSuperSet()
        x.Init(buf, n + offset)
        return x

    # LabeledIndexSuperSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LabeledIndexSuperSet
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LabeledIndexSuperSet
    def Sets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LabeledIndexSet import LabeledIndexSet
            obj = LabeledIndexSet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LabeledIndexSuperSet
    def SetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def LabeledIndexSuperSetStart(builder): builder.StartObject(2)
def LabeledIndexSuperSetAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def LabeledIndexSuperSetAddSets(builder, sets): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)
def LabeledIndexSuperSetStartSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LabeledIndexSuperSetEnd(builder): return builder.EndObject()
