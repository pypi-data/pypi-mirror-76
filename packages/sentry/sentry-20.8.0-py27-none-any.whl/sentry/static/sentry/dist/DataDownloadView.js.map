{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/dateTime.tsx","webpack:///./app/components/dataExport.tsx","webpack:///./app/views/dataExport/dataDownload.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","DateTime","getFormat","clock24Hours","props","dateOnly","timeOnly","seconds","shortDate","timeAndDate","date","utc","carriedProps","user","ConfigStore","get","options","format","moment","tz","timezone","React","Component","defaultProps","ExportQueryType","DataExport","state","initialState","resetState","setState","startDataExport","api","slug","organization","payload","queryType","queryInfo","inProgress","requestPromise","includeAllArgs","method","data","query_type","query_info","then","response","addSuccessMessage","status","t","err","message","responseJSON","detail","addErrorMessage","prevPayload","isEqual","children","disabled","icon","features","NewButton","size","priority","onClick","debounce","buttonProps","type","noTooltip","withApi","withOrganization","DownloadStatus","DataDownload","params","orgId","dataExportId","IssuesByTag","Discover","d","Date","Fragment","Header","Body","query","download","actionLink","getActionLink","DownloadButton","href","info","to","pathname","browserHistory","push","openInDiscover","dateExpired","checksum","renderDate","renderOpenInDiscover","tct","link","target","rel","errors","errDetail","statusText","Early","renderEarly","Expired","renderExpired","renderValid","renderContent","p","theme","borderLight","space","Button"],"mappings":"6fAQqBA,E,8RAKjB,MAAO,K,+BAIP,IAAMC,EAAQC,KAAKC,WACnB,OACE,YAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,WACjBC,KAAKE,uB,GATJC,KAHWL,E,kdCWfM,E,yUAeJC,UAAY,YAAqD,IAAnDC,EAAmD,EAAnDA,aAAmD,EACD,EAAKC,MAA5DC,EADwD,EACxDA,SAAUC,EAD8C,EAC9CA,SAAUC,EADoC,EACpCA,QAASC,EAD2B,EAC3BA,UAAWC,EADgB,EAChBA,YAG/C,OAAIJ,EACK,KAILI,EACK,aAILH,EACK,KAGLE,EACK,aAGLL,EACK,yBAILI,EACK,WAIF,O,+CAGA,QAUHV,KAAKO,MARPM,EAFK,EAELA,KACAC,EAHK,EAGLA,IAMGC,GATE,EAILL,QAJK,EAKLC,UALK,EAMLH,SANK,EAOLC,SAPK,EAQLG,YARK,iFAWDI,EAAOC,UAAYC,IAAI,QACvBC,EAAUH,aAAH,EAAGA,EAAMG,QAChBC,EAASpB,KAAKK,UAAUc,GAE9B,OACE,mBAAUJ,EACPD,EACGO,IAAOP,IAAID,GAAMO,OAAOA,GACxBC,IAAOC,GAAGT,EAAV,UAAgBM,aAAhB,EAAgBA,EAASI,gBAAzB,QAAqC,IAAIH,OAAOA,Q,GArErCI,IAAMC,WAAvBrB,E,uBAAAA,EAWGsB,aAA6B,CAClChB,SAAS,GA+DEN,O,wEC/EHuB,E;;UAAAA,K,4BAAAA,E,qBAAAA,M,SAsBNC,E,yUACJC,MAAQ,EAAKC,a,EAabC,WAAa,WACX,EAAKC,SAAS,EAAKF,e,EAGrBG,gBAAkB,WAAM,MAKlB,EAAK1B,MAHP2B,EAFoB,EAEpBA,IACeC,EAHK,EAGpBC,aAAeD,KAHK,IAIpBE,QAAUC,EAJU,EAIVA,UAAWC,EAJD,EAICA,UAGvB,EAAKP,SAAS,CAACQ,YAAY,IAE3BN,EACGO,eADH,yBACoCN,EADpC,iBACyD,CACrDO,gBAAgB,EAChBC,OAAQ,OACRC,KAAM,CACJC,WAAYP,EACZQ,WAAYP,KAGfQ,MAAK,YAA0B,eAAdC,GAAc,gBAC9BC,YACuB,OAArBD,aAAA,EAAAA,EAAUE,QACNC,YACE,6EAEFA,YAAE,8EAfZ,OAkBS,SAAAC,GAAO,QACNC,EAAO,UACXD,aADW,YACXA,EAAKE,oBADM,aACX,EAAmBC,cADR,QAEX,8EACFC,YAAgBL,YAAEE,IAClB,EAAKrB,SAAS,CAACQ,YAAY,Q,4DA/CU,IAAdiB,EAAc,EAAvBpB,QACXA,EAAWrC,KAAKO,MAAhB8B,QACFqB,IAAQD,EAAapB,IAAUrC,KAAK+B,e,+BAiDlC,IACAS,EAAcxC,KAAK6B,MAAnBW,WADA,EAE4BxC,KAAKO,MAAjCoD,EAFA,EAEAA,SAAUC,EAFV,EAEUA,SAAUC,EAFpB,EAEoBA,KAC3B,OACE,YAAC,IAAD,CAASC,SAAU,CAAC,iCACjBtB,EACC,YAACuB,EAAD,KACEC,KAAK,QACLC,SAAS,UACTlE,MAAM,0EACFC,KAAKO,MAJX,CAKEqD,UAAQ,EACRC,KAAMA,IAELV,YAAE,2BAGL,YAACY,EAAD,KACEG,QAASC,IAASnE,KAAKiC,gBAAiB,KACxC2B,SAAUA,IAAY,EACtBI,KAAK,QACLC,SAAS,UACTlE,MAAM,mFACN8D,KAAMA,GACF7D,KAAKO,OAERoD,GAAsBR,YAAE,yB,mCAvEjC,MAAO,CACLX,YAAY,O,GAVOhB,IAAMC,WAAzBG,E,yBAwFN,IAAMmC,EAAY,SAAC,GAAD,IAAEJ,EAAF,EAAEA,SAAaS,EAAf,2BAChB,YAAC,IAAWA,EACTT,EACD,YAAC,IAAD,CAAcU,KAAK,MAAMC,WAAS,MAHhCP,E,wBAQSQ,gBAAQC,YAAiB5C,K,4FCvH5B6C,E,icAAAA,K,cAAAA,E,cAAAA,E,mBAAAA,M,SA4CNC,E,8RAEF,OAAOvB,YAAE,qB,qCAGwB,MACHnD,KAAKO,MAAMoE,OAAlCC,EAD0B,EAC1BA,MAAOC,EADmB,EACnBA,aACd,MAAO,CAAC,CAAC,WAAD,yBAA+BD,EAA/B,wBAAoDC,EAApD,S,oCAGIvC,GAAmB,IACxBsC,EAAS5E,KAAKO,MAAMoE,OAApBC,MACP,OAAQtC,GACN,KAAKX,IAAgBmD,YACnB,+BAAyBF,EAAzB,YACF,KAAKjD,IAAgBoD,SACnB,+BAAyBH,EAAzB,sBACF,QACE,MAAO,O,iCAIF/D,GACT,IAAKA,EACH,OAAO,KAET,IAAMmE,EAAI,IAAIC,KAAKpE,GACnB,OACE,0BACE,YAAC,IAAD,CAAUA,KAAMmE,O,oCAMpB,OACE,YAAC,IAAME,SAAP,KACE,YAACC,EAAD,KACE,sBACGhC,YAAE,YACH,qBAAIA,YAAE,UACLA,YAAE,iBAGP,YAACiC,EAAD,KACE,qBACGjC,YACC,yIAGJ,qBAAIA,YAAE,2E,sCAMmB,IACxBkC,EAASrF,KAAK6B,MAAMyD,SAApBD,MACDE,EAAavF,KAAKwF,cAAcH,EAAMhB,MAC5C,OACE,YAAC,IAAMa,SAAP,KACE,YAACC,EAAD,KACE,sBAAKhC,YAAE,sBAET,YAACiC,EAAD,KACE,qBACGjC,YACC,yGAGJ,qBACGA,YACC,sFAGJ,YAACsC,EAAD,CAAgBC,KAAMH,EAAYtB,SAAS,WACxCd,YAAE,6B,uCAOI,IAGHwC,EAER3F,KAAK6B,MAHPyD,SACED,MAAQM,KAGLf,EAAS5E,KAAKO,MAAMoE,OAApBC,MAEDgB,EAAK,CACTC,SAAU,kBAAF,OAAoBjB,EAApB,sBACRS,MAAOM,GAGTG,iBAAeC,KAAKH,K,6CAGC,aAQjB5F,KAAK6B,MANPyD,SACED,MAHiB,cAGT,CACNhB,KAAM1C,IAAgBmD,YACtBa,KAAM,IALS,GAYdtB,KAEP,MAAgB,mBAdK,MAYP1C,IAAgBmD,YAZT,GAenB,YAAC,IAAMI,SAAP,KACE,qBAAI/B,YAAE,0BACN,YAAC,IAAD,CACEc,SAAS,UACTJ,KAAM,YAAC,KAAD,MACNK,QAAS,kBAAM,EAAK8B,mBAEnB7C,YAAE,qBAEL,wBAEA,O,oCAGyB,MAGzBnD,KAAK6B,MADPyD,SAAWW,EAFgB,EAEhBA,YAAaC,EAFG,EAEHA,SAFG,EAIClG,KAAKO,MAAMoE,OAAlCC,EAJsB,EAItBA,MAAOC,EAJe,EAIfA,aAEd,OACE,YAAC,IAAMK,SAAP,KACE,YAACC,EAAD,KACE,sBAAKhC,YAAE,eAET,YAACiC,EAAD,KACE,qBAAIjC,YAAE,kEACN,YAAC,IAAD,CACEc,SAAS,UACTJ,KAAM,YAAC,IAAD,MACN6B,KAAI,+BAA0Bd,EAA1B,wBAA+CC,EAA/C,oBAEH1B,YAAE,iBAEL,qBACGA,YAAE,8CACH,uBACCnD,KAAKmG,WAAWF,IAElBjG,KAAKoG,uBACN,qBACE,yBACE,kCAAcF,IAEhB,uBACCG,YAAI,+BAAgC,CACnCC,KACE,iBACEZ,KAAK,yFACLa,OAAO,SACPC,IAAI,uBAEHrD,YAAE,8B,oCAUY,MAERC,EACjBpD,KAAK6B,MADP4E,OAASnB,SAELoB,EAAYtD,aAAH,YAAGA,EAAKE,oBAAR,aAAG,EAAmBC,OACrC,OACE,YAAC,IAAD,KACE,wBACE,YAAC4B,EAAD,KACE,sBACG/B,EAAIF,OADP,MACkBE,EAAIuD,aAGvBD,GACC,YAACtB,EAAD,KACE,qBAAIsB,Q,sCAUd,OADmB1G,KAAK6B,MAAjByD,SACUpC,QACf,KAAKuB,EAAemC,MAClB,OAAO5G,KAAK6G,cACd,KAAKpC,EAAeqC,QAClB,OAAO9G,KAAK+G,gBACd,QACE,OAAO/G,KAAKgH,iB,mCAKhB,OACE,YAAC,IAAD,KACE,wBAAOhH,KAAKiH,sB,GAtNOnH,KA4NrBqF,EAAS,YAAO,SAAP,qCAAH,4BACiB,SAAA+B,GAAC,OAAIA,EAAEC,MAAMC,cAD9B,YAECC,YAAM,GAFP,wCAKMA,YAAM,GALZ,QASNjC,EAAO,YAAO,MAAP,mCAAH,WACGiC,YAAM,GADT,kCAIIA,YAAM,KAJV,QAQJ5B,EAAiB,YAAO6B,IAAP,6CAAH,iBACDD,YAAM,KADL,KAIL3C","file":"DataDownloadView.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport moment from 'moment-timezone';\n\nimport ConfigStore from 'app/stores/configStore';\n\ntype DefaultProps = {\n  seconds: boolean;\n};\n\ntype Props = DefaultProps & {\n  date: moment.MomentInput;\n  dateOnly?: boolean;\n  timeOnly?: boolean;\n  shortDate?: boolean;\n  timeAndDate?: boolean;\n  utc?: boolean;\n};\n\nclass DateTime extends React.Component<Props> {\n  static propTypes = {\n    date: PropTypes.any.isRequired,\n    dateOnly: PropTypes.bool,\n    timeOnly: PropTypes.bool,\n    shortDate: PropTypes.bool,\n    seconds: PropTypes.bool,\n    timeAndDate: PropTypes.bool,\n    utc: PropTypes.bool,\n  };\n\n  static defaultProps: DefaultProps = {\n    seconds: true,\n  };\n\n  getFormat = ({clock24Hours}: {clock24Hours: boolean}): string => {\n    const {dateOnly, timeOnly, seconds, shortDate, timeAndDate} = this.props;\n\n    // October 26, 2017\n    if (dateOnly) {\n      return 'LL';\n    }\n\n    // Oct 26, 2017 11:30:30 AM\n    if (timeAndDate) {\n      return 'MMM DD, LT';\n    }\n\n    // 4:57 PM\n    if (timeOnly) {\n      return 'LT';\n    }\n\n    if (shortDate) {\n      return 'MM/DD/YYYY';\n    }\n\n    if (clock24Hours) {\n      return 'MMMM D YYYY HH:mm:ss z';\n    }\n\n    // Oct 26, 2017 11:30:30 AM\n    if (seconds) {\n      return 'll LTS z';\n    }\n\n    // Default is Oct 26, 2017 11:30 AM\n    return 'lll';\n  };\n\n  render() {\n    const {\n      date,\n      utc,\n      seconds: _seconds,\n      shortDate: _shortDate,\n      dateOnly: _dateOnly,\n      timeOnly: _timeOnly,\n      timeAndDate: _timeAndDate,\n      ...carriedProps\n    } = this.props;\n    const user = ConfigStore.get('user');\n    const options = user?.options;\n    const format = this.getFormat(options);\n\n    return (\n      <time {...carriedProps}>\n        {utc\n          ? moment.utc(date).format(format)\n          : moment.tz(date, options?.timezone ?? '').format(format)}\n      </time>\n    );\n  }\n}\n\nexport default DateTime;\n","import debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\n\nimport {Client} from 'app/api';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Feature from 'app/components/acl/feature';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport FeatureBadge from 'app/components/featureBadge';\nimport withOrganization from 'app/utils/withOrganization';\n\n//! Coordinate with other ExportQueryType (src/sentry/data_export/base.py)\nexport enum ExportQueryType {\n  IssuesByTag = 'Issues-by-Tag',\n  Discover = 'Discover',\n}\n\ntype DataExportPayload = {\n  queryType: ExportQueryType;\n  queryInfo: any; // TODO(ts): Formalize different possible payloads\n};\n\ntype Props = {\n  api: Client;\n  disabled?: boolean;\n  organization: Organization;\n  payload: DataExportPayload;\n  icon?: React.ReactNode;\n};\n\ntype State = {\n  inProgress: boolean;\n};\n\nclass DataExport extends React.Component<Props, State> {\n  state = this.initialState;\n\n  componentDidUpdate({payload: prevPayload}) {\n    const {payload} = this.props;\n    if (!isEqual(prevPayload, payload)) this.resetState();\n  }\n\n  get initialState() {\n    return {\n      inProgress: false,\n    };\n  }\n\n  resetState = () => {\n    this.setState(this.initialState);\n  };\n\n  startDataExport = () => {\n    const {\n      api,\n      organization: {slug},\n      payload: {queryType, queryInfo},\n    } = this.props;\n\n    this.setState({inProgress: true});\n\n    api\n      .requestPromise(`/organizations/${slug}/data-export/`, {\n        includeAllArgs: true,\n        method: 'POST',\n        data: {\n          query_type: queryType,\n          query_info: queryInfo,\n        },\n      })\n      .then(([_data, _, response]) => {\n        addSuccessMessage(\n          response?.status === 201\n            ? t(\n                \"Sit tight. We'll shoot you an email when your data is ready for download.\"\n              )\n            : t(\"It looks like we're already working on it. Sit tight, we'll email you.\")\n        );\n      })\n      .catch(err => {\n        const message =\n          err?.responseJSON?.detail ??\n          \"We tried our hardest, but we couldn't export your data. Give it another go.\";\n        addErrorMessage(t(message));\n        this.setState({inProgress: false});\n      });\n  };\n\n  render() {\n    const {inProgress} = this.state;\n    const {children, disabled, icon} = this.props;\n    return (\n      <Feature features={['organizations:discover-query']}>\n        {inProgress ? (\n          <NewButton\n            size=\"small\"\n            priority=\"default\"\n            title=\"You can get on with your life. We'll email you when your data's ready.\"\n            {...this.props}\n            disabled\n            icon={icon}\n          >\n            {t(\"We're working on it...\")}\n          </NewButton>\n        ) : (\n          <NewButton\n            onClick={debounce(this.startDataExport, 500)}\n            disabled={disabled || false}\n            size=\"small\"\n            priority=\"default\"\n            title=\"Put your data to work. Start your export and we'll email you when it's finished.\"\n            icon={icon}\n            {...this.props}\n          >\n            {children ? children : t('Export All to CSV')}\n          </NewButton>\n        )}\n      </Feature>\n    );\n  }\n}\n\nconst NewButton = ({children, ...buttonProps}) => (\n  <Button {...buttonProps}>\n    {children}\n    <FeatureBadge type=\"new\" noTooltip />\n  </Button>\n);\n\nexport {DataExport};\nexport default withApi(withOrganization(DataExport));\n","import React from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {RouteComponentProps} from 'react-router/lib/Router';\n\nimport Button from 'app/components/button';\nimport {IconDownload, IconTelescope} from 'app/icons';\nimport {ExportQueryType} from 'app/components/dataExport';\nimport DateTime from 'app/components/dateTime';\nimport AsyncView from 'app/views/asyncView';\nimport Layout from 'app/views/auth/layout';\nimport space from 'app/styles/space';\nimport {t, tct} from 'app/locale';\n\nexport enum DownloadStatus {\n  Early = 'EARLY',\n  Valid = 'VALID',\n  Expired = 'EXPIRED',\n}\n\ntype RouteParams = {\n  orgId: string;\n  dataExportId: string;\n};\n\ntype Download = {\n  id: number;\n  user: {\n    id: number;\n    email: string;\n    username: string;\n  };\n  dateCreated: string;\n  dateFinished?: string;\n  dateExpired?: string;\n  query: {\n    type: ExportQueryType;\n    info: object;\n  };\n  status: DownloadStatus;\n  checksum: string;\n};\n\ntype Props = {} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  download: Download;\n  errors: {\n    download: {\n      status: number;\n      statusText: string;\n      responseJSON: {\n        detail: string;\n      };\n    };\n  };\n} & AsyncView['state'];\n\nclass DataDownload extends AsyncView<Props, State> {\n  getTitle(): string {\n    return t('Download Center');\n  }\n\n  getEndpoints(): [string, string][] {\n    const {orgId, dataExportId} = this.props.params;\n    return [['download', `/organizations/${orgId}/data-export/${dataExportId}/`]];\n  }\n\n  getActionLink(queryType): string {\n    const {orgId} = this.props.params;\n    switch (queryType) {\n      case ExportQueryType.IssuesByTag:\n        return `/organizations/${orgId}/issues/`;\n      case ExportQueryType.Discover:\n        return `/organizations/${orgId}/discover/queries/`;\n      default:\n        return '/';\n    }\n  }\n\n  renderDate(date: string | undefined): React.ReactNode {\n    if (!date) {\n      return null;\n    }\n    const d = new Date(date);\n    return (\n      <strong>\n        <DateTime date={d} />\n      </strong>\n    );\n  }\n\n  renderEarly(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <Header>\n          <h3>\n            {t('What are')}\n            <i>{t(' you ')}</i>\n            {t('doing here?')}\n          </h3>\n        </Header>\n        <Body>\n          <p>\n            {t(\n              \"Not that its any of our business, but were you invited to this page? It's just that we don't exactly remember emailing you about it.\"\n            )}\n          </p>\n          <p>{t(\"Close this window and we'll email you when your download is ready.\")}</p>\n        </Body>\n      </React.Fragment>\n    );\n  }\n\n  renderExpired(): React.ReactNode {\n    const {query} = this.state.download;\n    const actionLink = this.getActionLink(query.type);\n    return (\n      <React.Fragment>\n        <Header>\n          <h3>{t('This is awkward.')}</h3>\n        </Header>\n        <Body>\n          <p>\n            {t(\n              \"That link expired, so your download doesn't live here anymore. Just picked up one day and left town.\"\n            )}\n          </p>\n          <p>\n            {t(\n              'Make a new one with your latest data. Your old download will never see it coming.'\n            )}\n          </p>\n          <DownloadButton href={actionLink} priority=\"primary\">\n            {t('Start a New Download')}\n          </DownloadButton>\n        </Body>\n      </React.Fragment>\n    );\n  }\n\n  openInDiscover() {\n    const {\n      download: {\n        query: {info},\n      },\n    } = this.state;\n    const {orgId} = this.props.params;\n\n    const to = {\n      pathname: `/organizations/${orgId}/discover/results/`,\n      query: info,\n    };\n\n    browserHistory.push(to);\n  }\n\n  renderOpenInDiscover() {\n    const {\n      download: {\n        query = {\n          type: ExportQueryType.IssuesByTag,\n          info: {},\n        },\n      },\n    } = this.state;\n\n    // default to IssuesByTag because we dont want to\n    // display this unless we're sure its a discover query\n    const {type = ExportQueryType.IssuesByTag} = query;\n\n    return type === 'Discover' ? (\n      <React.Fragment>\n        <p>{t('Need to make changes?')}</p>\n        <Button\n          priority=\"primary\"\n          icon={<IconTelescope />}\n          onClick={() => this.openInDiscover()}\n        >\n          {t('Open in Discover')}\n        </Button>\n        <br />\n      </React.Fragment>\n    ) : null;\n  }\n\n  renderValid(): React.ReactNode {\n    const {\n      download: {dateExpired, checksum},\n    } = this.state;\n    const {orgId, dataExportId} = this.props.params;\n\n    return (\n      <React.Fragment>\n        <Header>\n          <h3>{t('All done.')}</h3>\n        </Header>\n        <Body>\n          <p>{t(\"See, that wasn't so bad. Your data is all ready for download.\")}</p>\n          <Button\n            priority=\"primary\"\n            icon={<IconDownload />}\n            href={`/api/0/organizations/${orgId}/data-export/${dataExportId}/?download=true`}\n          >\n            {t('Download CSV')}\n          </Button>\n          <p>\n            {t(\"That link won't last forever — it expires:\")}\n            <br />\n            {this.renderDate(dateExpired)}\n          </p>\n          {this.renderOpenInDiscover()}\n          <p>\n            <small>\n              <strong>SHA1:{checksum}</strong>\n            </small>\n            <br />\n            {tct('Need help verifying? [link].', {\n              link: (\n                <a\n                  href=\"https://docs.sentry.io/product/discover-queries/query-builder/#filter-by-table-columns\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {t('Check out our docs')}\n                </a>\n              ),\n            })}\n          </p>\n        </Body>\n      </React.Fragment>\n    );\n  }\n\n  renderError(): React.ReactNode {\n    const {\n      errors: {download: err},\n    } = this.state;\n    const errDetail = err?.responseJSON?.detail;\n    return (\n      <Layout>\n        <main>\n          <Header>\n            <h3>\n              {err.status} - {err.statusText}\n            </h3>\n          </Header>\n          {errDetail && (\n            <Body>\n              <p>{errDetail}</p>\n            </Body>\n          )}\n        </main>\n      </Layout>\n    );\n  }\n\n  renderContent(): React.ReactNode {\n    const {download} = this.state;\n    switch (download.status) {\n      case DownloadStatus.Early:\n        return this.renderEarly();\n      case DownloadStatus.Expired:\n        return this.renderExpired();\n      default:\n        return this.renderValid();\n    }\n  }\n\n  renderBody() {\n    return (\n      <Layout>\n        <main>{this.renderContent()}</main>\n      </Layout>\n    );\n  }\n}\n\nconst Header = styled('header')`\n  border-bottom: 1px solid ${p => p.theme.borderLight};\n  padding: ${space(3)} 40px 0;\n  h3 {\n    font-size: 24px;\n    margin: 0 0 ${space(3)} 0;\n  }\n`;\n\nconst Body = styled('div')`\n  padding: ${space(2)} 40px;\n  max-width: 500px;\n  p {\n    margin: ${space(1.5)} 0;\n  }\n`;\n\nconst DownloadButton = styled(Button)`\n  margin-bottom: ${space(1.5)};\n`;\n\nexport default DataDownload;\n"],"sourceRoot":""}