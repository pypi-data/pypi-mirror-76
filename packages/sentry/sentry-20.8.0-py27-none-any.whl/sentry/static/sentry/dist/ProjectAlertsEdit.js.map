{"version":3,"sources":["webpack:///./app/views/settings/incidentRules/details.tsx","webpack:///./app/views/settings/projectAlerts/edit.tsx"],"names":["IncidentRulesDetails","handleSubmitSuccess","props","params","routes","router","location","push","recreateRoute","stepBack","actions","Map","this","orgId","projectId","ruleId","rule","state","onSubmitSuccess","AsyncView","ProjectAlertsEditor","hasMetricAlerts","alertType","pathname","includes","title","t","Fragment","objSlug"],"mappings":"swBA2DeA,E,yUArBbC,oBAAsB,WAAM,MACiB,EAAKC,MAAzCC,EADmB,EACnBA,OAAQC,EADW,EACXA,OAAQC,EADG,EACHA,OAAQC,EADL,EACKA,SAE/BD,EAAOE,KAAKC,YAAc,GAAI,CAACL,SAAQC,SAAQE,WAAUG,UAAW,M,wDAfpE,O,iWAAA,6DAEEC,QAAS,IAAIC,Q,qCAIkB,MACEC,KAAKV,MAAMC,OAAvCU,EAD0B,EAC1BA,MAAOC,EADmB,EACnBA,UAAWC,EADQ,EACRA,OAEzB,MAAO,CAAC,CAAC,OAAD,oBAAsBF,EAAtB,YAA+BC,EAA/B,wBAAwDC,EAAxD,S,mCASG,IACJA,EAAUH,KAAKV,MAAMC,OAArBY,OACAC,EAAQJ,KAAKK,MAAbD,KAEP,OACE,YAAC,IAAD,OACMJ,KAAKV,MADX,CAEEa,OAAQA,EACRC,KAAMA,EACNE,gBAAiBN,KAAKX,2B,GA7BKkB,K,8BCHnC,SAASC,EAAoBlB,GAAc,IAClCmB,EAAqCnB,EAArCmB,gBAAiBf,EAAoBJ,EAApBI,SACjBQ,EADqCZ,EAAVC,OAC3BW,UACDQ,EAAYhB,EAASiB,SAASC,SAAS,yBACzC,SACA,QACEC,EAAQC,YAAE,cAEhB,OACE,YAAC,IAAMC,SAAP,KACE,YAAC,IAAD,CAAqBF,MAAOA,EAAOG,QAASd,IAC5C,YAAC,IAAD,CAAoBW,MAAOA,MAExBJ,GAAiC,UAAdC,IAA0B,YAAC,IAAgBpB,GAEhEmB,GAAiC,WAAdC,GAA0B,YAAC,EAAyBpB,IAfrEkB,E,kCAoBMA","file":"ProjectAlertsEdit.js","sourcesContent":["import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {IncidentRule} from 'app/views/settings/incidentRules/types';\nimport {Organization} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport RuleForm from 'app/views/settings/incidentRules/ruleForm';\nimport recreateRoute from 'app/utils/recreateRoute';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  rule: IncidentRule;\n  actions: Map<string, any>; // This is temp\n} & AsyncView['state'];\n\nclass IncidentRulesDetails extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getEndpoints(): [string, string][] {\n    const {orgId, projectId, ruleId} = this.props.params;\n\n    return [['rule', `/projects/${orgId}/${projectId}/alert-rules/${ruleId}/`]];\n  }\n\n  handleSubmitSuccess = () => {\n    const {params, routes, router, location} = this.props;\n\n    router.push(recreateRoute('', {params, routes, location, stepBack: -2}));\n  };\n\n  renderBody() {\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n      />\n    );\n  }\n}\n\nexport default IncidentRulesDetails;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization} from 'app/types';\nimport {t} from 'app/locale';\nimport IncidentRulesDetails from 'app/views/settings/incidentRules/details';\nimport IssueEditor from 'app/views/settings/projectAlerts/issueEditor';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  hasMetricAlerts: boolean;\n};\n\nfunction ProjectAlertsEditor(props: Props) {\n  const {hasMetricAlerts, location, params} = props;\n  const {projectId} = params;\n  const alertType = location.pathname.includes('/alerts/metric-rules/')\n    ? 'metric'\n    : 'issue';\n  const title = t('Edit Alert');\n\n  return (\n    <React.Fragment>\n      <SentryDocumentTitle title={title} objSlug={projectId} />\n      <SettingsPageHeader title={title} />\n\n      {(!hasMetricAlerts || alertType === 'issue') && <IssueEditor {...props} />}\n\n      {hasMetricAlerts && alertType === 'metric' && <IncidentRulesDetails {...props} />}\n    </React.Fragment>\n  );\n}\n\nexport default ProjectAlertsEditor;\n"],"sourceRoot":""}