{"version":3,"sources":["webpack:///./app/components/issueDiff.jsx","webpack:///./app/components/modals/diffModal.jsx","webpack:///./app/components/events/interfaces/frame/utils.tsx","webpack:///./app/components/events/interfaces/rawStacktraceContent.jsx","webpack:///./app/utils/getStacktraceBody.tsx"],"names":["IssueDiff","args","state","loading","baseEvent","targetEvent","SplitDiffAsync","this","props","baseIssueId","targetIssueId","baseEventId","targetEventId","Promise","all","fetchData","then","setState","getStacktraceBody","addErrorMessage","t","issueId","eventId","orgId","projectId","api","requestPromise","getEndpoint","className","DiffComponent","diffReady","StyledIssueDiff","map","value","i","key","base","target","type","React","Component","defaultProps","withApi","getLoadingStyle","p","shouldForwardProp","isPropValid","DiffModal","Body","modalCss","trimPackage","pkg","pieces","split","test","length","replace","getPlatform","dataPlatform","platform","getPythonFrame","frame","result","defined","filename","module","lineNo","colNo","context","forEach","item","trim","ljust","str","len","Array","Math","max","join","getFrame","frameIdx","getJavaScriptFrame","getRubyFrame","idx","funcName","getPHPFrame","getJavaFrame","instructionAddr","symbolAddr","getNativeFrame","render","data","exception","frames","push","reverse","unshift","getJavaPreamble","getPreamble","event","entries","exc","find","msg","formatted","values","filter","stacktrace","rawStacktraceContent","reduce","acc","concat"],"mappings":"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","file":"DiffModal.js","sourcesContent":["import {css} from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport getStacktraceBody from 'app/utils/getStacktraceBody';\n\nclass IssueDiff extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    baseIssueId: PropTypes.string.isRequired,\n    targetIssueId: PropTypes.string.isRequired,\n    baseEventId: PropTypes.string.isRequired,\n    targetEventId: PropTypes.string.isRequired,\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    baseEventId: 'latest',\n    targetEventId: 'latest',\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      baseEvent: {},\n      targetEvent: {},\n\n      // `SplitDiffAsync` is an async-loaded component\n      // This will eventually contain a reference to the exported component from `./splitDiff`\n      SplitDiffAsync: null,\n    };\n  }\n\n  componentDidMount() {\n    const {baseIssueId, targetIssueId, baseEventId, targetEventId} = this.props;\n\n    // Fetch component and event data\n    Promise.all([\n      import(/* webpackChunkName: \"splitDiff\" */ './splitDiff'),\n      this.fetchData(baseIssueId, baseEventId),\n      this.fetchData(targetIssueId, targetEventId),\n    ])\n      .then(([{default: SplitDiffAsync}, baseEvent, targetEvent]) => {\n        this.setState({\n          SplitDiffAsync,\n          baseEvent: getStacktraceBody(baseEvent),\n          targetEvent: getStacktraceBody(targetEvent),\n          loading: false,\n        });\n      })\n      .catch(() => {\n        addErrorMessage(t('Error loading events'));\n      });\n  }\n\n  getEndpoint(issueId, eventId) {\n    const {orgId, projectId} = this.props;\n\n    if (eventId !== 'latest') {\n      return `/projects/${orgId}/${projectId}/events/${eventId}/`;\n    }\n\n    return `/issues/${issueId}/events/${eventId}/`;\n  }\n\n  fetchData(issueId, eventId) {\n    return this.props.api.requestPromise(this.getEndpoint(issueId, eventId));\n  }\n\n  render() {\n    const {className} = this.props;\n    const DiffComponent = this.state.SplitDiffAsync;\n    const diffReady = !this.state.loading && !!DiffComponent;\n\n    return (\n      <StyledIssueDiff className={className} loading={this.state.loading}>\n        {this.state.loading && <LoadingIndicator />}\n        {diffReady &&\n          this.state.baseEvent.map((value, i) => (\n            <DiffComponent\n              key={i}\n              base={value}\n              target={this.state.targetEvent[i] || ''}\n              type=\"words\"\n            />\n          ))}\n      </StyledIssueDiff>\n    );\n  }\n}\n\nexport default withApi(IssueDiff);\nexport {IssueDiff};\n\nconst getLoadingStyle = p =>\n  (p.loading &&\n    css`\n      background-color: white;\n      justify-content: center;\n    `) ||\n  '';\n\nconst StyledIssueDiff = styled('div', {\n  shouldForwardProp: p => isPropValid(p) && p !== 'loading',\n})`\n  background-color: #f7f8f9;\n  overflow: auto;\n  padding: 10px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  ${getLoadingStyle};\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {css} from '@emotion/core';\n\nimport IssueDiff from 'app/components/issueDiff';\n\nclass DiffModal extends React.Component {\n  static propTypes = {\n    Body: PropTypes.func,\n  };\n\n  render() {\n    const {className, Body} = this.props;\n\n    return (\n      <Body>\n        <IssueDiff className={className} {...this.props} />\n      </Body>\n    );\n  }\n}\n\nconst modalCss = css`\n  .modal-dialog {\n    display: flex;\n    margin: 0;\n    left: 10px;\n    right: 10px;\n    top: 10px;\n    bottom: 10px;\n    width: auto;\n  }\n  .modal-content {\n    display: flex;\n    flex: 1;\n  }\n  .modal-body {\n    display: flex;\n    overflow: hidden;\n    flex: 1;\n  }\n`;\n\nexport {modalCss};\n\nexport default DiffModal;\n","import {PlatformType} from 'app/types';\n\nexport function trimPackage(pkg: string) {\n  const pieces = pkg.split(/^([a-z]:\\\\|\\\\\\\\)/i.test(pkg) ? '\\\\' : '/');\n  const filename = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;\n  return filename.replace(/\\.(dylib|so|a|dll|exe)$/, '');\n}\n\nexport function getPlatform(dataPlatform: PlatformType, platform: string) {\n  // prioritize the frame platform but fall back to the platform\n  // of the stacktrace / exception\n  return dataPlatform || platform;\n}\n","import {defined, trim} from 'app/utils';\nimport {trimPackage} from 'app/components/events/interfaces/frame/utils';\n\nfunction getJavaScriptFrame(frame) {\n  let result = '';\n  if (defined(frame.function)) {\n    result += '  at ' + frame.function + '(';\n  } else {\n    result += '  at ? (';\n  }\n  if (defined(frame.filename)) {\n    result += frame.filename;\n  } else if (defined(frame.module)) {\n    result += frame.module;\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ':' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ':' + frame.colNo;\n  }\n  result += ')';\n  return result;\n}\n\nfunction getRubyFrame(frame) {\n  let result = '  from ';\n  if (defined(frame.filename)) {\n    result += frame.filename;\n  } else if (defined(frame.module)) {\n    result += '(' + frame.module + ')';\n  } else {\n    result += '?';\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ':' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ':' + frame.colNo;\n  }\n  if (defined(frame.function)) {\n    result += ':in `' + frame.function + \"'\";\n  }\n  return result;\n}\n\nexport function getPHPFrame(frame, idx) {\n  const funcName = frame.function === 'null' ? '{main}' : frame.function;\n  return `#${idx} ${frame.filename || frame.module}(${frame.lineNo}): ${funcName}`;\n}\n\nexport function getPythonFrame(frame) {\n  let result = '';\n  if (defined(frame.filename)) {\n    result += '  File \"' + frame.filename + '\"';\n  } else if (defined(frame.module)) {\n    result += '  Module \"' + frame.module + '\"';\n  } else {\n    result += '  ?';\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ', line ' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ', col ' + frame.colNo;\n  }\n  if (defined(frame.function)) {\n    result += ', in ' + frame.function;\n  }\n  if (defined(frame.context)) {\n    frame.context.forEach(item => {\n      if (item[0] === frame.lineNo) {\n        result += '\\n    ' + trim(item[1]);\n      }\n    });\n  }\n  return result;\n}\n\nexport function getJavaFrame(frame) {\n  let result = '    at';\n  if (defined(frame.module)) {\n    result += ' ' + frame.module + '.';\n  }\n  if (defined(frame.function)) {\n    result += frame.function;\n  }\n  if (defined(frame.filename)) {\n    result += '(' + frame.filename;\n    if (defined(frame.lineNo) && frame.lineNo >= 0) {\n      result += ':' + frame.lineNo;\n    }\n    result += ')';\n  }\n  return result;\n}\n\nfunction ljust(str, len) {\n  return str + Array(Math.max(0, len - str.length) + 1).join(' ');\n}\n\nexport function getNativeFrame(frame) {\n  let result = '  ';\n  if (defined(frame.package)) {\n    result += ljust(trimPackage(frame.package), 20);\n  }\n  if (defined(frame.instructionAddr)) {\n    result += ljust(frame.instructionAddr, 12);\n  }\n  result += ' ' + (frame.function || frame.symbolAddr);\n  if (defined(frame.filename)) {\n    result += ' (' + frame.filename;\n    if (defined(frame.lineNo) && frame.lineNo >= 0) {\n      result += ':' + frame.lineNo;\n    }\n    result += ')';\n  }\n  return result;\n}\n\nexport function getJavaPreamble(exception) {\n  let result = `${exception.type}: ${exception.value}`;\n  if (exception.module) {\n    result = `${exception.module}.${result}`;\n  }\n  return result;\n}\n\nfunction getPreamble(exception, platform) {\n  switch (platform) {\n    case 'java':\n      return getJavaPreamble(exception);\n    default:\n      return exception.type + ': ' + exception.value;\n  }\n}\n\nfunction getFrame(frame, frameIdx, platform) {\n  if (frame.platform) {\n    platform = frame.platform;\n  }\n  switch (platform) {\n    case 'javascript':\n      return getJavaScriptFrame(frame);\n    case 'ruby':\n      return getRubyFrame(frame);\n    case 'php':\n      return getPHPFrame(frame, frameIdx);\n    case 'python':\n      return getPythonFrame(frame);\n    case 'java':\n      return getJavaFrame(frame);\n    case 'objc':\n    // fallthrough\n    case 'cocoa':\n    // fallthrough\n    case 'native':\n      return getNativeFrame(frame);\n    default:\n      return getPythonFrame(frame);\n  }\n}\n\nexport default function render(data, platform, exception) {\n  const frames = [];\n\n  data.frames.forEach((frame, frameIdx) => {\n    frames.push(getFrame(frame, frameIdx, platform));\n  });\n\n  if (platform !== 'python') {\n    frames.reverse();\n  }\n\n  if (exception) {\n    frames.unshift(getPreamble(exception, platform));\n  }\n\n  return frames.join('\\n');\n}\n","import rawStacktraceContent from 'app/components/events/interfaces/rawStacktraceContent';\nimport {Event} from 'app/types';\n\nexport default function getStacktraceBody(event: Event) {\n  if (!event || !event.entries) {\n    return [];\n  }\n\n  // TODO(billyvg): This only accounts for the first exception, will need navigation to be able to\n  // diff multiple exceptions\n  //\n  // See: https://github.com/getsentry/sentry/issues/6055\n  const exc = event.entries.find(({type}) => type === 'exception');\n\n  if (!exc) {\n    // Look for a message if not an exception\n    const msg = event.entries.find(({type}) => type === 'message');\n    if (!msg) {\n      return [];\n    }\n    return msg?.data?.formatted && [msg.data.formatted];\n  }\n\n  if (!exc.data) {\n    return [];\n  }\n\n  // TODO(ts): This should be verified when EntryTypeData has the correct type\n  return exc.data.values\n    .filter(value => !!value.stacktrace)\n    .map(value => rawStacktraceContent(value.stacktrace, event.platform, value))\n    .reduce((acc, value) => acc.concat(value), []);\n}\n"],"sourceRoot":""}