{"version":3,"sources":["webpack:///./app/components/fileSize.tsx","webpack:///./app/components/links/linkWithConfirmation.tsx","webpack:///./app/views/releases/detail/releaseArtifacts.jsx"],"names":["FileSize","props","className","bytes","getDynamicText","value","formatBytes","fixed","LinkWithConfirmation","this","disabled","title","children","otherProps","href","classNames","React","PureComponent","ReleaseArtifacts","fetchData","setState","loading","error","api","request","getFilesEndpoint","method","data","omit","location","query","Object","values","URL_PARAM","success","_","jqXHR","fileList","pageLinks","getResponseHeader","state","params","orgId","projectId","release","encodedVersion","encodeURIComponent","project","id","addLoadingMessage","t","filter","file","addSuccessMessage","addErrorMessage","onRetry","length","small","smallEmptyMessage","access","Set","organization","NameColumn","DistributionColumn","SizeAndActionsColumn","map","key","name","dist","size","AlignCenter","has","data-test-id","baseUrl","icon","style","marginLeft","message","onConfirm","handleRemove","bind","Component","space","withOrganization","withApi"],"mappings":"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","file":"ReleaseArtifacts.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {formatBytes} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\n\ntype Props = {\n  className?: string;\n  bytes: number;\n};\n\nfunction FileSize(props: Props) {\n  const {className, bytes} = props;\n\n  return (\n    <span className={className}>\n      {getDynamicText({value: formatBytes(bytes), fixed: 'xx KB'})}\n    </span>\n  );\n}\n\nFileSize.propTypes = {\n  className: PropTypes.string,\n  bytes: PropTypes.number.isRequired,\n};\n\nexport default FileSize;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\n\ntype Props = {\n  message: React.ReactNode;\n  title: string;\n  onConfirm: () => void;\n  disabled?: boolean;\n  className?: string;\n  priority?: React.ComponentProps<typeof Button>['priority'];\n};\n\n/**\n * <Confirm> is a more generic version of this component\n */\nclass LinkWithConfirmation extends React.PureComponent<Props> {\n  render() {\n    const {className, disabled, title, children, ...otherProps} = this.props;\n    return (\n      <Confirm {...otherProps} disabled={disabled}>\n        <a href=\"#\" className={classNames(className || '', {disabled})} title={title}>\n          {children}\n        </a>\n      </Confirm>\n    );\n  }\n}\n\nexport default LinkWithConfirmation;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport omit from 'lodash/omit';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport FileSize from 'app/components/fileSize';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport SentryTypes from 'app/sentryTypes';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport space from 'app/styles/space';\nimport {IconDelete, IconOpen} from 'app/icons';\n\nclass ReleaseArtifacts extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n    api: PropTypes.object,\n    projectId: PropTypes.string,\n    smallEmptyMessage: PropTypes.string,\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      error: false,\n      fileList: [],\n      pageLinks: null,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  getFilesEndpoint() {\n    const {orgId, projectId, release} = this.props.params;\n    const encodedVersion = encodeURIComponent(release);\n    const project = projectId ?? this.props.projectId;\n\n    return project\n      ? `/projects/${orgId}/${project}/releases/${encodedVersion}/files/`\n      : `/organizations/${orgId}/releases/${encodedVersion}/files/`;\n  }\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    this.props.api.request(this.getFilesEndpoint(), {\n      method: 'GET',\n      // We need to omit global selection header url params because they are not supported\n      data: omit(this.props.location.query, [...Object.values(URL_PARAM), 'query']),\n      success: (data, _, jqXHR) => {\n        this.setState({\n          error: false,\n          loading: false,\n          fileList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  };\n\n  handleRemove(id) {\n    addLoadingMessage(t('Removing artifact\\u2026'));\n\n    this.props.api.request(this.getFilesEndpoint() + `${id}/`, {\n      method: 'DELETE',\n      success: () => {\n        const fileList = this.state.fileList.filter(file => file.id !== id);\n\n        this.setState({\n          fileList,\n        });\n\n        addSuccessMessage(t('Artifact removed.'));\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove artifact. Please try again.'));\n      },\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    } else if (this.state.fileList.length === 0) {\n      return (\n        <Panel>\n          <PanelBody>\n            <EmptyStateWarning small={this.props.smallEmptyMessage}>\n              <p>{t('There are no artifacts uploaded for this release.')}</p>\n            </EmptyStateWarning>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    const access = new Set(this.props.organization.access);\n\n    // TODO(dcramer): files should allow you to download them\n    return (\n      <div>\n        <Panel>\n          <PanelHeader>\n            <NameColumn>{t('Name')}</NameColumn>\n            <DistributionColumn>{t('Distribution')}</DistributionColumn>\n            <SizeAndActionsColumn>{t('Size')}</SizeAndActionsColumn>\n          </PanelHeader>\n          <PanelBody>\n            {this.state.fileList.map(file => (\n              <PanelItem key={file.id}>\n                <NameColumn>\n                  <strong>{file.name || '(empty)'}</strong>\n                </NameColumn>\n                <DistributionColumn>\n                  {file.dist || <span className=\"text-light\">{t('None')}</span>}\n                </DistributionColumn>\n                <SizeAndActionsColumn>\n                  <FileSize bytes={file.size} />\n                  <AlignCenter>\n                    {access.has('project:write') ? (\n                      <Button\n                        data-test-id=\"artifact-download\"\n                        href={\n                          this.props.api.baseUrl +\n                          this.getFilesEndpoint() +\n                          `${file.id}/?download=1`\n                        }\n                        size=\"small\"\n                        icon={<IconOpen size=\"xs\" />}\n                      />\n                    ) : (\n                      <Button\n                        data-test-id=\"artifact-download\"\n                        title={t(\n                          'You do not have the required permission to download this artifact.'\n                        )}\n                        disabled\n                        size=\"small\"\n                        icon={<IconOpen size=\"xs\" />}\n                      />\n                    )}\n                    <div style={{marginLeft: 5}}>\n                      <LinkWithConfirmation\n                        className=\"btn btn-sm btn-default\"\n                        title={t('Delete artifact')}\n                        message={t('Are you sure you want to remove this artifact?')}\n                        onConfirm={this.handleRemove.bind(this, file.id)}\n                      >\n                        <IconDelete />\n                      </LinkWithConfirmation>\n                    </div>\n                  </AlignCenter>\n                </SizeAndActionsColumn>\n              </PanelItem>\n            ))}\n          </PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} />\n      </div>\n    );\n  }\n}\n\nconst NameColumn = styled('div')`\n  display: flex;\n  flex: 7;\n  padding-right: ${space(2)};\n  word-wrap: break-word;\n  word-break: break-all;\n`;\nconst DistributionColumn = styled('div')`\n  display: flex;\n  flex: 2;\n  padding-right: ${space(2)};\n`;\nconst SizeAndActionsColumn = styled('div')`\n  display: flex;\n  flex: 3;\n  justify-content: space-between;\n`;\nconst AlignCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport {ReleaseArtifacts};\nexport default withOrganization(withApi(ReleaseArtifacts));\n"],"sourceRoot":""}