{"version":3,"sources":["webpack:///./app/views/settings/components/forms/radioField.jsx","webpack:///./app/views/settings/incidentRules/create.tsx","webpack:///./app/types/experiments.tsx","webpack:///./app/components/list.tsx","webpack:///./app/data/experimentConfig.tsx","webpack:///./app/utils/withExperiment.tsx","webpack:///./app/views/settings/projectAlerts/alertTypeChooser.tsx","webpack:///./app/views/settings/projectAlerts/create.tsx"],"names":["RadioField","onChange","id","onBlur","e","this","props","field","value","disabled","orientInline","choices","label","React","Component","IncidentRulesCreate","handleSubmitSuccess","params","routes","router","location","push","recreateRoute","stepBack","project","eventView","sessionId","defaultRule","createRuleFromEventView","createDefaultRule","onSubmitSuccess","rule","projects","slug","ExperimentType","List","space","IconWrapper","ListItem","icon","className","children","theme","gray700","p","experimentConfig","key","type","Organization","parameter","assignments","reduce","acc","exp","withExperiment","experiment","injectLogExperiment","logExperiment","organization","getProps","WrappedComponent","experimentAssignment","config","experiments","User","ConfigStore","get","displayName","getDisplayName","MetricsTooltip","title","t","IssuesTooltip","TypeChooserCards","selected","trackedOnChange","trackAnalyticsEvent","eventKey","eventName","organization_id","Container","TypeCard","interactive","onClick","RadioLabel","aria-label","checked","requireAll","features","hasFeature","Fragment","tct","tooltip","ExampleHeading","code","TypeChooserFlow","state","update","setState","granularity","selectMetricAlerts","selectIssueAlerts","help","learnMore","href","Example","fontSizeSmall","gray600","gray500","Card","textStyles","Create","undefined","alertType","pathname","includes","uniqueId","handleChangeAlertType","project_id","session_id","query","createFromDiscover","EventView","fromLocation","hasMetricAlerts","projectId","shouldShowAlertTypeChooser","objSlug","withProject"],"mappings":"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","file":"ProjectAlertsCreate.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\nclass RadioField extends React.Component {\n  static propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.string,\n    choices: PropTypes.arrayOf(PropTypes.array),\n    orientInline: PropTypes.bool,\n    disabled: PropTypes.bool,\n  };\n\n  onChange = (id, onChange, onBlur, e) => {\n    onChange(id, e);\n    onBlur(id, e);\n  };\n\n  render() {\n    return (\n      <InputField\n        {...this.props}\n        field={({onChange, onBlur, value, disabled, orientInline, ...props}) => (\n          <RadioGroup\n            choices={props.choices}\n            disabled={disabled}\n            orientInline={orientInline}\n            value={value === '' ? null : value}\n            label={props.label}\n            onChange={(id, e) => this.onChange(id, onChange, onBlur, e)}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default RadioField;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n} from 'app/views/settings/incidentRules/constants';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport EventView from 'app/utils/discover/eventView';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  eventView: EventView | undefined;\n  sessionId?: string;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nclass IncidentRulesCreate extends React.Component<Props> {\n  handleSubmitSuccess = () => {\n    const {params, routes, router, location} = this.props;\n\n    router.push(recreateRoute('', {params, routes, location, stepBack: -1}));\n  };\n\n  render() {\n    const {project, eventView, sessionId, ...props} = this.props;\n    const defaultRule = eventView\n      ? createRuleFromEventView(eventView)\n      : createDefaultRule();\n\n    return (\n      <RuleForm\n        onSubmitSuccess={this.handleSubmitSuccess}\n        rule={{...defaultRule, projects: [project.slug]}}\n        sessionId={sessionId}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default IncidentRulesCreate;\n","import {experimentList, unassignedValue} from 'app/data/experimentConfig';\n\n/**\n * The grouping of the experiment\n */\nexport enum ExperimentType {\n  Organization = 'organization',\n  User = 'user',\n}\n\n/**\n * An experiment configuration object defines an experiment in the frontend.\n * This drives various logic in experiment helpers.\n */\nexport type ExperimentConfig = {\n  /**\n   * The name of the organization. This maps to the key exposed by the\n   * organization manager on the backend.\n   */\n  key: string;\n  /**\n   * The type of experiment. This configures what group the experiment is\n   * performed on.\n   *\n   * A Organization experiment assigns the whole organization.\n   * A User experiment assigns a single user.\n   */\n  type: ExperimentType;\n  /**\n   * The parameter used to access the assignment value\n   */\n  parameter: string | 'variant' | 'exposed';\n  /**\n   * Possible assignment values of the experiment\n   */\n  assignments: ReadonlyArray<string | number | typeof unassignedValue>;\n};\n\n// NOTE: The code below is mostly type mechanics to provide utility types\n// around experiments for use in experiment helpers. You probably don't need to\n// modify this and likely just need to make changes to the experiment list [0]\n//\n// [0]: app/data/experimentConfig.tsx\n\ntype ExperimentList = typeof experimentList[number];\n\ntype ExperimentSelect<\n  C extends ExperimentConfig,\n  N extends ExperimentConfig['key']\n> = C extends {key: N} ? C : never;\n\ntype TypeSelect<\n  C extends ExperimentConfig,\n  T extends ExperimentConfig['type']\n> = C extends {type: T} ? C : never;\n\n/**\n * A mapping of experiment key to the experiment configuration.\n */\nexport type Experiments = {\n  [E in ExperimentList['key']]: ExperimentSelect<ExperimentList, E>;\n};\n\n/**\n * Represents an active experiment key\n */\nexport type ExperimentKey = keyof Experiments;\n\ntype GetExperimentAssignment<E extends ExperimentList['key']> = {\n  [K in E]: Experiments[K]['assignments'][number];\n};\n\nexport type OrgExperiments = GetExperimentAssignment<\n  TypeSelect<ExperimentList, ExperimentType.Organization>['key']\n>;\n\nexport type UserExperiments = GetExperimentAssignment<\n  TypeSelect<ExperimentList, ExperimentType.User>['key']\n>;\n\nexport type ExperimentAssignment = GetExperimentAssignment<ExperimentList['key']>;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport theme from 'app/utils/theme';\nimport space from 'app/styles/space';\n\nexport const List = styled('ul')`\n  list-style: none;\n  padding: 0;\n  margin-bottom: ${space(2)};\n\n  ol& {\n    counter-reset: numberedList;\n  }\n`;\n\ntype ListItemProps = {\n  icon?: React.ReactNode;\n  children?: string | React.ReactNode;\n  className?: string;\n};\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin-right: ${space(1)};\n\n  /* Give the wrapper an explicit height so icons are line height with the\n   * (common) line height. */\n  height: 16px;\n  align-items: center;\n`;\n\nexport const ListItem = styled(({icon, className, children}: ListItemProps) => (\n  <li className={className}>\n    {icon && <IconWrapper>{icon}</IconWrapper>}\n    {children}\n  </li>\n))<ListItemProps>`\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding-left: 34px;\n  margin-bottom: ${space(0.5)};\n\n  &:before,\n  & > ${IconWrapper} {\n    position: absolute;\n    left: 0;\n  }\n\n  ul & {\n    color: ${theme.gray700};\n    &:before {\n      content: '';\n      width: 6px;\n      height: 6px;\n      border-radius: 50%;\n      margin-right: ${space(2)};\n      border: 1px solid ${theme.gray700};\n      background-color: transparent;\n      left: 5px;\n      top: 10px;\n    }\n\n    ${p =>\n      p.icon &&\n      `\n      & > ${IconWrapper} {\n        top: 4px;\n      }\n\n      &:before {\n        content: none;\n      }\n    `}\n  }\n\n  ol & {\n    &:before {\n      counter-increment: numberedList;\n      content: counter(numberedList);\n      top: 3px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      width: 18px;\n      height: 18px;\n      font-size: 10px;\n      font-weight: 600;\n      border: 1px solid ${theme.gray700};\n      border-radius: 50%;\n      background-color: transparent;\n      margin-right: ${space(2)};\n    }\n  }\n`;\n","import {Experiments, ExperimentType} from 'app/types/experiments';\n\n/**\n * This is the value an experiment will have when the unit of assignment\n * (organization, user, etc) is not part of any experiment group.\n *\n * This likely indicates they should see nothing, or the original version of\n * what's being tested.\n */\nexport const unassignedValue = -1;\n\n/**\n * Frontend experiment configuration object\n */\nexport const experimentList = [\n  {\n    key: 'IntegrationDirectoryCategoryExperiment',\n    type: ExperimentType.Organization,\n    parameter: 'variant',\n    assignments: ['0', '1'],\n  },\n  {\n    key: 'TrialEndingNotice',\n    type: ExperimentType.Organization,\n    parameter: 'exposed',\n    assignments: [0, 1],\n  },\n  {\n    key: 'MetricAlertsTypeChooser',\n    type: ExperimentType.Organization,\n    parameter: 'variant',\n    assignments: ['boolean', 'flowChoice', unassignedValue],\n  },\n] as const;\n\nexport const experimentConfig = experimentList.reduce(\n  (acc, exp) => ({...acc, [exp.key]: exp}),\n  {}\n) as Experiments;\n","import React from 'react';\n\nimport ConfigStore from 'app/stores/configStore';\nimport {Organization} from 'app/types';\nimport {getDisplayName} from 'app/utils/environment';\nimport {experimentConfig, unassignedValue} from 'app/data/experimentConfig';\nimport {logExperiment} from 'app/utils/analytics';\nimport {\n  Experiments,\n  ExperimentKey,\n  ExperimentAssignment,\n  ExperimentType,\n  OrgExperiments,\n  UserExperiments,\n} from 'app/types/experiments';\n\ntype Options<E extends ExperimentKey, L extends boolean> = {\n  /**\n   * The key of the experiment that will be injected into the component\n   */\n  experiment: E;\n  /**\n   * By default this HoC will log the exposure of the experiment upon mounting\n   * of the component.\n   *\n   * If this is undesirable, for example if the experiment is hidden behind\n   * some user action beyond this component being mounted, then you will want\n   * to customize when exposure to the experiment has been logged.\n   *\n   * Marking this value as true will inject a `logExperiment` function as a\n   * prop which takes no parameters and will log exposure of the experiment\n   * when called.\n   *\n   * NOTE: If set to true, YOU ARE RESPONSIBLE for logging exposure of the\n   *       experiment!! If you do not log exposure your experiment will not be\n   *       correct!!\n   */\n  injectLogExperiment?: L;\n};\n\ntype ExpectedProps<T extends ExperimentType> = T extends 'organization'\n  ? {organization: Organization}\n  : {};\n\ntype InjectedExperimentProps<E extends ExperimentKey, L extends boolean> = {\n  /**\n   * The value of the injected experiment. Use this to determine behavior of\n   * your component depending on the value.\n   */\n  experimentAssignment: ExperimentAssignment[E];\n} & (L extends true ? LogExperimentProps : {});\n\ntype LogExperimentProps = {\n  /**\n   * Call this method when the user has been exposed to the experiment this\n   * component has been provided the value of.\n   */\n  logExperiment: () => void;\n};\n\n/**\n * A HoC wrapper that injects `experimentAssignment` into a component\n *\n * This wrapper will automatically log exposure of the experiment upon\n * receiving the componentDidMount lifecycle event.\n *\n * For organization experiments, an organization object must be provided to the\n * component. You may wish to use the withOrganization HoC for this.\n *\n * If exposure logging upon mount is not desirable, The `injectLogExperiment`\n * option may be of use.\n *\n * NOTE: When using this you will have to type the `experimentAssignment` prop\n *       on your component. For this you should use the `ExperimentAssignment`\n *       mapped type.\n */\nfunction withExperiment<\n  E extends ExperimentKey,\n  L extends boolean,\n  P extends InjectedExperimentProps<E, L>\n>(Component: React.ComponentType<P>, {experiment, injectLogExperiment}: Options<E, L>) {\n  type Props = Omit<P, keyof InjectedExperimentProps<E, L>> &\n    ExpectedProps<Experiments[E]['type']>;\n\n  return class extends React.Component<Props> {\n    static displayName = `withExperiment[${experiment}](${getDisplayName(Component)})`;\n\n    // NOTE(ts): Because of the type complexity of this HoC, typescript\n    // has a hard time understanding how to narrow Experiments[E]['type']\n    // when we type assert on it.\n    //\n    // This means we have to do some typecasting to massage things into working\n    // as expected.\n    //\n    // We DO guarantee the external API of this HoC is typed accurately.\n\n    componentDidMount() {\n      if (!injectLogExperiment) {\n        this.logExperiment();\n      }\n    }\n\n    getProps<P extends ExperimentType>() {\n      return (this.props as unknown) as ExpectedProps<P>;\n    }\n\n    get config() {\n      return experimentConfig[experiment];\n    }\n\n    get experimentAssignment() {\n      const {type} = this.config;\n\n      if (type === ExperimentType.Organization) {\n        const key = experiment as keyof OrgExperiments;\n        return this.getProps<typeof type>().organization.experiments[key];\n      }\n\n      if (type === ExperimentType.User) {\n        const key = experiment as keyof UserExperiments;\n        return ConfigStore.get('user').experiments[key];\n      }\n\n      return unassignedValue;\n    }\n\n    logExperiment = () =>\n      logExperiment({\n        key: experiment,\n        organization: this.getProps<ExperimentType.Organization>().organization,\n      });\n\n    render() {\n      const WrappedComponent = Component as React.JSXElementConstructor<any>;\n\n      const props = {\n        experimentAssignment: this.experimentAssignment,\n        ...(injectLogExperiment ? {logExperiment: this.logExperiment} : {}),\n        ...this.props,\n      } as unknown;\n\n      return <WrappedComponent {...(props as P)} />;\n    }\n  };\n}\n\nexport default withExperiment;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Card from 'app/components/card';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport Radio from 'app/components/radio';\nimport textStyles from 'app/styles/text';\nimport {List, ListItem} from 'app/components/list';\nimport FeatureBadge from 'app/components/featureBadge';\nimport Tooltip from 'app/components/tooltip';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport RadioField from 'app/views/settings/components/forms/radioField';\nimport Feature from 'app/components/acl/feature';\nimport ExternalLink from 'app/components/links/externalLink';\nimport withExperiment from 'app/utils/withExperiment';\nimport {ExperimentAssignment} from 'app/types/experiments';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype Props = {\n  organization: Organization;\n  selected?: string | null;\n  onChange: (type: AlertType) => void;\n};\n\nconst MetricsTooltip = ({children}: {children?: React.ReactNode}) => (\n  <Tooltip\n    title={t(\n      `A metric is the value of an aggregate function like count() or avg()\n       applied to your events over time`\n    )}\n  >\n    <abbr>{children}</abbr>\n  </Tooltip>\n);\n\nconst IssuesTooltip = ({children}: {children?: React.ReactNode}) => (\n  <Tooltip\n    title={t(\n      `Sentry groups similar events into an Issue based on their stack trace\n       and other factors.`\n    )}\n  >\n    <abbr>{children}</abbr>\n  </Tooltip>\n);\n\nconst TypeChooserCards = ({onChange, organization, selected}: Props) => {\n  const trackedOnChange = (type: AlertType) => {\n    trackAnalyticsEvent({\n      eventKey: 'alert_chooser_cards.select',\n      eventName: 'Alert Chooser Cards: Select',\n      organization_id: organization.id,\n      type,\n    });\n\n    onChange(type);\n  };\n\n  return (\n    <Container>\n      <TypeCard interactive onClick={() => trackedOnChange('metric')}>\n        <RadioLabel>\n          <Radio\n            aria-label=\"metric\"\n            checked={selected === 'metric'}\n            onChange={() => trackedOnChange('metric')}\n          />\n          {t('Metric Alert')}\n          <FeatureBadge type=\"beta\" />\n        </RadioLabel>\n        <Feature requireAll features={['organizations:performance-view']}>\n          {({hasFeature}) =>\n            hasFeature ? (\n              <React.Fragment>\n                <p>\n                  {tct(`Notifies you when a [tooltip:metric] exceeds a threshold.`, {\n                    tooltip: <MetricsTooltip />,\n                  })}\n                </p>\n                {!selected && (\n                  <React.Fragment>\n                    <ExampleHeading>{t('For Example:')}</ExampleHeading>\n                    <List>\n                      <ListItem>\n                        {t('Performance metrics like latency and apdex')}\n                      </ListItem>\n                      <ListItem>\n                        {t(\n                          `Frequency of error events or users affected in the\n                       project`\n                        )}\n                      </ListItem>\n                    </List>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <p>\n                  {tct(\n                    `Notifies you when a [tooltip:metric] like frequency of events or users affected in\n                   the project exceeds a threshold.`,\n                    {tooltip: <MetricsTooltip />}\n                  )}\n                </p>\n                {!selected && (\n                  <React.Fragment>\n                    <ExampleHeading>{t('For Example:')}</ExampleHeading>\n                    <List>\n                      <ListItem>\n                        {t('Total events in the project exceed 1000/minute')}\n                      </ListItem>\n                      <ListItem>\n                        {tct(\n                          'Events with tag [code:database] and \"API\" in the title exceed 100/minute',\n                          {code: <code />}\n                        )}\n                      </ListItem>\n                    </List>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            )\n          }\n        </Feature>\n      </TypeCard>\n      <TypeCard interactive onClick={() => trackedOnChange('issue')}>\n        <RadioLabel>\n          <Radio\n            aria-label=\"issue\"\n            checked={selected === 'issue'}\n            onChange={() => trackedOnChange('issue')}\n          />\n          {t('Issue Alert')}\n        </RadioLabel>\n        <p>\n          {tct(\n            `Notifies you when individual [tooltip:Sentry Issues] trigger your\n           alerting criteria.`,\n            {tooltip: <IssuesTooltip />}\n          )}\n        </p>\n        {!selected && (\n          <React.Fragment>\n            <ExampleHeading>{t('For Example:')}</ExampleHeading>\n            <List>\n              <ListItem>{t('New Issues or regressions')}</ListItem>\n              <ListItem>\n                {t('Frequency of individual Issues exceeds 100/minute')}\n              </ListItem>\n            </List>\n          </React.Fragment>\n        )}\n      </TypeCard>\n    </Container>\n  );\n};\n\ntype State = {\n  type?: 'frequency' | 'issues';\n  granularity?: 'project' | 'issue';\n};\n\nclass TypeChooserFlow extends React.Component<Props, State> {\n  state: State = {};\n\n  update = (state: Partial<State>) =>\n    this.setState(state, () => {\n      const {type, granularity} = this.state;\n      const {organization, onChange} = this.props;\n\n      const selectMetricAlerts = type === 'frequency' && granularity === 'project';\n\n      const selectIssueAlerts =\n        type === 'issues' || (type === 'frequency' && granularity === 'issue');\n\n      trackAnalyticsEvent({\n        eventKey: 'alert_chooser_flow.select',\n        eventName: 'Alert Chooser Flow: Select',\n        organization_id: organization.id,\n        type,\n        granularity,\n      });\n\n      onChange(selectMetricAlerts ? 'metric' : selectIssueAlerts ? 'issue' : null);\n    });\n\n  render() {\n    const {type, granularity} = this.state;\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Alert details')}</PanelHeader>\n        <RadioField\n          label={t('Alert type')}\n          help={tct(\n            'Remember that Sentry groups similar events into an Issue based on their stack trace and other factors. [learnMore:Learn more]',\n            {\n              learnMore: (\n                <ExternalLink href=\"https://docs.sentry.io/data-management/event-grouping/\" />\n              ),\n            }\n          )}\n          onChange={value => this.update({type: value})}\n          value={type}\n          choices={[\n            ['frequency', t('Frequency of events or users affected increasing')],\n            ['issues', t('New issues and regressions')],\n          ]}\n        />\n        {type === 'frequency' && (\n          <RadioField\n            label={t('Granularity')}\n            help={t(\n              'Frequency thresholds can be set per Issue or for the entire project.'\n            )}\n            onChange={value => this.update({granularity: value})}\n            value={granularity}\n            choices={[\n              [\n                'project',\n                t('Frequency of events in entire project'),\n                <React.Fragment key=\"list\">\n                  <Example>{t('Total events in the project exceed 1000/minute')}</Example>\n                  <Example>\n                    {t(\n                      'Events with tag `database` and API in the title exceed 100/minute'\n                    )}\n                  </Example>\n                </React.Fragment>,\n              ],\n              [\n                'issue',\n                t('Frequency of individual Issues'),\n\n                <React.Fragment key=\"list\">\n                  <Example>\n                    {t(\n                      `Any single Issue on the checkout page happens more than\n                       100 times in a minute.`\n                    )}\n                  </Example>\n                </React.Fragment>,\n              ],\n            ]}\n          />\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst RadioLabel = styled('label')`\n  cursor: pointer;\n  margin-bottom: ${space(3)};\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: max-content;\n  align-items: center;\n  grid-gap: ${space(2)};\n`;\n\nconst ExampleHeading = styled('div')`\n  text-transform: uppercase;\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: bold;\n  color: ${p => p.theme.gray600};\n  margin-bottom: ${space(2)};\n`;\n\nconst Example = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.gray500};\n`;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: ${space(3)};\n`;\n\nconst TypeCard = styled(Card)`\n  cursor: pointer;\n  padding: ${space(4)};\n  margin-bottom: ${space(3)};\n  ${textStyles};\n`;\n\ntype ExperimentProps = {\n  experimentAssignment: ExperimentAssignment['MetricAlertsTypeChooser'];\n};\n\nexport default withExperiment(\n  ({experimentAssignment, ...props}: Props & ExperimentProps) =>\n    experimentAssignment === 'flowChoice' ? (\n      <TypeChooserFlow {...props} />\n    ) : (\n      <TypeChooserCards {...props} />\n    ),\n  {experiment: 'MetricAlertsTypeChooser'}\n);\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport {t} from 'app/locale';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport IncidentRulesCreate from 'app/views/settings/incidentRules/create';\nimport IssueEditor from 'app/views/settings/projectAlerts/issueEditor';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport withProject from 'app/utils/withProject';\nimport EventView from 'app/utils/discover/eventView';\nimport {uniqueId} from 'app/utils/guid';\n\nimport AlertTypeChooser from './alertTypeChooser';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype State = {\n  alertType: AlertType;\n  eventView: EventView | undefined;\n};\n\nclass Create extends React.Component<Props, State> {\n  state: State = {\n    eventView: undefined,\n    alertType: this.props.location.pathname.includes('/alerts/rules/')\n      ? 'issue'\n      : this.props.location.pathname.includes('/alerts/metric-rules/')\n      ? 'metric'\n      : null,\n  };\n\n  componentDidMount() {\n    const {organization, project, location} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'new_alert_rule.viewed',\n      eventName: 'New Alert Rule: Viewed',\n      organization_id: organization.id,\n      project_id: project.id,\n      session_id: this.sessionId,\n    });\n\n    if (location?.query?.createFromDiscover) {\n      const eventView = EventView.fromLocation(location);\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({alertType: 'metric', eventView});\n    }\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  handleChangeAlertType = (alertType: AlertType) => {\n    // alertType should be `issue` or `metric`\n    this.setState({alertType});\n  };\n\n  render() {\n    const {hasMetricAlerts, organization} = this.props;\n    const {projectId} = this.props.params;\n    const {alertType, eventView} = this.state;\n\n    const shouldShowAlertTypeChooser = hasMetricAlerts;\n    const title = t('New Alert');\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} objSlug={projectId} />\n        <SettingsPageHeader title={title} />\n\n        {shouldShowAlertTypeChooser && (\n          <AlertTypeChooser\n            organization={organization}\n            selected={alertType}\n            onChange={this.handleChangeAlertType}\n          />\n        )}\n\n        {(!hasMetricAlerts || alertType === 'issue') && <IssueEditor {...this.props} />}\n\n        {hasMetricAlerts && alertType === 'metric' && (\n          <IncidentRulesCreate\n            {...this.props}\n            eventView={eventView}\n            sessionId={this.sessionId}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withProject(Create);\n"],"sourceRoot":""}