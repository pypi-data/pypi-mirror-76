{"version":3,"sources":["webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/actionCreators/teams.jsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/components/teams/createTeamForm.tsx"],"names":["CreateTeamModal","handleSubmit","data","onSuccess","onError","props","organization","api","createTeam","orgId","slug","then","resp","handleSuccess","err","team","this","onClose","closeModal","Body","Header","Fragment","closeButton","onHide","t","onSubmit","React","Component","withApi","TextField","type","doCallback","params","name","args","fetchTeamDetails","options","TeamActions","fetchDetails","teamId","request","success","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","requestPromise","createTeamSuccess","addSuccessMessage","tct","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","slugify","str","toLowerCase","replace","CreateTeamForm","handleCreateTeamSuccess","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","requireChanges","data-test-id","formProps","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput"],"mappings":"mhBAgBMA,E,yUACJC,aAAe,SAACC,EAAcC,EAAqBC,GAAsB,MAC3C,EAAKC,MAA1BC,EADgE,EAChEA,aAAcC,EADkD,EAClDA,IACrBC,YAAWD,EAAKL,EAAM,CAACO,MAAOH,EAAaI,OACxCC,MAAK,SAACC,GACL,EAAKC,cAAcD,GACnBT,EAAUS,MAHd,OAKS,SAACE,GACNV,EAAQU,O,oDAIAC,GACRC,KAAKX,MAAMY,SACbD,KAAKX,MAAMY,QAAQF,GAGrBC,KAAKX,MAAMa,e,+BAGJ,MACsCF,KAAKX,MAA3Cc,EADA,EACAA,KAAMC,EADN,EACMA,OAAQF,EADd,EACcA,WAAeb,EAD7B,sCAGP,OACE,YAAC,IAAMgB,SAAP,KACE,YAACD,EAAD,CAAQE,aAAW,EAACC,OAAQL,GACzBM,YAAE,gBAEL,YAACL,EAAD,KACE,YAAC,IAAD,OAAoBd,EAApB,CAA2BoB,SAAUT,KAAKf,sB,GA9BtByB,IAAMC,WAA9B3B,E,8BAqCS4B,sBAAQ5B,I,+GC/CR,SAAS6B,EAAUxB,GAChC,OAAO,YAAC,IAAD,OAAgBA,EAAhB,CAAuByB,KAAK,UADbD,E,2DCNxB,mRAKME,EAAa,WAAgC,IAA/BC,EAA+B,uDAAtB,GAAIC,EAAkB,uCACjD,GAA4B,mBAAjBD,EAAOC,GAAsB,4BADAC,EACA,iCADAA,EACA,kBACtCF,EAAOC,GAAP,MAAAD,EAAgBE,KAmBb,SAASC,EAAiB5B,EAAKyB,EAAQI,GAE5C,OADAC,IAAYC,aAAaN,EAAOO,QACzBhC,EAAIiC,QAAJ,iBAAsBR,EAAOvB,MAA7B,YAAsCuB,EAAOO,OAA7C,KAAwD,CAC7DE,QAAS,SAAAvC,GACPmC,IAAYK,oBAAoBV,EAAOO,OAAQrC,GAC/C6B,EAAWK,EAAS,UAAWlC,IAEjCyC,MAAO,SAAAA,GACLN,IAAYO,kBAAkBZ,EAAOO,OAAQI,GAC7CZ,EAAWK,EAAS,QAASO,MAK5B,SAASE,EAAkBN,EAAQrC,GACxCmC,IAAYS,cAAcP,EAAQrC,GAG7B,SAAS6C,EAAWxC,EAAKyB,EAAQI,GACtC,IAAMY,EAAW,UAAH,OAAahB,EAAOvB,MAApB,YAA6BuB,EAAOO,OAApC,KAGd,OAFAF,IAAYY,OAAOjB,EAAOO,OAAQP,EAAO9B,MAElCK,EAAIiC,QAAQQ,EAAU,CAC3BE,OAAQ,MACRhD,KAAM8B,EAAO9B,KACbuC,QAAS,SAAAvC,GACP2C,EAAkBb,EAAOO,OAAQrC,GACjC6B,EAAWK,EAAS,UAAWlC,IAEjCyC,MAAO,SAAAA,GACLN,IAAYc,YAAYnB,EAAOO,OAAQI,GACvCZ,EAAWK,EAAS,QAASO,MAK5B,SAASS,EAAS7C,EAAKyB,EAAQI,GACpC,IAAMY,EAAW,kBAAH,OAAqBhB,EAAOvB,MAA5B,oBAA6CuB,EAAOqB,UAChE,KADY,kBACErB,EAAOO,OADT,KAERe,EAAKC,cAIX,OAFAlB,IAAYY,OAAOK,EAAItB,EAAOO,QAEvBhC,EAAIiC,QAAQQ,EAAU,CAC3BE,OAAQ,OACRhD,KAAM8B,EAAO9B,KACbuC,QAAS,SAAAvC,GACPmC,IAAYS,cAAcd,EAAOO,OAAQrC,GACzC6B,EAAWK,EAAS,UAAWlC,IAEjCyC,MAAO,SAAAA,GACLN,IAAYc,YAAYG,EAAItB,EAAOO,OAAQI,GAC3CZ,EAAWK,EAAS,QAASO,MAK5B,SAASa,EAAUjD,EAAKyB,EAAQI,GACrC,IAAMY,EAAW,kBAAH,OAAqBhB,EAAOvB,MAA5B,oBAA6CuB,EAAOqB,UAChE,KADY,kBACErB,EAAOO,OADT,KAERe,EAAKC,cAIX,OAFAlB,IAAYY,OAAOK,EAAItB,EAAOO,QAEvBhC,EAAIiC,QAAQQ,EAAU,CAC3BE,OAAQ,SACRT,QAAS,SAAAvC,GACPmC,IAAYS,cAAcd,EAAOO,OAAQrC,GACzC6B,EAAWK,EAAS,UAAWlC,IAEjCyC,MAAO,SAAAA,GACLN,IAAYc,YAAYG,EAAItB,EAAOO,OAAQI,GAC3CZ,EAAWK,EAAS,QAASO,MAK5B,SAASnC,EAAWD,EAAKQ,EAAMiB,GAGpC,OAFAK,IAAY7B,WAAWO,GAEhBR,EACJkD,eADI,yBAC6BzB,EAAOvB,MADpC,WACoD,CACvDyC,OAAQ,OACRhD,KAAMa,IAEPJ,MACC,SAAAT,GAQE,OAPAmC,IAAYqB,kBAAkBxD,GAC9ByD,YACEC,YAAI,2DAA4D,CAC9D7C,KAAM,IAAF,OAAMb,EAAKQ,MACfJ,aAAc0B,EAAOvB,SAGlBP,KAET,SAAAY,GAQE,MAPAuB,IAAYwB,gBAAgB9C,EAAKL,MAAQK,EAAKkB,KAAMnB,GACpDgD,YACEF,YAAI,6DAA8D,CAChE7C,KAAM,IAAF,OAAMA,EAAKL,MAAQK,EAAKkB,MAC5B3B,aAAc0B,EAAOvB,SAGnBK,KAKP,SAASiD,EAAWxD,EAAKyB,GAG9B,OAFAK,IAAY0B,WAAW/B,EAAOO,QAEvBhC,EACJkD,eADI,iBACqBzB,EAAOvB,MAD5B,YACqCuB,EAAOO,OAD5C,KACuD,CAC1DW,OAAQ,WAETvC,MACC,SAAAT,GAQE,OAPAmC,IAAY2B,kBAAkBhC,EAAOO,OAAQrC,GAC7CyD,YACEC,YAAI,+DAAgE,CAClE7C,KAAM,IAAF,OAAMiB,EAAOO,QACjBjC,aAAc0B,EAAOvB,SAGlBP,KAET,SAAAY,GAQE,MAPAuB,IAAY4B,gBAAgBjC,EAAOO,OAAQzB,GAC3CgD,YACEF,YAAI,+DAAgE,CAClE7C,KAAM,IAAF,OAAMiB,EAAOO,QACjBjC,aAAc0B,EAAOvB,SAGnBK,O,kCC/JC,SAASoD,EAAQC,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,GAHzE,mC,qeCmBqBC,E,yUACnBC,wBAA0B,SAACrE,GAAkB,IACpCC,EAAa,EAAKE,MAAlBF,UAEkB,mBAAdA,GAIXA,EAAUD,I,+CAGH,IACAI,EAAgBU,KAAKX,MAArBC,aAEP,OACE,YAAC,IAAMe,SAAP,KACE,qBACGG,YACC,qHAIJ,YAAC,IAAD,KACEgD,YAAahD,YAAE,eACfiD,YAAW,yBAAoBnE,EAAaI,KAAjC,WACXgE,UAAU,OACVjD,SAAUT,KAAKX,MAAMoB,SACrBkD,gBAAiB3D,KAAKuD,wBACtBK,gBAAc,EACdC,eAAa,oBACT7D,KAAKX,MAAMyE,WAEf,YAAC,IAAD,CACE7C,KAAK,OACL8C,MAAOvD,YAAE,aACTwD,YAAaxD,YAAE,0CACfyD,KAAMzD,YAAE,mEACR0D,UAAQ,EACRC,SAAO,EACPC,0BAAwB,EACxBC,QAAQ,EACRC,eAAgBpB,Y,GAzCgBxC,IAAMC,WAA7B2C,E","file":"CreateTeamModal.js","sourcesContent":["import React from 'react';\n\nimport {Client} from 'app/api';\nimport {createTeam} from 'app/actionCreators/teams';\nimport {t} from 'app/locale';\nimport {Organization, Team} from 'app/types';\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport CreateTeamForm from 'app/components/teams/createTeamForm';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  onClose?: (team: Team) => void;\n} & ModalRenderProps;\n\nclass CreateTeamModal extends React.Component<Props> {\n  handleSubmit = (data: object, onSuccess: Function, onError: Function) => {\n    const {organization, api} = this.props;\n    createTeam(api, data, {orgId: organization.slug})\n      .then((resp: Team) => {\n        this.handleSuccess(resp);\n        onSuccess(resp);\n      })\n      .catch((err: Error) => {\n        onError(err);\n      });\n  };\n\n  handleSuccess(team: Team) {\n    if (this.props.onClose) {\n      this.props.onClose(team);\n    }\n\n    this.props.closeModal();\n  }\n\n  render() {\n    const {Body, Header, closeModal, ...props} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {t('Create Team')}\n        </Header>\n        <Body>\n          <CreateTeamForm {...props} onSubmit={this.handleSubmit} />\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(CreateTeamModal);\n","import React from 'react';\n\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n\nTextField.propTypes = {...InputField.propTypes};\n","import TeamActions from 'app/actions/teamActions';\nimport {tct} from 'app/locale';\nimport {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {uniqueId} from 'app/utils/guid';\n\nconst doCallback = (params = {}, name, ...args) => {\n  if (typeof params[name] === 'function') {\n    params[name](...args);\n  }\n};\n\n// Fetch teams for org\nexport function fetchTeams(api, params, options) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(api, params, options) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId, data) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(api, params, options) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    data: params.data,\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api, team, params) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug || team.name, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug || team.name}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api, params) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport Form from 'app/views/settings/components/forms/form';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport slugify from 'app/utils/slugify';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onSubmit?: (data: object, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n  formProps?: Partial<typeof Form>;\n};\n\nexport default class CreateTeamForm extends React.Component<Props> {\n  handleCreateTeamSuccess = (data: Payload) => {\n    const {onSuccess} = this.props;\n\n    if (typeof onSuccess !== 'function') {\n      return;\n    }\n\n    onSuccess(data);\n  };\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <React.Fragment>\n        <p>\n          {t(\n            \"Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.\"\n          )}\n        </p>\n\n        <Form\n          submitLabel={t('Create Team')}\n          apiEndpoint={`/organizations/${organization.slug}/teams/`}\n          apiMethod=\"POST\"\n          onSubmit={this.props.onSubmit}\n          onSubmitSuccess={this.handleCreateTeamSuccess}\n          requireChanges\n          data-test-id=\"create-team-form\"\n          {...this.props.formProps}\n        >\n          <TextField\n            name=\"slug\"\n            label={t('Team Slug')}\n            placeholder={t('e.g. operations, web-frontend, desktop')}\n            help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n            required\n            stacked\n            flexibleControlStateSize\n            inline={false}\n            transformInput={slugify}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}