{"version":3,"sources":["webpack:///./app/components/issues/groupListHeader.tsx","webpack:///./app/components/issues/groupList.tsx","webpack:///./app/views/releases/detail/releaseNewEvents.jsx"],"names":["GroupListHeader","withChart","disablePadding","width","mx","flex","className","t","justifyContent","GroupList","createReactClass","displayName","contextTypes","location","PropTypes","object","mixins","Reflux","listenTo","GroupStore","getInitialState","loading","error","groups","componentWillMount","this","_streamManager","StreamManager","fetchData","shouldComponentUpdate","nextProps","nextState","isEqual","state","endpointPath","props","query","queryParams","componentDidUpdate","prevProps","orgId","componentWillUnmount","loadInitialData","api","setState","fetchOrgMembers","then","members","memberList","indexMembersByProject","request","getGroupListEndpoint","success","data","_","jqXHR","push","pageLinks","getResponseHeader","path","queryParameters","getQueryParams","qs","context","limit","sort","onCursorChange","cursor","pageDiff","queryPageInt","parseInt","page","nextPage","isNaN","undefined","browserHistory","pathname","onGroupChange","getAllItems","render","canSelectGroups","renderEmptyMessage","withPagination","onRetry","length","Fragment","map","id","project","hasOwnProperty","slug","key","canSelect","onCursor","defaultProps","withApi","ReleaseNewEvents","release","params","icon","size","type","to","version"],"mappings":"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","file":"ReleaseNewEvents.js","sourcesContent":["import React from 'react';\nimport {Flex, Box} from 'reflexbox';\n\nimport {t} from 'app/locale';\nimport {PanelHeader} from 'app/components/panels';\n\ntype Props = {\n  withChart: boolean;\n};\n\nconst GroupListHeader = ({withChart = true}: Props) => (\n  <PanelHeader disablePadding>\n    <Box width={[8 / 12, 8 / 12, 6 / 12]} mx={2} flex=\"1\" className=\"toolbar-header\">\n      {t('Issue')}\n    </Box>\n    {withChart && (\n      <Box width={160} mx={2} className=\"toolbar-header hidden-xs hidden-sm\">\n        {t('Last 24 hours')}\n      </Box>\n    )}\n    <Flex width={80} mx={2} justifyContent=\"flex-end\" className=\"toolbar-header\">\n      {t('events')}\n    </Flex>\n    <Flex width={80} mx={2} justifyContent=\"flex-end\" className=\"toolbar-header\">\n      {t('users')}\n    </Flex>\n    <Flex\n      width={80}\n      mx={2}\n      justifyContent=\"flex-end\"\n      className=\"hidden-xs hidden-sm toolbar-header\"\n    >\n      {t('Assignee')}\n    </Flex>\n  </PanelHeader>\n);\n\nexport default GroupListHeader;\n","import isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport {browserHistory} from 'react-router';\nimport * as qs from 'query-string';\n\nimport {Client} from 'app/api';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {fetchOrgMembers, indexMembersByProject} from 'app/actionCreators/members';\nimport {t} from 'app/locale';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport GroupStore from 'app/stores/groupStore';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport StreamGroup from 'app/components/stream/group';\nimport StreamManager from 'app/utils/streamManager';\nimport withApi from 'app/utils/withApi';\nimport Pagination from 'app/components/pagination';\nimport {Group} from 'app/types';\n\nimport GroupListHeader from './groupListHeader';\n\nconst defaultProps = {\n  canSelectGroups: true,\n  withChart: true,\n  withPagination: true,\n};\n\ntype Props = {\n  api: Client;\n  query: string;\n  orgId: string;\n  endpointPath: string;\n  renderEmptyMessage?: () => React.ReactNode;\n  queryParams?: {[key: string]: number | string | string[] | undefined | null};\n} & Partial<typeof defaultProps>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  groups: Group[];\n};\n\nconst GroupList = createReactClass<Props, State>({\n  displayName: 'GroupList',\n\n  propTypes: {\n    api: PropTypes.object.isRequired,\n    query: PropTypes.string.isRequired,\n    canSelectGroups: PropTypes.bool,\n    withChart: PropTypes.bool,\n    orgId: PropTypes.string.isRequired,\n    endpointPath: PropTypes.string,\n    renderEmptyMessage: PropTypes.func,\n    queryParams: PropTypes.object,\n    withPagination: PropTypes.bool,\n  },\n\n  contextTypes: {\n    location: PropTypes.object,\n  },\n\n  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange') as any],\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      groups: [],\n    };\n  },\n\n  componentWillMount() {\n    this._streamManager = new StreamManager(GroupStore);\n\n    this.fetchData();\n  },\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      !isEqual(this.state, nextState) ||\n      nextProps.endpointPath !== this.props.endpointPath ||\n      nextProps.query !== this.props.query ||\n      !isEqual(nextProps.queryParams, this.props.queryParams)\n    );\n  },\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.orgId !== this.props.orgId ||\n      prevProps.endpointPath !== this.props.endpointPath ||\n      prevProps.query !== this.props.query ||\n      !isEqual(prevProps.queryParams, this.props.queryParams)\n    ) {\n      this.fetchData();\n    }\n  },\n\n  componentWillUnmount() {\n    GroupStore.loadInitialData([]);\n  },\n\n  fetchData() {\n    GroupStore.loadInitialData([]);\n    const {api, orgId} = this.props;\n\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchOrgMembers(api, orgId).then(members => {\n      this.setState({memberList: indexMembersByProject(members)});\n    });\n\n    api.request(this.getGroupListEndpoint(), {\n      success: (data, _, jqXHR) => {\n        this._streamManager.push(data);\n\n        this.setState({\n          error: false,\n          loading: false,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  },\n\n  getGroupListEndpoint() {\n    const {orgId, endpointPath, queryParams} = this.props;\n    const path = endpointPath ?? `/organizations/${orgId}/issues/`;\n    const queryParameters = queryParams ?? this.getQueryParams();\n\n    return `${path}?${qs.stringify(queryParameters)}`;\n  },\n\n  getQueryParams() {\n    const {query} = this.props;\n\n    const queryParams = this.context.location.query;\n    queryParams.limit = 50;\n    queryParams.sort = 'new';\n    queryParams.query = query;\n\n    return queryParams;\n  },\n\n  onCursorChange(cursor, path, query, pageDiff) {\n    const queryPageInt = parseInt(query.page, 10);\n    let nextPage = isNaN(queryPageInt) ? pageDiff : queryPageInt + pageDiff;\n\n    // unset cursor and page when we navigate back to the first page\n    // also reset cursor if somehow the previous button is enabled on\n    // first page and user attempts to go backwards\n    if (nextPage <= 0) {\n      cursor = undefined;\n      nextPage = undefined;\n    }\n\n    browserHistory.push({\n      pathname: path,\n      query: {...query, cursor},\n    });\n  },\n\n  onGroupChange() {\n    const groups = this._streamManager.getAllItems();\n\n    if (!isEqual(groups, this.state.groups)) {\n      this.setState({\n        groups,\n      });\n    }\n  },\n\n  render() {\n    const {\n      orgId,\n      canSelectGroups,\n      withChart,\n      renderEmptyMessage,\n      withPagination,\n    } = this.props;\n    const {loading, error, groups, memberList, pageLinks} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    } else if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    } else if (groups.length === 0) {\n      if (typeof renderEmptyMessage === 'function') {\n        return renderEmptyMessage();\n      }\n      return (\n        <Panel>\n          <PanelBody>\n            <EmptyStateWarning>\n              <p>{t(\"There don't seem to be any events fitting the query.\")}</p>\n            </EmptyStateWarning>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <Panel>\n          <GroupListHeader withChart={withChart} />\n          <PanelBody>\n            {groups.map(({id, project}) => {\n              const members =\n                memberList && memberList.hasOwnProperty(project.slug)\n                  ? memberList[project.slug]\n                  : null;\n\n              return (\n                <StreamGroup\n                  key={id}\n                  id={id}\n                  orgId={orgId}\n                  canSelect={canSelectGroups}\n                  withChart={withChart}\n                  memberList={members}\n                />\n              );\n            })}\n          </PanelBody>\n        </Panel>\n        {withPagination && (\n          <Pagination pageLinks={pageLinks} onCursor={this.onCursorChange} />\n        )}\n      </React.Fragment>\n    );\n  },\n});\n\nGroupList.defaultProps = defaultProps;\n\nexport {GroupList};\n\nexport default withApi(GroupList);\n","import React from 'react';\nimport {Link} from 'react-router';\n\nimport SentryTypes from 'app/sentryTypes';\nimport Alert from 'app/components/alert';\nimport GroupList from 'app/components/issues//groupList';\nimport {t} from 'app/locale';\nimport {IconOpen} from 'app/icons';\n\nconst ReleaseNewEvents = props => {\n  const {release} = props;\n  const {orgId} = props.params;\n\n  return (\n    <div>\n      <Alert icon={<IconOpen size=\"14px\" />} type=\"warning\">\n        <Link\n          to={{\n            pathname: `/organizations/${orgId}/issues/`,\n            query: {query: `firstRelease:${release.version}`},\n          }}\n        >\n          {t('View new issues seen in this release in the stream')}\n        </Link>\n      </Alert>\n      <GroupList\n        orgId={orgId}\n        query={'first-release:\"' + release.version + '\"'}\n        canSelectGroups={false}\n      />\n    </div>\n  );\n};\nReleaseNewEvents.propTypes = {\n  release: SentryTypes.Release,\n};\n\nexport default ReleaseNewEvents;\n"],"sourceRoot":""}