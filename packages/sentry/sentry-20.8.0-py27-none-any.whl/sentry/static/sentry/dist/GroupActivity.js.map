{"version":3,"sources":["webpack:///./app/components/dateTime.tsx","webpack:///./app/components/commitLink.tsx","webpack:///./app/components/pullRequestLink.tsx","webpack:///./app/views/organizationGroupDetails/groupActivityItem.jsx","webpack:///./app/views/organizationGroupDetails/groupActivity.jsx"],"names":["DateTime","getFormat","clock24Hours","props","dateOnly","timeOnly","seconds","shortDate","timeAndDate","this","date","utc","carriedProps","user","ConfigStore","get","options","format","moment","tz","timezone","React","Component","defaultProps","SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","CommitLink","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","className","href","external","PullRequestLink","pullRequest","displayId","name","title","externalUrl","repo","split","pop","renderIcon","GroupActivityItem","author","item","orgSlug","projectId","data","issuesLink","type","version","tooltipRawVersion","commit","ignoreDuration","duration","ignoreCount","ignoreWindow","tct","count","ignoreUserCount","ignoreUserWindow","location","tn","fingerprints","length","destination","source","assignee","assigneeType","team","TeamStore","getById","slug","MemberListStore","email","issues","makeDefaultErrorJson","detail","GroupActivity","state","createBusy","error","inputId","uniqueId","handleNoteDelete","a","modelId","oldText","text","api","group","addLoadingMessage","deleteNote","clearIndicators","addErrorMessage","handleNoteCreate","note","setState","createNote","errorJSON","responseJSON","handleNoteUpdate","updateBusy","updateNote","me","projectSlugs","project","noteProps","placeholder","key","storageKey","itemKey","onCreate","busy","activity","map","authorName","mini","dateCreated","onDelete","onUpdate","header","params","orgId","withApi","withOrganization"],"mappings":"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","file":"GroupActivity.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport moment from 'moment-timezone';\n\nimport ConfigStore from 'app/stores/configStore';\n\ntype DefaultProps = {\n  seconds: boolean;\n};\n\ntype Props = DefaultProps & {\n  date: moment.MomentInput;\n  dateOnly?: boolean;\n  timeOnly?: boolean;\n  shortDate?: boolean;\n  timeAndDate?: boolean;\n  utc?: boolean;\n};\n\nclass DateTime extends React.Component<Props> {\n  static propTypes = {\n    date: PropTypes.any.isRequired,\n    dateOnly: PropTypes.bool,\n    timeOnly: PropTypes.bool,\n    shortDate: PropTypes.bool,\n    seconds: PropTypes.bool,\n    timeAndDate: PropTypes.bool,\n    utc: PropTypes.bool,\n  };\n\n  static defaultProps: DefaultProps = {\n    seconds: true,\n  };\n\n  getFormat = ({clock24Hours}: {clock24Hours: boolean}): string => {\n    const {dateOnly, timeOnly, seconds, shortDate, timeAndDate} = this.props;\n\n    // October 26, 2017\n    if (dateOnly) {\n      return 'LL';\n    }\n\n    // Oct 26, 2017 11:30:30 AM\n    if (timeAndDate) {\n      return 'MMM DD, LT';\n    }\n\n    // 4:57 PM\n    if (timeOnly) {\n      return 'LT';\n    }\n\n    if (shortDate) {\n      return 'MM/DD/YYYY';\n    }\n\n    if (clock24Hours) {\n      return 'MMMM D YYYY HH:mm:ss z';\n    }\n\n    // Oct 26, 2017 11:30:30 AM\n    if (seconds) {\n      return 'll LTS z';\n    }\n\n    // Default is Oct 26, 2017 11:30 AM\n    return 'lll';\n  };\n\n  render() {\n    const {\n      date,\n      utc,\n      seconds: _seconds,\n      shortDate: _shortDate,\n      dateOnly: _dateOnly,\n      timeOnly: _timeOnly,\n      timeAndDate: _timeAndDate,\n      ...carriedProps\n    } = this.props;\n    const user = ConfigStore.get('user');\n    const options = user?.options;\n    const format = this.getFormat(options);\n\n    return (\n      <time {...carriedProps}>\n        {utc\n          ? moment.utc(date).format(format)\n          : moment.tz(date, options?.timezone ?? '').format(format)}\n      </time>\n    );\n  }\n}\n\nexport default DateTime;\n","import React from 'react';\n\nimport {Repository} from 'app/types';\nimport {t} from 'app/locale';\nimport {getShortCommitHash} from 'app/utils';\nimport Button from 'app/components/button';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport ExternalLink from 'app/components/links/externalLink';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import React from 'react';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab} from 'app/icons';\nimport {Repository, PullRequest} from 'app/types';\n\nfunction renderIcon(repo: Repository) {\n  if (!repo.provider) {\n    return null;\n  }\n\n  const {id} = repo.provider;\n  const providerId = id.includes(':') ? id.split(':').pop() : id;\n\n  switch (providerId) {\n    case 'github':\n      return <IconGithub size=\"xs\" />;\n    case 'gitlab':\n      return <IconGitlab size=\"xs\" />;\n    case 'bitbucket':\n      return <IconBitbucket size=\"xs\" />;\n    default:\n      return null;\n  }\n}\n\ntype Props = {\n  pullRequest: PullRequest;\n  repository: Repository;\n  inline?: boolean;\n};\n\nconst PullRequestLink = ({pullRequest, repository, inline}: Props) => {\n  const displayId = `${repository.name} #${pullRequest.id}: ${pullRequest.title}`;\n\n  return pullRequest.externalUrl ? (\n    <ExternalLink\n      className={inline ? 'inline-commit' : 'btn btn-default btn-sm'}\n      href={pullRequest.externalUrl}\n    >\n      {renderIcon(repository)}\n      {inline ? '' : ' '}\n      {displayId}\n    </ExternalLink>\n  ) : (\n    <span>{displayId}</span>\n  );\n};\n\nexport default PullRequestLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t, tct, tn} from 'app/locale';\nimport CommitLink from 'app/components/commitLink';\nimport Duration from 'app/components/duration';\nimport MemberListStore from 'app/stores/memberListStore';\nimport PullRequestLink from 'app/components/pullRequestLink';\nimport TeamStore from 'app/stores/teamStore';\nimport Version from 'app/components/version';\n\nclass GroupActivityItem extends React.Component {\n  static propTypes = {\n    author: PropTypes.node,\n    item: PropTypes.object,\n    orgSlug: PropTypes.string,\n    projectId: PropTypes.string,\n  };\n\n  render() {\n    const {author, item, orgSlug, projectId} = this.props;\n    const {data} = item;\n\n    const issuesLink = `/organizations/${orgSlug}/issues/`;\n\n    switch (item.type) {\n      case 'note':\n        return t('%s left a comment', author);\n      case 'set_resolved':\n        return t('%s marked this issue as resolved', author);\n      case 'set_resolved_by_age':\n        return t('%(author)s marked this issue as resolved due to inactivity', {\n          author,\n        });\n      case 'set_resolved_in_release':\n        return data.version\n          ? t('%(author)s marked this issue as resolved in %(version)s', {\n              author,\n              version: (\n                <Version version={data.version} projectId={projectId} tooltipRawVersion />\n              ),\n            })\n          : t('%s marked this issue as resolved in the upcoming release', author);\n      case 'set_resolved_in_commit':\n        return t('%(author)s marked this issue as resolved in %(version)s', {\n          author,\n          version: (\n            <CommitLink\n              inline\n              commitId={data.commit && data.commit.id}\n              repository={data.commit && data.commit.repository}\n            />\n          ),\n        });\n      case 'set_resolved_in_pull_request':\n        return t('%(author)s marked this issue as resolved in %(version)s', {\n          author,\n          version: (\n            <PullRequestLink\n              inline\n              pullRequest={data.pullRequest}\n              repository={data.pullRequest && data.pullRequest.repository}\n            />\n          ),\n        });\n      case 'set_unresolved':\n        return t('%s marked this issue as unresolved', author);\n      case 'set_ignored':\n        if (data.ignoreDuration) {\n          return t('%(author)s ignored this issue for %(duration)s', {\n            author,\n            duration: <Duration seconds={data.ignoreDuration * 60} />,\n          });\n        } else if (data.ignoreCount && data.ignoreWindow) {\n          return tct(\n            '[author] ignored this issue until it happens [count] time(s) in [duration]',\n            {\n              author,\n              count: data.ignoreCount,\n              duration: <Duration seconds={data.ignoreWindow * 60} />,\n            }\n          );\n        } else if (data.ignoreCount) {\n          return tct('[author] ignored this issue until it happens [count] time(s)', {\n            author,\n            count: data.ignoreCount,\n          });\n        } else if (data.ignoreUserCount && data.ignoreUserWindow) {\n          return tct(\n            '[author] ignored this issue until it affects [count] user(s) in [duration]',\n            {\n              author,\n              count: data.ignoreUserCount,\n              duration: <Duration seconds={data.ignoreUserWindow * 60} />,\n            }\n          );\n        } else if (data.ignoreUserCount) {\n          return tct('[author] ignored this issue until it affects [count] user(s)', {\n            author,\n            count: data.ignoreUserCount,\n          });\n        }\n        return t('%s ignored this issue', author);\n      case 'set_public':\n        return t('%s made this issue public', author);\n      case 'set_private':\n        return t('%s made this issue private', author);\n      case 'set_regression':\n        return data.version\n          ? t('%(author)s marked this issue as a regression in %(version)s', {\n              author,\n              version: (\n                <Version version={data.version} projectId={projectId} tooltipRawVersion />\n              ),\n            })\n          : t('%s marked this issue as a regression', author);\n      case 'create_issue':\n        return t('%(author)s created an issue on %(provider)s titled %(title)s', {\n          author,\n          provider: data.provider,\n          title: <a href={data.location}>{data.title}</a>,\n        });\n      case 'unmerge_source':\n        return tn(\n          '%2$s migrated %1$s fingerprint to %3$s',\n          '%2$s migrated %1$s fingerprints to %3$s',\n          data.fingerprints.length,\n          author,\n          data.destination ? (\n            <a href={`${issuesLink}${data.destination.id}`}>{data.destination.shortId}</a>\n          ) : (\n            t('a group')\n          )\n        );\n      case 'unmerge_destination':\n        return tn(\n          '%2$s migrated %1$s fingerprint from %3$s',\n          '%2$s migrated %1$s fingerprints from %3$s',\n          data.fingerprints.length,\n          author,\n          data.source ? (\n            <a href={`${issuesLink}${data.source.id}`}>{data.source.shortId}</a>\n          ) : (\n            t('a group')\n          )\n        );\n      case 'first_seen':\n        return t('%s first saw this issue', author);\n      case 'assigned':\n        let assignee;\n\n        if (data.assigneeType === 'team') {\n          const team = TeamStore.getById(data.assignee);\n          assignee = team ? team.slug : '<unknown-team>';\n\n          return t('%(author)s assigned this issue to #%(assignee)s', {\n            author,\n            assignee,\n          });\n        }\n\n        if (item.user && data.assignee === item.user.id) {\n          return t('%s assigned this issue to themselves', author);\n        } else {\n          assignee = MemberListStore.getById(data.assignee);\n          if (assignee && assignee.email) {\n            return t('%(author)s assigned this issue to %(assignee)s', {\n              author,\n              assignee: assignee.email,\n            });\n          } else {\n            return t('%s assigned this issue to an unknown user', author);\n          }\n        }\n      case 'unassigned':\n        return t('%s unassigned this issue', author);\n      case 'merge':\n        return tn(\n          '%2$s merged %1$s issue into this issue',\n          '%2$s merged %1$s issues into this issue',\n          data.issues.length,\n          author\n        );\n      default:\n        return ''; // should never hit (?)\n    }\n  }\n}\n\nexport default GroupActivityItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {createNote, deleteNote, updateNote} from 'app/actionCreators/group';\nimport {t} from 'app/locale';\nimport {uniqueId} from 'app/utils/guid';\nimport ActivityAuthor from 'app/components/activity/author';\nimport ActivityItem from 'app/components/activity/item';\nimport ConfigStore from 'app/stores/configStore';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport Note from 'app/components/activity/note';\nimport NoteInputWithStorage from 'app/components/activity/note/inputWithStorage';\nimport SentryTypes from 'app/sentryTypes';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport GroupActivityItem from './groupActivityItem';\n\nfunction makeDefaultErrorJson() {\n  return {detail: t('Unknown error. Please try again.')};\n}\n\nclass GroupActivity extends React.Component {\n  // TODO(dcramer): only re-render on group/activity change\n  static propTypes = {\n    api: PropTypes.object,\n    organization: SentryTypes.Organization.isRequired,\n    group: SentryTypes.Group,\n  };\n\n  state = {\n    createBusy: false,\n    error: false,\n    inputId: uniqueId(),\n  };\n\n  handleNoteDelete = async ({modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    addLoadingMessage(t('Removing comment...'));\n\n    try {\n      await deleteNote(api, group, modelId, oldText);\n      clearIndicators();\n    } catch (_err) {\n      addErrorMessage(t('Failed to delete comment'));\n    }\n  };\n\n  /**\n   * Note: This is nearly the same logic as `app/views/alerts/details/activity`\n   * This can be abstracted a bit if we create more objects that can have activities\n   */\n  handleNoteCreate = async note => {\n    const {api, group} = this.props;\n\n    this.setState({\n      createBusy: true,\n    });\n\n    addLoadingMessage(t('Posting comment...'));\n\n    try {\n      await createNote(api, group, note);\n\n      this.setState({\n        createBusy: false,\n\n        // This is used as a `key` to Note Input so that after successful post\n        // we reset the value of the input\n        inputId: uniqueId(),\n      });\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        createBusy: false,\n        error: true,\n        errorJSON: error.responseJSON || makeDefaultErrorJson(),\n      });\n      addErrorMessage(t('Unable to post comment'));\n    }\n  };\n\n  handleNoteUpdate = async (note, {modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    this.setState({\n      updateBusy: true,\n    });\n    addLoadingMessage(t('Updating comment...'));\n\n    try {\n      await updateNote(api, group, note, modelId, oldText);\n      this.setState({\n        updateBusy: false,\n      });\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        updateBusy: false,\n        error: true,\n        errorJSON: error.responseJSON || makeDefaultErrorJson(),\n      });\n      addErrorMessage(t('Unable to update comment'));\n    }\n  };\n\n  render() {\n    const {group} = this.props;\n    const me = ConfigStore.get('user');\n    const projectSlugs = group && group.project ? [group.project.slug] : [];\n    const noteProps = {\n      group,\n      projectSlugs,\n      placeholder: t(\n        'Add details or updates to this event. \\nTag users with @, or teams with #'\n      ),\n    };\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <div>\n            <ActivityItem author={{type: 'user', user: me}}>\n              {() => (\n                <NoteInputWithStorage\n                  key={this.state.inputId}\n                  storageKey=\"groupinput:latest\"\n                  itemKey={group.id}\n                  onCreate={this.handleNoteCreate}\n                  busy={this.state.createBusy}\n                  error={this.state.error}\n                  errorJSON={this.state.errorJSON}\n                  {...noteProps}\n                />\n              )}\n            </ActivityItem>\n\n            {group.activity.map(item => {\n              const authorName = item.user ? item.user.name : 'Sentry';\n\n              if (item.type === 'note') {\n                return (\n                  <ErrorBoundary mini key={`note-${item.id}`}>\n                    <Note\n                      text={item.data.text}\n                      modelId={item.id}\n                      user={item.user}\n                      dateCreated={item.dateCreated}\n                      authorName={authorName}\n                      onDelete={this.handleNoteDelete}\n                      onUpdate={this.handleNoteUpdate}\n                      busy={this.state.updateBusy}\n                      {...noteProps}\n                    />\n                  </ErrorBoundary>\n                );\n              } else {\n                return (\n                  <ErrorBoundary mini key={`item-${item.id}`}>\n                    <ActivityItem\n                      item={item}\n                      author={{type: item.user ? 'user' : 'system', user: item.user}}\n                      date={item.dateCreated}\n                      header={\n                        <GroupActivityItem\n                          author={<ActivityAuthor>{authorName}</ActivityAuthor>}\n                          item={item}\n                          orgSlug={this.props.params.orgId}\n                          projectId={group.project.id}\n                        />\n                      }\n                    />\n                  </ErrorBoundary>\n                );\n              }\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {GroupActivity};\nexport default withApi(withOrganization(GroupActivity));\n"],"sourceRoot":""}