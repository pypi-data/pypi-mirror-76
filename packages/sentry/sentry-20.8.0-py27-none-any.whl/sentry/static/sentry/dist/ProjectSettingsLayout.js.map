{"version":3,"sources":["webpack:///./app/components/badge.tsx","webpack:///./app/actionCreators/teams.jsx","webpack:///./app/components/well.tsx","webpack:///./app/views/settings/components/settingsNavItem.tsx","webpack:///./app/views/settings/components/settingsNavigationGroup.tsx","webpack:///./app/views/settings/components/settingsNavigation.tsx","webpack:///./app/components/projects/missingProjectMembership.jsx","webpack:///./app/views/projects/projectContext.jsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"names":["priorityColors","new","theme","red400","strong","blue400","highlight","green400","Badge","priority","text","props","space","p","gray400","propTypes","PropTypes","oneOfType","string","number","oneOf","doCallback","params","name","args","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","orgId","success","data","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","createTeamSuccess","addSuccessMessage","tct","slug","organization","err","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","Well","borderLight","gray100","hasImage","centered","bool","SettingsNavItem","badge","label","index","LabelHook","HookOrDefault","hookName","defaultComponent","children","Fragment","renderedBadge","type","StyledNavItem","onlyActiveOnIndex","activeClassName","Link","gray500","gray800","purple400","SettingsNavigationGroup","project","items","NavSection","data-test-id","SettingsHeading","map","path","title","show","recordAnalytics","badgeResult","to","replaceRouterParams","projectId","key","onClick","window","location","pathname","trackAnalyticsEvent","organization_id","project_id","eventName","eventKey","sidebar_item_id","dest","gray600","SettingsNavigation","errorInfo","Sentry","scope","Object","keys","forEach","setExtra","href","this","navigationObjects","hooks","hookConfigs","otherProps","navWithHooks","concat","PositionStickyWrapper","config","Hook","i","React","cloneElement","Component","defaultProps","breakpoints","MissingProjectMembership","projects","find","state","loading","setState","t","features","className","isPending","has","bind","teams","length","renderJoinTeam","Set","StyledWell","StyledIconFlag","size","renderExplanation","renderJoinTeams","IconFlag","withApi","ERROR_TYPES","ProjectContext","createReactClass","displayName","childContextTypes","SentryTypes","Project","mixins","Reflux","connect","MemberListStore","listenTo","ProjectsStore","getInitialState","errorType","memberList","getChildContext","componentWillMount","fetchData","componentWillReceiveProps","nextProps","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","docTitle","docTitleRef","forceUpdate","getTitle","onProjectChange","projectIds","getById","identifyProject","projectSlug","activeProject","hasAccess","setActiveProject","projectRequest","fetchOrgMembers","isMember","renderBody","style","margin","onRetry","render","ref","withOrganization","withProjects","withRouter","ProjectSettingsNavigation","getConfiguration","access","withProject","ProjectSettingsLayout","renderNavigation","isValidElement"],"mappings":"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","file":"ProjectSettingsLayout.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport theme from 'app/utils/theme';\n\nconst priorityColors = {\n  new: theme.red400,\n  strong: theme.blue400,\n  highlight: theme.green400,\n} as const;\n\ntype Props = React.HTMLProps<HTMLSpanElement> & {\n  text?: string | number | null;\n  priority?: keyof typeof priorityColors;\n  className?: string;\n};\n\nconst Badge = styled(({priority: _priority, text, ...props}: Props) => (\n  <span {...props}>{text}</span>\n))<Props>`\n  display: inline-block;\n  height: 20px;\n  min-width: 20px;\n  line-height: 20px;\n  border-radius: 20px;\n  padding: 0 5px;\n  margin-left: ${space(0.5)};\n  font-size: 75%;\n  font-weight: 600;\n  text-align: center;\n  color: #fff;\n  background: ${p => (p.priority ? priorityColors[p.priority] : theme.gray400)};\n  transition: background 100ms linear;\n\n  position: relative;\n  top: -1px;\n`;\n\nBadge.propTypes = {\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  priority: PropTypes.oneOf(['strong', 'new', 'highlight']),\n} as any;\n\nexport default Badge;\n","import TeamActions from 'app/actions/teamActions';\nimport {tct} from 'app/locale';\nimport {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {uniqueId} from 'app/utils/guid';\n\nconst doCallback = (params = {}, name, ...args) => {\n  if (typeof params[name] === 'function') {\n    params[name](...args);\n  }\n};\n\n// Fetch teams for org\nexport function fetchTeams(api, params, options) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(api, params, options) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId, data) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(api, params, options) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    data: params.data,\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api, team, params) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug || team.name, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug || team.name}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api, params) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\ntype Props = {\n  hasImage?: boolean;\n  centered?: boolean;\n  children: React.ReactNode;\n  theme?: any;\n};\n\ntype WellProps = Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props;\n\nconst Well = styled('div')<WellProps>`\n  border: 1px solid ${p => p.theme.borderLight};\n  box-shadow: none;\n  background: ${p => p.theme.gray100};\n  padding: ${p => (p.hasImage ? '80px 30px' : '15px 20px')};\n  margin-bottom: 20px;\n  border-radius: 3px;\n  ${p => p.centered && 'text-align: center'};\n`;\n\nWell.propTypes = {\n  hasImage: PropTypes.bool,\n  centered: PropTypes.bool,\n};\n\nexport default Well;\n","import {Link} from 'react-router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport Badge from 'app/components/badge';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport FeatureBadge from 'app/components/featureBadge';\n\ntype Props = {\n  to: React.ComponentProps<Link>['to'];\n  label: React.ReactNode;\n  badge?: string | number | null;\n  index?: boolean;\n  id?: string;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\nconst SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {\n  const LabelHook = HookOrDefault({\n    hookName: 'sidebar:item-label',\n    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,\n  });\n\n  const renderedBadge =\n    badge === 'new' ? <FeatureBadge type=\"new\" /> : <Badge text={badge} />;\n\n  return (\n    <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n      <LabelHook id={id}>{label}</LabelHook>\n\n      {badge ? renderedBadge : null}\n    </StyledNavItem>\n  );\n};\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray500};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.gray800};\n\n    &:before {\n      background: ${p => p.theme.purple400};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.gray800};\n    outline: none;\n  }\n\n  &.focus-visible {\n    outline: none;\n    background: #f2eff5;\n    padding: 0 15px;\n    margin: 0 -15px;\n    border-radius: 3px;\n\n    &:before {\n      left: -15px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nexport default SettingsNavItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {NavigationGroupProps} from 'app/views/settings/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\nconst SettingsNavigationGroup = (props: NavigationGroupProps) => {\n  const {organization, project, name, items} = props;\n\n  return (\n    <NavSection data-test-id={name}>\n      <SettingsHeading>{name}</SettingsHeading>\n      {items.map(({path, title, index, show, badge, id, recordAnalytics}) => {\n        if (typeof show === 'function' && !show(props)) {\n          return null;\n        }\n        if (typeof show !== 'undefined' && !show) {\n          return null;\n        }\n        const badgeResult = typeof badge === 'function' ? badge(props) : null;\n        const to = replaceRouterParams(path, {\n          ...(organization ? {orgId: organization.slug} : {}),\n          ...(project ? {projectId: project.slug} : {}),\n        });\n\n        const handleClick = () => {\n          //only call the analytics event if the URL is changing\n          if (recordAnalytics && to !== window.location.pathname) {\n            trackAnalyticsEvent({\n              organization_id: organization && organization.id,\n              project_id: project && project.id,\n              eventName: 'Sidebar Item Clicked',\n              eventKey: 'sidebar.item_clicked',\n              sidebar_item_id: id,\n              dest: path,\n            });\n          }\n        };\n\n        return (\n          <SettingsNavItem\n            key={title}\n            to={to}\n            label={title}\n            index={index}\n            badge={badgeResult}\n            id={id}\n            onClick={handleClick}\n          />\n        );\n      })}\n    </NavSection>\n  );\n};\n\nconst NavSection = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled('div')`\n  color: ${p => p.theme.gray600};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default SettingsNavigationGroup;\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport {NavigationSection, NavigationProps} from 'app/views/settings/types';\n\ntype DefaultProps = {\n  /**\n   * Additional navigation configuration driven by hooks\n   */\n  hookConfigs: NavigationSection[];\n  /**\n   * Additional navigation elements driven from hooks\n   */\n  hooks: React.ReactElement[];\n};\n\ntype Props = DefaultProps &\n  NavigationProps & {\n    /**\n     * The configuration for this navigation panel\n     */\n    navigationObjects: NavigationSection[];\n  };\n\nclass SettingsNavigation extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    hooks: [],\n    hookConfigs: [],\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      scope.setExtra('url', window.location.href);\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <PositionStickyWrapper>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}\n      </PositionStickyWrapper>\n    );\n  }\n}\n\nconst PositionStickyWrapper = styled('div')`\n  padding: ${space(4)};\n  padding-right: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    position: sticky;\n    top: 70px;\n    overflow: scroll;\n    height: calc(100vh - 70px);\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n`;\n\nexport default SettingsNavigation;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {joinTeam} from 'app/actionCreators/teams';\nimport {t} from 'app/locale';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport {IconFlag} from 'app/icons';\nimport Well from 'app/components/well';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\n\nclass MissingProjectMembership extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    organization: PropTypes.object.isRequired,\n    projectId: PropTypes.string.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {organization, projectId} = this.props;\n    const project = organization.projects.find(p => p.slug === projectId);\n\n    this.state = {\n      loading: false,\n      error: false,\n      project,\n    };\n  }\n\n  joinTeam(team) {\n    this.setState({\n      loading: true,\n    });\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(t('There was an error while trying to leave the team.'));\n        },\n      }\n    );\n  }\n\n  renderJoinTeam(team, features) {\n    if (!team) {\n      return null;\n    }\n    if (this.state.loading) {\n      return <a className=\"btn btn-default btn-loading btn-disabled\">...</a>;\n    } else if (team.isPending) {\n      return <a className=\"btn btn-default btn-disabled\">{t('Request Pending')}</a>;\n    } else if (features.has('open-membership')) {\n      return (\n        <a className=\"btn btn-default\" onClick={this.joinTeam.bind(this, team)}>\n          {t('Join Team')}\n        </a>\n      );\n    }\n    return (\n      <a className=\"btn btn-default\" onClick={this.joinTeam.bind(this, team)}>\n        {t('Request Access')}\n      </a>\n    );\n  }\n\n  renderExplanation(features) {\n    if (features.has('open-membership')) {\n      return t('To view this data you must one of the following teams.');\n    } else {\n      return t(\n        'To view this data you must first request access to one of the following teams:'\n      );\n    }\n  }\n\n  renderJoinTeams(features) {\n    const {teams} = this.state.project;\n    if (!teams.length) {\n      return (\n        <EmptyMessage>\n          {t(\n            'No teams have access to this project yet. Ask an admin to add your team to this project.'\n          )}\n        </EmptyMessage>\n      );\n    }\n\n    return teams.map(team => (\n      <p key={team.slug}>\n        #{team.slug}: {this.renderJoinTeam(team, features)}\n      </p>\n    ));\n  }\n\n  render() {\n    const {organization} = this.props;\n    const features = new Set(organization.features);\n\n    return (\n      <div className=\"container\">\n        <StyledWell centered>\n          <StyledIconFlag size=\"xxl\" />\n          <p>{t(\"You're not a member of this project.\")}</p>\n          <p>{this.renderExplanation(features)}</p>\n          {this.renderJoinTeams(features)}\n        </StyledWell>\n      </div>\n    );\n  }\n}\n\nconst StyledWell = styled(Well)`\n  margin-top: ${space(2)};\n`;\n\nconst StyledIconFlag = styled(IconFlag)`\n  margin-bottom: ${space(2)};\n`;\n\nexport {MissingProjectMembership};\n\nexport default withApi(MissingProjectMembership);\n","import {withRouter} from 'react-router';\nimport DocumentTitle from 'react-document-title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {setActiveProject} from 'app/actionCreators/projects';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MemberListStore from 'app/stores/memberListStore';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport SentryTypes from 'app/sentryTypes';\nimport withProjects from 'app/utils/withProjects';\nimport withOrganization from 'app/utils/withOrganization';\n\nconst ERROR_TYPES = {\n  MISSING_MEMBERSHIP: 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND',\n  UNKNOWN: 'UNKNOWN',\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nconst ProjectContext = createReactClass({\n  displayName: 'ProjectContext',\n\n  propTypes: {\n    api: PropTypes.object,\n\n    /**\n     * If true, this will not change `state.loading` during `fetchData` phase\n     */\n    skipReload: PropTypes.bool,\n    organization: SentryTypes.Organization,\n    projects: PropTypes.arrayOf(SentryTypes.Project),\n    projectId: PropTypes.string,\n    orgId: PropTypes.string,\n  },\n\n  childContextTypes: {\n    project: SentryTypes.Project,\n  },\n\n  mixins: [\n    Reflux.connect(MemberListStore, 'memberList'),\n    Reflux.listenTo(ProjectsStore, 'onProjectChange'),\n  ],\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  },\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (\n      prevState.project !== this.state.project ||\n      prevState.organization !== this.state.organization\n    ) {\n      if (!this.docTitle) {\n        return;\n      }\n      const docTitle = this.docTitleRef.docTitle;\n      if (docTitle) {\n        docTitle.forceUpdate();\n      }\n    }\n  },\n\n  remountComponent() {\n    this.setState(this.getInitialState());\n  },\n\n  getTitle() {\n    if (this.state.project) {\n      return this.state.project.slug;\n    }\n    return 'Sentry';\n  },\n\n  onProjectChange(projectIds) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)},\n    });\n  },\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  },\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState(state => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ERROR_TYPES.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, activeProject.id);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ERROR_TYPES.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ERROR_TYPES.PROJECT_NOT_FOUND,\n      });\n    }\n  },\n\n  renderBody() {\n    if (this.state.loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    } else if (this.state.error) {\n      switch (this.state.errorType) {\n        case ERROR_TYPES.PROJECT_NOT_FOUND:\n          // TODO(chrissy): use scale for margin values\n          return (\n            <div className=\"container\">\n              <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n                {t('The project you were looking for was not found.')}\n              </div>\n            </div>\n          );\n        case ERROR_TYPES.MISSING_MEMBERSHIP:\n          // TODO(dcramer): add various controls to improve this flow and break it\n          // out into a reusable missing access error component\n          return (\n            <MissingProjectMembership\n              organization={this.props.organization}\n              projectId={this.state.project.slug}\n            />\n          );\n        default:\n          return <LoadingError onRetry={this.remountComponent} />;\n      }\n    }\n\n    return this.props.children;\n  },\n\n  render() {\n    return (\n      <DocumentTitle ref={ref => (this.docTitleRef = ref)} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  },\n});\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(withRouter(ProjectContext))));\n","import React from 'react';\n\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport getConfiguration from 'app/views/settings/project/navigationConfiguration';\nimport withProject from 'app/utils/withProject';\nimport {Organization, Project} from 'app/types';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => (\n  <SettingsNavigation\n    navigationObjects={getConfiguration({project, organization})}\n    access={new Set(organization.access)}\n    features={new Set(organization.features)}\n    organization={organization}\n    project={project}\n  />\n);\n\nexport default withProject(ProjectSettingsNavigation);\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization} from 'app/types';\nimport ProjectContext from 'app/views/projects/projectContext';\nimport ProjectSettingsNavigation from 'app/views/settings/project/projectSettingsNavigation';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  organization: Organization;\n  children: React.ReactNode;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectSettingsLayout({params, organization, children, ...props}: Props) {\n  const {orgId, projectId} = params;\n\n  return (\n    <ProjectContext orgId={orgId} projectId={projectId}>\n      <SettingsLayout\n        params={params}\n        {...props}\n        renderNavigation={() => <ProjectSettingsNavigation organization={organization} />}\n      >\n        {children && React.isValidElement(children)\n          ? React.cloneElement(children, {\n              organization,\n            })\n          : children}\n      </SettingsLayout>\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"sourceRoot":""}