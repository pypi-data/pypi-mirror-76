{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/integrationOrganizationLink.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","IntegrationOrganizationLink","trackIntegrationEvent","options","startSession","state","organization","provider","integration_type","integration","key","already_installed","view","getOrgBySlug","orgSlug","organizations","find","org","slug","onSelectOrg","a","value","setState","selectedOrgSlug","reloading","undefined","Promise","all","api","requestPromise","integrationSlug","providers","length","Error","trackOpened","addErrorMessage","t","hasAccess","access","includes","customOption","orgProps","Option","avatarSize","displayName","name","avatarProps","consistentWidth","customValueContainer","containerProps","valueList","getValue","ValueContainer","eventKey","eventName","onClick","priority","disabled","props","params","installationId","renderAddButton","query","queryParams","trackInstallationStart","window","location","assign","urlEncode","FeatureList","getIntegrationFeatureGate","Fragment","type","icon","size","tct","InstallLink","href","features","metadata","className","renderAddButtonContainer","map","label","integation","inline","stacked","required","onChange","placeholder","components","renderBottom"],"mappings":"6fAQqBA,E,8RAKjB,MAAO,K,+BAIP,IAAMC,EAAQC,KAAKC,WACnB,OACE,YAAC,IAAD,CAAeF,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,WACjBC,KAAKE,uB,GATJC,KAHWL,E,wtCCyBAM,E,yUASnBC,sBAAwB,SACtBC,EACAC,GACG,MAC8B,EAAKC,MAA/BC,EADJ,EACIA,aAAcC,EADlB,EACkBA,SAEhBD,GAAiBC,GAItBL,YAAsB,EAAD,GAEdC,EAFc,CAGjBK,iBAAkB,cAClBC,YAAaF,EAASG,IAEtBC,mBAAmB,EACnBC,KAAM,qBAERN,EACA,CAACF,eAAgBA,K,EA6BrBS,aAAe,SAACC,GACd,OAAO,EAAKT,MAAMU,cAAcC,MAAK,SAACC,GAAD,OAAuBA,EAAIC,OAASJ,M,EAG3EK,Y,+BAAc,qCAAAC,EAAA,6DAAeN,EAAf,EAAQO,MACpB,EAAKC,SAAS,CAACC,gBAAiBT,EAASU,WAAW,EAAMlB,kBAAcmB,IAD5D,kBAOAC,QAAQC,IAAI,CACpB,EAAKC,IAAIC,eAAT,yBAA0Cf,EAA1C,MACA,EAAKc,IAAIC,eAAT,yBACoBf,EADpB,8CACiE,EAAKgB,oBAV9D,8BAIHxB,EAJG,KAce,KAVHyB,EAJZ,KAIYA,WAURC,OAdJ,uBAeF,IAAIC,MAAM,oBAfR,QAiBV,EAAKX,SACH,CAAChB,eAAckB,WAAW,EAAOjB,SAAUwB,EAAU,IACrD,EAAKG,aAnBG,kDAsBVC,YAAgBC,YAAE,2DAClB,EAAKd,SAAS,CAACE,WAAW,IAvBhB,0D,wDA2Bda,UAAY,WAAM,IACT/B,EAAgB,EAAKD,MAArBC,aACP,OAAOA,aAAP,EAAOA,EAAcgC,OAAOC,SAAS,qB,EAoCvCC,aAAe,SAAAC,GACb,IAAMnC,EAAe,EAAKO,aAAa4B,EAASpB,OAChD,OAAKf,EAIH,YAAC,IAAWoC,OAAWD,EACrB,YAAC,IAAD,CACEnC,aAAcA,EACdqC,WAAY,GACZC,YAAatC,EAAauC,KAC1BC,YAAa,CAACC,iBAAiB,MAR5B,M,EAcXC,qBAAuB,SAAAC,GACrB,IAAMC,EAAYD,EAAeE,WAEjC,GAAyB,IAArBD,EAAUlB,OACZ,OAAO,YAAC,IAAWoB,eAAmBH,GAExC,IAAMnC,EAAUoC,EAAU,GAAG7B,MACvBf,EAAe,EAAKO,aAAaC,GACvC,OAAKR,EAIH,YAAC,IAAW8C,eAAmBH,EAC7B,YAAC,IAAD,CACE3C,aAAcA,EACdqC,WAAY,GACZC,YAAatC,EAAauC,KAC1BC,YAAa,CAACC,iBAAiB,MAR5B,YAAC,IAAWK,eAAmBH,I,qDAvJxC,MAAO,CAAC,CAAC,gBAAiB,sB,iCAI1B,OAAOb,YAAE,sC,oCA4BTvC,KAAKK,sBACH,CACEmD,SAAU,kCACVC,UAAW,qCAEb,K,+CAKFzD,KAAKK,sBAAsB,CACzBmD,SAAU,kCACVC,UAAW,uC,sCAgDCC,GAAyD,MACtC1D,KAAKQ,MAA/BC,EADgE,EAChEA,aAAcC,EADkD,EAClDA,SAErB,OAAKA,EAIH,YAAC,IAAD,CACEiD,SAAS,UACTC,UAAWnD,IAAiBT,KAAKwC,YACjCkB,QAASA,GAERnB,YAAE,aAAc7B,EAASsC,OARrB,O,iDAagB,WAEzB,GAAIhD,KAAK6D,MAAMC,OAAOC,eACpB,MAAM,IAAI3B,MAAM,uBAElB,OAAOpC,KAAKgE,iBAAgB,WAAM,IAG1BC,EAAQ,EAAH,CAAIhD,QADW,EAAKT,MAAxBkB,iBACqC,EAAKwC,aACjD,EAAKC,yBACLC,OAAOC,SAASC,OAAhB,sBACiB,EAAKrC,gBADtB,uBACoDsC,YAAUN,U,qCA6CnD,MACgDjE,KAAKQ,MAA3DC,EADM,EACNA,aAAciB,EADR,EACQA,gBAAiBhB,EADzB,EACyBA,SAAUiB,EADnC,EACmCA,UACzC6C,EAAeC,cAAfD,YACP,OAAI7C,EACK,YAAC,UAAD,MAIP,YAAC,IAAM+C,SAAP,KACGhD,GAAmBjB,IAAiBT,KAAKwC,aACxC,YAAC,IAAD,CAAOmC,KAAK,QAAQC,KAAM,YAAC,IAAD,CAAUC,KAAK,QACvC,qBACGC,YAAI,yMAIH,CAACrE,aAAc,0BAASA,EAAaY,SAGzC,YAAC0D,EAAD,KAAcX,OAAOC,SAASW,OAIjCtE,GAAYD,GAAgBT,KAAKwC,aAAegC,GAC/C,YAAC,IAAME,SAAP,KACE,qBACGI,YACC,8EACA,CAACrE,aAAc,0BAASA,EAAaY,SAGzC,YAACmD,EAAD,CACE/D,aAAcA,EACdwE,SAAUvE,EAASwE,SAASD,SAC5BvE,SAAUA,KAKhB,mBAAKyE,UAAU,gBAAgBnF,KAAKoF,+B,mCAK7B,IACJ1D,EAAmB1B,KAAKQ,MAAxBkB,gBACDpB,EAAUN,KAAKQ,MAAMU,cAAcmE,KAAI,SAACjE,GAAD,MAAwB,CACnEI,MAAOJ,EAAIC,KACXiE,MAAOlE,EAAI4B,SAGb,OACE,YAAC,IAAD,KACE,sBAAKT,YAAE,oCACP,qBACGuC,YAAI,8HAGH,CACErE,aAAc,2BACd8E,WAAY,0BAASvF,KAAKiC,oBAKhC,YAAC,IAAD,CAAOqD,MAAO/C,YAAE,gBAAiBiD,QAAQ,EAAOC,SAAO,EAACC,UAAQ,GAC9D,YAAC,IAAD,CACEC,SAAU3F,KAAKsB,YACfE,MAAOE,EACPkE,YAAarD,YAAE,0BACfjC,QAASA,EACTuF,WAAY,CACVhD,OAAQ7C,KAAK2C,aACbY,eAAgBvD,KAAKmD,yBAI1BnD,KAAK8F,kB,sCAjMV,OAAO9F,KAAK6D,MAAMC,OAAO7B,kB,kCAIzB,OAAOjC,KAAK6D,MAAMQ,SAASJ,U,GAvD0BnE,KA0PnDiF,EAAc,YAAO,MAAP,0CAAH","file":"IntegrationOrganizationLink.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\nimport {components} from 'react-select';\n\nimport {Organization, IntegrationProvider} from 'app/types';\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {t, tct} from 'app/locale';\nimport {\n  trackIntegrationEvent,\n  getIntegrationFeatureGate,\n  SingleIntegrationEvent,\n} from 'app/utils/integrationUtil';\nimport Alert from 'app/components/alert';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport Field from 'app/views/settings/components/forms/field';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport SelectControl from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport {IconFlag} from 'app/icons';\nimport LoadingIndicator from 'app/components/loadingIndicator';\n\n//installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  selectedOrgSlug?: string;\n  organization?: Organization;\n  provider?: IntegrationProvider;\n};\n\nexport default class IntegrationOrganizationLink extends AsyncView<Props, State> {\n  getEndpoints(): [string, string][] {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationEvent = (\n    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'>,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    //should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationEvent(\n      {\n        ...options,\n        integration_type: 'first_party',\n        integration: provider.key,\n        //We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n      },\n      organization,\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationEvent(\n      {\n        eventKey: 'integrations.integration_viewed',\n        eventName: 'Integrations: Integration Viewed',\n      },\n      true\n    );\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationEvent({\n      eventKey: 'integrations.installation_start',\n      eventName: 'Integrations: Installation Start',\n    });\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.api.requestPromise(`/organizations/${orgSlug}/`),\n        this.api.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  renderAddButton(onClick: React.ComponentProps<typeof Button>['onClick']) {\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider) {\n      return null;\n    }\n    return (\n      <Button\n        priority=\"primary\"\n        disabled={!organization || !this.hasAccess()}\n        onClick={onClick}\n      >\n        {t('Install %s', provider.name)}\n      </Button>\n    );\n  }\n\n  renderAddButtonContainer() {\n    // TOOD: Implement for Github\n    if (this.props.params.installationId) {\n      throw new Error('Not implemented yet');\n    }\n    return this.renderAddButton(() => {\n      // add the selected org to the query parameters and then redirect back to configure\n      const {selectedOrgSlug} = this.state;\n      const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n      this.trackInstallationStart();\n      window.location.assign(\n        `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`\n      );\n    });\n  }\n\n  customOption = orgProps => {\n    const organization = this.getOrgBySlug(orgProps.value);\n    if (!organization) {\n      return null;\n    }\n    return (\n      <components.Option {...orgProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.Option>\n    );\n  };\n\n  customValueContainer = containerProps => {\n    const valueList = containerProps.getValue();\n    //if no value set, we want to return the default component that is rendered\n    if (valueList.length === 0) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    const orgSlug = valueList[0].value;\n    const organization = this.getOrgBySlug(orgSlug);\n    if (!organization) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    return (\n      <components.ValueContainer {...containerProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.ValueContainer>\n    );\n  };\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <React.Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <React.Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </React.Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButtonContainer()}</div>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: org.name,\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <Field label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n            components={{\n              Option: this.customOption,\n              ValueContainer: this.customValueContainer,\n            }}\n          />\n        </Field>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n"],"sourceRoot":""}