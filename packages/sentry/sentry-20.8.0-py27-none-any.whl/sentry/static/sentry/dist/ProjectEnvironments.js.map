{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/components/navTabs.tsx","webpack:///./app/components/links/listLink.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/project/projectEnvironments.jsx"],"names":["SettingsPageHeading","this","props","icon","title","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","SentryDocumentTitle","_title","objSlug","children","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","NavTabs","underlined","className","tabProps","mergedClassName","classnames","ListLink","isActive","query","index","context","router","pathname","getClassName","_classNames","activeClassName","classNames","carriedProps","omit","onlyActiveOnIndex","displayName","contextTypes","PropTypes","object","isRequired","PermissionAlert","access","hasAccess","type","size","t","getUrlRoutingName","env","encodeURIComponent","name","getDisplayName","ProjectEnvironments","state","project","environments","isLoading","toggleEnv","shouldHide","orgId","projectId","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","prevProps","endsWith","setState","visibility","message","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","envs","buttonText","Fragment","renderAllEnvironmentsSystemRow","key","onHide","actionText","shouldShowAction","length","renderEnvironmentList","renderEmpty","baseUrl","renderBody","EnvironmentItem","Name","EnvironmentButton","disabled","onClick","PanelItem","Button","withApi"],"mappings":"ifAyBMA,E,4RAcK,MACsDC,KAAKC,MAA3DC,EADA,EACAA,KAAMC,EADN,EACMA,MAAOC,EADb,EACaA,OAAQC,EADrB,EACqBA,KAAMC,EAD3B,EAC2BA,cAAkBL,EAD7C,wDAEP,OACE,kBAASA,EACP,YAACM,EAAD,KACGL,GAAQ,YAACM,EAAD,KAAON,GACfC,GACC,YAACM,EAAD,CAAOJ,KAAMA,EAAMK,OAAQJ,GACzB,YAAC,IAAD,KAAcH,IAGjBC,GAAU,YAACO,EAAD,CAAQN,KAAMA,GAAOD,IAGjCC,GAAQ,uBAAMA,Q,GA5BWO,IAAMC,WAAlCd,E,kCAAAA,EAUGe,aAAe,CACpBR,eAAe,GA4BnB,IAAMC,EAAkB,YAAO,MAAP,8CAAH,2DAKfE,EAAQ,YAAO,MAAP,qCACV,SAAAM,GAAC,OACAA,EAAEL,QAAH,mDAFO,YAMC,SAAAK,GAAC,OACTA,EAAEV,KAAF,UACOW,YAAM,GADb,YACmBA,YAAM,GADzB,YAC+BA,YAAM,GADrC,gBAEOA,YAAM,GAFb,YAEmBA,YAAM,GAFzB,YAE+BA,YAAM,GAFrC,QAPO,YAaLR,EAAO,YAAO,MAAP,mCAAH,gBACQQ,YAAM,GADd,KAIJL,EAAS,YAAO,MAAP,sCACX,SAAAI,GAAC,OAAKA,EAAEV,KAAF,sBAAwBW,YAAM,IAAO,OADnC,KAINC,EAA4B,YAAOlB,EAAP,wDAAH,8BAIdiB,YAAM,GAJQ,KAOhBC,O,kCCjGf,kCAWMC,EAA6D,SACjEjB,GAEA,IAAMkB,EAAS,GAAH,OAAMlB,EAAME,MAAZ,cAAuBF,EAAMmB,QAA7B,aACZ,OAAO,YAAC,IAAD,CAAejB,MAAOgB,GAASlB,EAAMoB,WAJxCH,E,kCAOSA,O,kCChBf,iEA2Be,SAASI,EAAcC,EAAyBC,GAA0B,QAGnFC,EACAC,EAHGC,EAAsCH,EAAtCG,OAAQC,EAA8BJ,EAA9BI,OAAQC,EAAsBL,EAAtBK,SAAUC,EAAYN,EAAZM,SAC3BC,EAAQJ,EAAOK,KAAI,qBAAEC,MAAkB,MAK3B,iBAAPV,GACTG,EAAaC,EAAOO,QAAQX,GAAM,EAClCE,EAAgBU,IAAcJ,EAAMK,MAAM,EAAGV,IAAa,SAAAO,GAAI,MAAgB,MAAZA,EAAK,OAEvER,EAAgBU,IAAcJ,GAAO,SAAAE,GAAI,MAAgB,MAAZA,EAAK,MAGpD,IAAII,EAAYN,EAAMK,MAAMX,EAAeC,QAEnB,IAAbI,IACTO,EAAYA,EAAUD,MAAM,EAAGN,IAGjC,IAAMQ,EAAM,UAAGT,aAAH,EAAGA,EAAUS,cAAb,QAAuB,GAC7BC,EAAI,UAAGV,aAAH,EAAGA,EAAUU,YAAb,QAAqB,GAEzBC,EAAY,GAAH,OAAMH,EAAUI,KAAK,KAArB,OACC,iBAAPlB,EAAkB,GAAKA,GADjB,OAEZe,GAFY,OAEHC,GAEZ,OAAOG,YAAoBF,EAAWZ,K,sGC7CxC,SAASe,EAAQ1C,GAAiB,IACzB2C,EAAsC3C,EAAtC2C,WAAYC,EAA0B5C,EAA1B4C,UAAcC,EADD,IACa7C,EADb,4BAE1B8C,EAAkBC,IAAW,eAAgBH,EAAW,CAC5D,gBAAiBD,IAEnB,OAAO,sBAAIC,UAAWE,GAAqBD,IALpCH,E,sBAYMA,O,wdCATM,E,yUAYJC,SAAW,WAAM,MACsB,EAAKjD,MAAnCiD,EADQ,EACRA,SAAU3B,EADF,EACEA,GAAI4B,EADN,EACMA,MAAOC,EADb,EACaA,MAE5B,OAAQF,GAAY,EAAKG,QAAQC,OAAOJ,UAAU,CAACK,SAAUhC,EAAI4B,SAAQC,I,EAG3EI,aAAe,WACb,IAAMC,EAAc,GADD,EAEkB,EAAKxD,MAAnC4C,EAFY,EAEZA,UAAWa,EAFC,EAEDA,gBAUlB,OARIb,IACFY,EAAYZ,IAAa,GAGvB,EAAKK,aACPO,EAAYC,IAAmB,GAG1BC,IAAWF,I,+CAGX,MACmBzD,KAAKC,MAAxBmD,EADA,EACAA,MAAO/B,EADP,EACOA,SACRuC,EAAeC,IAAK7D,KAAKC,MAAO,kBAAmB,WAAY,SAErE,OACE,kBAAI4C,UAAW7C,KAAKwD,gBAClB,YAAC,OAAD,OAAUI,EAAV,CAAwBE,kBAAmBV,IACxC/B,Q,GAxCYT,IAAMC,WAAvBoC,E,uBAAAA,EACGc,YAAc,WADjBd,EAGGe,aAAe,CACpBV,OAAQW,IAAUC,OAAOC,YAJvBlB,EAOGnC,aAA6B,CAClC4C,gBAAiB,SACjBN,OAAO,GAsCIH,O,qHC3DTmB,EAAkB,SAAC,GAAD,QAAEC,cAAF,MAAW,CAAC,iBAAZ,EAAiCpE,EAAjC,yBACtB,YAAC,IAAD,CAAQoE,OAAQA,IACb,qBAAEC,WAEC,YAAC,IAAD,KAAOC,KAAK,UAAUrE,KAAM,YAAC,KAAD,CAAasE,KAAK,QAAavE,GACxDwE,YACC,wGANNL,E,8BAkBSA,O,kCC3Bf,oEAGO,SAASM,EAAkBC,GAChC,OAAOC,mBAAmBD,EAAIE,OAJG,OAO5B,SAASC,EAAeH,GAC7B,OAAOA,EAAIE,MAPkB,qB,iyBCoBzBE,E,kLAOJC,MAAQ,CACNC,QAAS,KACTC,aAAc,KACdC,WAAW,G,EA4CbC,UAAY,SAACT,EAAKU,GAAe,MACJ,EAAKpF,MAAM2B,OAA/B0D,EADwB,EACxBA,MAAOC,EADiB,EACjBA,UAEd,EAAKtF,MAAMuF,IAAIC,QAAf,oBACeH,EADf,YACwBC,EADxB,yBACkDb,YAAkBC,GADpE,KAEE,CACEe,OAAQ,MACRC,KAAM,CACJd,KAAMF,EAAIE,KACVe,SAAUP,GAEZQ,QAAS,WACPC,YACEC,YAAI,wBAAyB,CAC3BC,YAAalB,YAAeH,OAIlCsB,MAAO,WACLC,YACEH,YAAI,iCAAkC,CACpCC,YAAalB,YAAeH,OAIlCwB,SAAU,EAAKC,UAAUC,KAAf,W,0DAjEdrG,KAAKoG,c,yCAGYE,GAEftG,KAAKC,MAAM4B,SAAS0B,SAASgD,SAAS,aACtCD,EAAUzE,SAAS0B,SAASgD,SAAS,YAErCvG,KAAKoG,c,kCAIG,WACJR,EAAW5F,KAAKC,MAAM4B,SAAS0B,SAASgD,SAAS,WAElDvG,KAAKgF,MAAMG,WACdnF,KAAKwG,SAAS,CAACrB,WAAW,IAJlB,MAOiBnF,KAAKC,MAAM2B,OAA/B0D,EAPG,EAOHA,MAAOC,EAPJ,EAOIA,UACdvF,KAAKC,MAAMuF,IAAIC,QAAf,oBAAoCH,EAApC,YAA6CC,EAA7C,kBAAwE,CACtEpC,MAAO,CACLsD,WAAYb,EAAW,SAAW,WAEpCC,QAAS,SAAAX,GACP,EAAKsB,SAAS,CAACtB,eAAcC,WAAW,S,4CAKxB,aACOnF,KAAKC,MAAM2B,OAA/B0D,EADa,EACbA,MAAOC,EADM,EACNA,UACdvF,KAAKC,MAAMuF,IAAIC,QAAf,oBAAoCH,EAApC,YAA6CC,EAA7C,KAA2D,CACzDM,QAAS,SAAAZ,GACP,EAAKuB,SAAS,CAACvB,iB,oCAqCnB,IACMyB,EADW1G,KAAKC,MAAM4B,SAAS0B,SAASgD,SAAS,WAEnD9B,YAAE,2CACFA,YAAE,wCACN,OAAO,YAAC,IAAD,KAAeiC,K,uDAYtB,OADiB1G,KAAKC,MAAM4B,SAAS0B,SAASgD,SAAS,WAE9C,KAGP,YAACI,EAAD,CACE9B,KAAM+B,IACNZ,YAAa,CACXa,GAAID,IACJ/B,KAAM+B,KAERE,aAAW,M,4CAKKC,GAAM,WACpBnB,EAAW5F,KAAKC,MAAM4B,SAAS0B,SAASgD,SAAS,WACjDS,EAAapB,EAAWnB,YAAE,QAAUA,YAAE,QAE5C,OACE,YAAC,IAAMwC,SAAP,KACGjH,KAAKkH,iCACLH,EAAK/E,KAAI,SAAA2C,GAAG,OACX,YAACgC,EAAD,CACEQ,IAAKxC,EAAIkC,GACThC,KAAMF,EAAIE,KACVmB,YAAarB,EACbiB,SAAUA,EACVwB,OAAQ,EAAKhC,UACbiC,WAAYL,EACZM,kBAAgB,U,mCAOb,MACuBtH,KAAKgF,MAAhCE,EADI,EACJA,aAEP,OAHW,EACUC,UAGZ,YAAC,UAAD,MAIP,YAAC,IAAD,KACGD,EAAaqC,OACVvH,KAAKwH,sBAAsBtC,GAC3BlF,KAAKyH,iB,+BAKN,MAC4BzH,KAAKC,MAAjC0B,EADA,EACAA,OAAQC,EADR,EACQA,OACTgE,EAFC,EACgB/D,SACG0B,SAASgD,SAAS,WAEtCmB,EAAUpG,YAAc,GAAI,CAACK,SAAQC,SAAQE,UAAW,IAC9D,OACE,uBACE,YAAC,IAAD,CAAqB3B,MAAOsE,YAAE,gBAAiBrD,QAASQ,EAAO2D,YAC/D,YAAC,IAAD,CACEpF,MAAOsE,YAAE,uBACTpE,KACE,YAAC,IAAD,CAASuC,YAAU,GACjB,YAAC,IAAD,CAAUrB,GAAImG,EAAStE,OAAK,EAACF,SAAU,kBAAO0C,IAC3CnB,YAAE,iBAEL,YAAC,IAAD,CAAUlD,GAAE,UAAKmG,EAAL,WAAuBtE,OAAK,EAACF,SAAU,kBAAM0C,IACtDnB,YAAE,cAKX,YAAC,IAAD,MAEA,YAAC,IAAD,KACE,YAAC,IAAD,KAAcmB,EAAWnB,YAAE,UAAYA,YAAE,wBACxCzE,KAAK2H,mB,GAnLkB/G,IAAMC,WAAlCkE,E,sCA0LA4B,E,qIAUK,aACoE3G,KAAKC,MAAzE+F,EADA,EACAA,YAAasB,EADb,EACaA,iBAAkBR,EAD/B,EAC+BA,YAAalB,EAD5C,EAC4CA,SAAUyB,EADtD,EACsDA,WAE7D,OACE,YAACO,EAAD,KACE,YAACC,EAAD,KAAOf,EAAcrC,YAAE,oBAAsBuB,EAAYnB,MACzD,YAAC,IAAD,CAAQR,OAAQ,CAAC,mBACd,gBAAEC,EAAF,EAAEA,UAAF,OACC,uBACGgD,GACC,YAACQ,EAAD,CACEtD,KAAK,SACLuD,UAAWzD,EACX0D,QAAS,kBAAM,EAAK/H,MAAMmH,OAAOpB,GAAcJ,KAE9CyB,Y,GAzBUzG,IAAMC,WAA7B8F,E,6BAoCN,IAAMiB,EAAkB,YAAOK,IAAP,8CAAH,6EAKfJ,EAAO,YAAO,MAAP,mCAAH,2DAKJC,EAAoB,YAAOI,IAAP,gDAAH,eACNlH,YAAM,IADA,KAKRmH,sBAAQpD","file":"ProjectEnvironments.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n  location: Location;\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\ntype Props = {\n  underlined?: boolean;\n  className?: string;\n};\n\ntype NavProps = Omit<React.HTMLProps<HTMLUListElement>, keyof Props> & Props;\n\nfunction NavTabs(props: NavProps) {\n  const {underlined, className, ...tabProps} = props;\n  const mergedClassName = classnames('nav nav-tabs', className, {\n    'border-bottom': underlined,\n  });\n  return <ul className={mergedClassName} {...tabProps} />;\n}\n\nNavTabs.propTypes = {\n  underlined: PropTypes.bool,\n};\n\nexport default NavTabs;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport omit from 'lodash/omit';\nimport {Link} from 'react-router';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\n\ntype DefaultProps = {\n  index: boolean;\n  activeClassName: string;\n};\n\ntype Props = DefaultProps & {\n  to: LocationDescriptor;\n  className?: string;\n  query?: string;\n  onClick?: () => void;\n  // If supplied by parent component, decides whether link element\n  // is \"active\" or not ... overriding default behavior of strict\n  // route matching\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n};\n\nclass ListLink extends React.Component<Props> {\n  static displayName = 'ListLink';\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n  };\n\n  isActive = () => {\n    const {isActive, to, query, index} = this.props;\n\n    return (isActive || this.context.router.isActive)({pathname: to, query}, index);\n  };\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive()) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children} = this.props;\n    const carriedProps = omit(this.props, 'activeClassName', 'isActive', 'index');\n\n    return (\n      <li className={this.getClassName()}>\n        <Link {...carriedProps} onlyActiveOnIndex={index}>\n          {children}\n        </Link>\n      </li>\n    );\n  }\n}\n\nexport default ListLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default PermissionAlert;\n","import {Environment} from 'app/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Omit<Environment, 'id'>) {\n  return encodeURIComponent(env.name) || DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Omit<Environment, 'id'>) {\n  return env.name || DEFAULT_EMPTY_ENV_NAME;\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {ALL_ENVIRONMENTS_KEY} from 'app/constants';\nimport {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t, tct} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport withApi from 'app/utils/withApi';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ListLink from 'app/components/links/listLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NavTabs from 'app/components/navTabs';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\nimport {getUrlRoutingName, getDisplayName} from 'app/utils/environment';\n\nclass ProjectEnvironments extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    routes: PropTypes.array,\n    params: PropTypes.object,\n  };\n\n  state = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env, shouldHide) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <React.Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} objSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nclass EnvironmentRow extends React.Component {\n  static propTypes = {\n    environment: SentryTypes.Environment,\n    isHidden: PropTypes.bool,\n    isSystemRow: PropTypes.bool,\n    shouldShowAction: PropTypes.bool,\n    actionText: PropTypes.string,\n    onHide: PropTypes.func,\n  };\n\n  render() {\n    const {environment, shouldShowAction, isSystemRow, isHidden, actionText} = this.props;\n\n    return (\n      <EnvironmentItem>\n        <Name>{isSystemRow ? t('All Environments') : environment.name}</Name>\n        <Access access={['project:write']}>\n          {({hasAccess}) => (\n            <div>\n              {shouldShowAction && (\n                <EnvironmentButton\n                  size=\"xsmall\"\n                  disabled={!hasAccess}\n                  onClick={() => this.props.onHide(environment, !isHidden)}\n                >\n                  {actionText}\n                </EnvironmentButton>\n              )}\n            </div>\n          )}\n        </Access>\n      </EnvironmentItem>\n    );\n  }\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"sourceRoot":""}