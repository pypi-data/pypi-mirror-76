{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/data/platforms.tsx","webpack:///./app/views/projectInstall/platform.jsx"],"names":["SentryDocumentTitle","props","_title","title","objSlug","children","otherPlatform","integrations","link","type","id","name","t","concat","platforms","map","platform","i","language","ProjectInstallPlatform","state","loading","error","html","fetchData","a","api","params","orgId","projectId","setState","loadDocs","this","window","scrollTo","redirectToNeutralDocs","url","browserHistory","push","find","p","issueStreamLink","gettingStartedLink","hasButtons","Actions","size","to","href","external","tct","docLink","withPadding","onRetry","Fragment","DocumentationWrapper","dangerouslySetInnerHTML","__html","isGettingStarted","key","slugs","passthroughPlaceholderProject","projects","initiallyLoaded","fetching","fetchError","projectsLoading","issueStreamLinkQuery","length","project","priority","busy","pathname","query","hash","style","marginTop","location","indexOf","React","Component","space","withApi","withOrganization"],"mappings":"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","file":"ProjectInstallPlatform.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","/* eslint import/no-unresolved:0 import/order:0 */\nimport {PlatformIntegration} from 'app/types';\nimport {platforms} from 'integration-docs-platforms';\nimport {t} from 'app/locale';\n\nconst otherPlatform = {\n  integrations: [\n    {\n      link: 'https://docs.sentry.io/clients/',\n      type: 'language',\n      id: 'other',\n      name: t('Other'),\n    },\n  ],\n  id: 'other',\n  name: t('Other'),\n};\n\nexport default ([] as PlatformIntegration[]).concat(\n  [],\n  ...[...platforms, otherPlatform].map(platform =>\n    platform.integrations.map(i => ({...i, language: platform.id}))\n  )\n);\n","import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {loadDocs} from 'app/actionCreators/projects';\nimport {t, tct} from 'app/locale';\nimport Button from 'app/components/button';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NotFound from 'app/components/errors/notFound';\nimport Projects from 'app/utils/projects';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport platforms from 'app/data/platforms';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass ProjectInstallPlatform extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n  };\n\n  state = {\n    loading: true,\n    error: false,\n    html: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    //redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get isGettingStarted() {\n    return window.location.href.indexOf('getting-started') > 0;\n  }\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n    const {orgId, projectId, platform} = params;\n\n    this.setState({loading: true});\n\n    try {\n      const {html} = await loadDocs(api, orgId, projectId, platform);\n      this.setState({html});\n    } catch (error) {\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  };\n\n  redirectToNeutralDocs() {\n    const {orgId, projectId} = this.props.params;\n\n    const url = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(url);\n  }\n\n  render() {\n    const {params} = this.props;\n    const {orgId, projectId} = params;\n\n    const platform = platforms.find(p => p.id === params.platform);\n\n    if (!platform) {\n      return <NotFound />;\n    }\n\n    const issueStreamLink = `/organizations/${orgId}/issues/`;\n    const gettingStartedLink = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          {t('Configure %(platform)s', {platform: platform.name})}\n          <Actions>\n            <Button size=\"small\" to={gettingStartedLink}>\n              {t('< Back')}\n            </Button>\n            <Button size=\"small\" href={platform.link} external>\n              {t('Full Documentation')}\n            </Button>\n          </Actions>\n        </PanelHeader>\n\n        <PanelAlert type=\"info\">\n          {tct(\n            `\n             This is a quick getting started guide. For in-depth instructions\n             on integrating Sentry with [platform], view\n             [docLink:our complete documentation].`,\n            {\n              platform: platform.name,\n              docLink: <a href={platform.link} />,\n            }\n          )}\n        </PanelAlert>\n\n        <PanelBody withPadding>\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : this.state.error ? (\n            <LoadingError onRetry={this.fetchData} />\n          ) : (\n            <React.Fragment>\n              <SentryDocumentTitle\n                title={`${t('Configure')} ${platform.name}`}\n                objSlug={projectId}\n              />\n              <DocumentationWrapper dangerouslySetInnerHTML={{__html: this.state.html}} />\n            </React.Fragment>\n          )}\n\n          {this.isGettingStarted && (\n            <Projects\n              key={`${orgId}-${projectId}`}\n              orgId={orgId}\n              slugs={[projectId]}\n              passthroughPlaceholderProject={false}\n            >\n              {({projects, initiallyLoaded, fetching, fetchError}) => {\n                const projectsLoading = !initiallyLoaded && fetching;\n                const issueStreamLinkQuery =\n                  !projectsLoading && !fetchError && projects.length\n                    ? {\n                        project: projects[0].id,\n                      }\n                    : {};\n\n                return (\n                  <Button\n                    priority=\"primary\"\n                    busy={projectsLoading}\n                    to={{\n                      pathname: issueStreamLink,\n                      query: issueStreamLinkQuery,\n                      hash: '#welcome',\n                    }}\n                    style={{marginTop: 20}}\n                  >\n                    {t('Got it! Take me to the Issue Stream.')}\n                  </Button>\n                );\n              }}\n            </Projects>\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst DocumentationWrapper = styled('div')`\n  p {\n    line-height: 1.5;\n  }\n  pre {\n    word-break: break-all;\n    white-space: pre-wrap;\n  }\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nexport {ProjectInstallPlatform};\nexport default withApi(withOrganization(ProjectInstallPlatform));\n"],"sourceRoot":""}