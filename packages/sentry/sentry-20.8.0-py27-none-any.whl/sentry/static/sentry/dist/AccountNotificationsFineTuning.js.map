{"version":3,"sources":["webpack:///./app/views/settings/account/accountNotificationFineTuning.jsx"],"names":["ACCOUNT_NOTIFICATION_FIELDS","alerts","title","description","t","type","choices","defaultValue","defaultFieldName","workflow","deploy","reports","email","PanelBodyLineItem","PanelBody","p","theme","borderLight","isGroupedByProject","indexOf","AccountNotificationsByProject","this","props","projects","field","projectsByOrg","reduce","acc","project","orgSlug","organization","slug","hasOwnProperty","push","groupByOrganization","fieldConfig","Object","values","map","org","name","id","label","getFieldData","projectFields","key","deprecatedSelectControl","React","Component","AccountNotificationsByOrganization","organizations","orgFields","Fragment","AccountNotificationsByOrganizationContainer","withOrganizations","AccountNotificationFineTuning","fineTuneType","params","endpoints","emails","state","filter","isVerified","sort","a","b","isPrimary","isProject","getEndpoints","stateKey","url","hasProjects","length","getEmailChoices","saveOnBlur","apiMethod","apiEndpoint","initialData","notifications","fields","hasButtons","Heading","renderSearchInput","placeholder","fineTuneData","pageLinks","projectsPageLinks","AsyncView"],"mappings":"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","file":"AccountNotificationsFineTuning.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport Pagination from 'app/components/pagination';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport withOrganizations from 'app/utils/withOrganizations';\n\nconst ACCOUNT_NOTIFICATION_FIELDS = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t('Control alerts that you receive per project.'),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [1, t('On')],\n      [0, t('Off')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [0, t('Always')],\n      [1, t('Only on issues I subscribe to')],\n      [2, t('Never')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [2, t('Always')],\n      [3, t('Only on deploys with my commits')],\n      [4, t('Never')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: 1,\n    choices: [\n      [1, t('On')],\n      [0, t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  border-bottom: 1px solid ${p => p.theme.borderLight};\n`;\n\n// Which fine tuning parts are grouped by project\nconst isGroupedByProject = type => ['alerts', 'workflow', 'email'].indexOf(type) > -1;\n\nfunction groupByOrganization(projects) {\n  return projects.reduce((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n}\n\nclass AccountNotificationsByProject extends React.Component {\n  static propTypes = {\n    projects: PropTypes.array,\n    field: PropTypes.object,\n  };\n\n  getFieldData() {\n    const {projects, field} = this.props;\n    const projectsByOrg = groupByOrganization(projects);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {title, description, ...fieldConfig} = field;\n\n    // Display as select box in this view regardless of the type specified in the config\n    return Object.values(projectsByOrg).map(org => ({\n      name: org.organization.name,\n      projects: org.projects.map(project => ({\n        ...fieldConfig,\n        // `name` key refers to field name\n        // we use project.id because slugs are not unique across orgs\n        name: project.id,\n        label: project.slug,\n      })),\n    }));\n  }\n\n  render() {\n    const data = this.getFieldData();\n\n    return data.map(({name, projects: projectFields}) => (\n      <div key={name}>\n        <PanelHeader>{name}</PanelHeader>\n        {projectFields.map(field => (\n          <PanelBodyLineItem key={field.name}>\n            <SelectField\n              deprecatedSelectControl\n              defaultValue={field.defaultValue}\n              name={field.name}\n              choices={field.choices}\n              label={field.label}\n            />\n          </PanelBodyLineItem>\n        ))}\n      </div>\n    ));\n  }\n}\n\nclass AccountNotificationsByOrganization extends React.Component {\n  static propTypes = {\n    organizations: PropTypes.array,\n    field: PropTypes.object,\n  };\n\n  getFieldData() {\n    const {field, organizations} = this.props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {title, description, ...fieldConfig} = field;\n\n    // Display as select box in this view regardless of the type specified in the config\n    return organizations.map(org => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n      name: org.id,\n      label: org.slug,\n    }));\n  }\n\n  render() {\n    const orgFields = this.getFieldData();\n\n    return (\n      <React.Fragment>\n        {orgFields.map(field => (\n          <PanelBodyLineItem key={field.name}>\n            <SelectField\n              deprecatedSelectControl\n              defaultValue={field.defaultValue}\n              name={field.name}\n              choices={field.choices}\n              label={field.label}\n            />\n          </PanelBodyLineItem>\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\nexport default class AccountNotificationFineTuning extends AsyncView {\n  getEndpoints() {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints;\n  }\n\n  // Return a sorted list of user's verified emails\n  getEmailChoices() {\n    const {emails} = this.state;\n    if (!emails) {\n      return [];\n    }\n\n    return emails\n      .filter(({isVerified}) => isVerified)\n      .sort((a, b) => {\n        // Sort by primary -> email\n        if (a.isPrimary) {\n          return -1;\n        } else if (b.isPrimary) {\n          return 1;\n        }\n\n        return a.email < b.email ? -1 : 1;\n      });\n  }\n\n  renderBody() {\n    const {fineTuneType} = this.props.params;\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = this.state.projects && !!this.state.projects.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.getEmailChoices().map(({email}) => [email, email]);\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={this.state.notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${this.props.params.fineTuneType}/`}\n              initialData={this.state.fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject\n                  projects={this.state.projects}\n                  field={field}\n                />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {this.state.projects && (\n          <Pagination pageLinks={this.state.projectsPageLinks} {...this.props} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n"],"sourceRoot":""}