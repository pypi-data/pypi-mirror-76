{"version":3,"sources":["webpack:///./app/views/organizationGroupDetails/utils.jsx","webpack:///./app/views/organizationGroupDetails/groupUserFeedback.jsx"],"names":["fetchGroupEventAndMarkSeen","api","orgId","projectId","groupId","eventId","envNames","a","url","query","length","environment","requestPromise","data","bulkUpdate","itemIds","failSilently","hasSeen","fetchGroupUserReports","Client","includeAllArgs","getEventEnvironment","event","tag","tags","find","key","value","SUBSCRIPTION_REASONS","commented","t","assigned","bookmarked","changed_status","mentioned","getSubscriptionReason","group","removeLinks","subscriptionDetails","disabled","tct","link","href","isSubscribed","reason","hasOwnProperty","GroupUserFeedback","props","fetchData","setState","loading","error","id","params","then","jqXHR","reportList","pageLinks","getResponseHeader","state","this","prevProps","isEqual","organization","onRetry","className","map","item","idx","report","slug","issueId","projectIds","project","React","Component","withOrganization"],"mappings":"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","file":"OrganizationGroupUserFeedback.js","sourcesContent":["import React from 'react';\n\nimport {t, tct} from 'app/locale';\nimport {Client} from 'app/api';\n\n/**\n * Fetches group data and mark as seen\n *\n * @param {String} orgId organization slug\n * @param {String} projectId project slug\n * @param {String} groupId groupId\n * @param {String} eventId eventId or \"latest\" or \"oldest\"\n * @returns {Promise<Object>}\n */\nexport async function fetchGroupEventAndMarkSeen(\n  api,\n  orgId,\n  projectId,\n  groupId,\n  eventId,\n  envNames\n) {\n  const url =\n    eventId === 'latest' || eventId === 'oldest'\n      ? `/issues/${groupId}/events/${eventId}/`\n      : `/projects/${orgId}/${projectId}/events/${eventId}/`;\n\n  const query = {};\n  if (envNames.length !== 0) {\n    query.environment = envNames;\n  }\n\n  try {\n    const data = await api.requestPromise(url, {query});\n    api.bulkUpdate({\n      orgId,\n      projectId,\n      itemIds: [groupId],\n      failSilently: true,\n      data: {hasSeen: true},\n    });\n    return data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport function fetchGroupUserReports(groupId, query) {\n  const api = new Client();\n\n  return api.requestPromise(`/issues/${groupId}/user-reports/`, {\n    includeAllArgs: true,\n    query,\n  });\n}\n\n/**\n * Returns the environment name for an event or null\n *\n * @param {Object} event\n * @returns {String|Void}\n */\nexport function getEventEnvironment(event) {\n  const tag = event.tags.find(({key}) => key === 'environment');\n\n  return tag ? tag.value : null;\n}\n\nconst SUBSCRIPTION_REASONS = {\n  commented: t(\n    \"You're receiving workflow notifications because you have commented on this issue.\"\n  ),\n  assigned: t(\n    \"You're receiving workflow notifications because you were assigned to this issue.\"\n  ),\n  bookmarked: t(\n    \"You're receiving workflow notifications because you have bookmarked this issue.\"\n  ),\n  changed_status: t(\n    \"You're receiving workflow notifications because you have changed the status of this issue.\"\n  ),\n  mentioned: t(\n    \"You're receiving workflow notifications because you have been mentioned in this issue.\"\n  ),\n};\n\n/**\n * @param {object} group\n * @param {boolean} removeLinks add/remove links to subscription reasons text (default: false)\n * @returns Reason for subscription\n */\nexport function getSubscriptionReason(group, removeLinks = false) {\n  if (group.subscriptionDetails && group.subscriptionDetails.disabled) {\n    return tct('You have [link:disabled workflow notifications] for this project.', {\n      link: removeLinks ? <span /> : <a href=\"/account/settings/notifications/\" />,\n    });\n  }\n\n  if (!group.isSubscribed) {\n    return t('Subscribe to workflow notifications for this issue');\n  }\n\n  if (group.subscriptionDetails) {\n    const {reason} = group.subscriptionDetails;\n    if (reason === 'unknown') {\n      return t(\n        \"You're receiving workflow notifications because you are subscribed to this issue.\"\n      );\n    }\n\n    if (SUBSCRIPTION_REASONS.hasOwnProperty(reason)) {\n      return SUBSCRIPTION_REASONS[reason];\n    }\n  }\n\n  return tct(\n    \"You're receiving updates because you are [link:subscribed to workflow notifications] for this project.\",\n    {\n      link: removeLinks ? <span /> : <a href=\"/account/settings/notifications/\" />,\n    }\n  );\n}\n","import React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport SentryTypes from 'app/sentryTypes';\nimport EventUserFeedback from 'app/components/events/userFeedback';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel} from 'app/components/panels';\nimport Pagination from 'app/components/pagination';\nimport withOrganization from 'app/utils/withOrganization';\nimport UserFeedbackEmpty from 'app/views/userFeedback/userFeedbackEmpty';\n\nimport {fetchGroupUserReports} from './utils';\n\nclass GroupUserFeedback extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    group: SentryTypes.Group.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      error: false,\n      reportList: [],\n      pageLinks: '',\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.params, this.props.params)) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchGroupUserReports(this.props.group.id, this.props.params)\n      .then(([data, _, jqXHR]) => {\n        this.setState({\n          error: false,\n          loading: false,\n          reportList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      });\n  };\n\n  render() {\n    const {reportList} = this.state;\n    const {organization, group} = this.props;\n\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (reportList.length) {\n      return (\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            {reportList.map((item, idx) => (\n              <EventUserFeedback\n                key={idx}\n                report={item}\n                orgId={organization.slug}\n                issueId={group.id}\n              />\n            ))}\n            <Pagination pageLinks={this.state.pageLinks} />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Panel>\n        <UserFeedbackEmpty projectIds={[group.project.id]} />\n      </Panel>\n    );\n  }\n}\n\nexport default withOrganization(GroupUserFeedback);\n"],"sourceRoot":""}