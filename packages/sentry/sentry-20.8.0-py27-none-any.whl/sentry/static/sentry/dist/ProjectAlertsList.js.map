{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/incidentRules/types.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/projectAlerts/onboardingHovercard.tsx","webpack:///./app/views/settings/projectAlerts/ruleRow.tsx","webpack:///./app/views/settings/projectAlerts/list.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","routeTitleGen","routeName","orgSlug","withSentry","tmpl","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AlertRuleThreshold","AlertRuleThresholdType","Dataset","TimeWindow","ActionType","TargetType","PermissionAlert","access","hasAccess","type","size","t","getUrlRoutingName","env","encodeURIComponent","name","getDisplayName","OnboardingHovercard","state","dismissed","skipTask","api","organization","updateOnboardingTask","task","OnboardingTaskKey","ALERT_RULE","status","data","accepted_defaults","setState","children","shouldShowHovercard","hovercardBody","HovercardBody","onClick","show","position","body","hasCompletedTask","onboardingTasks","find","query","Object","prototype","hasOwnProperty","call","theme","fontSizeLarge","fontSizeMedium","withApi","RuleRow","loading","error","canEdit","editLink","id","environmentName","environment","Fragment","RuleType","RuleName","RuleDescription","ConditionsWithHeader","MatchTypeHeader","tct","matchType","actionMatch","conditions","length","Conditions","condition","i","key","Actions","actions","numberOfTriggers","triggers","rowSpans","RuleNameAndDescription","trigger","hideBorder","Trigger","StatusBadge","label","TriggerDescription","aggregate","thresholdType","ABOVE","alertThreshold","timeWindow","j","desc","isIssueAlert","renderIssueRule","renderMetricRule","gray600","fontSizeSmall","Link","listingCss","css","gray500","gray300","gray700","borderRadius","fontSizeRelativeSmall","ProjectAlertRules","orgId","projectId","routeTitle","canEditRule","rules","rule","renderBody","rulesPageLinks","basePath","HeaderActions","disabled","priority","isCircled","ScrollWrapper","StyledPanelTable","isLoading","isEmpty","emptyMessage","headers","renderResults","pageLinks","PanelTable"],"mappings":"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","file":"ProjectAlertsList.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n  location: Location;\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","export enum AlertRuleThreshold {\n  INCIDENT,\n  RESOLUTION,\n}\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n}\n\nexport type UnsavedTrigger = {\n  // UnsavedTrigger can be apart of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n  label: string;\n  alertThreshold: number | '' | null;\n  actions: Action[];\n};\n\nexport type ThresholdControlValue = {\n  thresholdType: AlertRuleThresholdType;\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n};\n\nexport type SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  id: string;\n  dateCreated: string;\n  actions: Action[];\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedIncidentRule = {\n  dataset: Dataset;\n  projects: string[];\n  environment: string | null;\n  query: string;\n  timeWindow: number;\n  triggers: Trigger[];\n  aggregate: string;\n  thresholdType: AlertRuleThresholdType;\n  resolveThreshold: number | '' | null;\n};\n\nexport type SavedIncidentRule = UnsavedIncidentRule & {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  status: number;\n  name: string;\n};\n\nexport type IncidentRule = Partial<SavedIncidentRule> & UnsavedIncidentRule;\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport type ProjectSelectOption = {\n  label: string;\n  value: number;\n};\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGER_DUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n}\n\nexport enum TargetType {\n  // The name can be customized for each integration. Email for email, channel for slack, service for Pagerduty). We probably won't support this for email at first, since we need to be careful not to enable spam\n  SPECIFIC = 'specific',\n\n  // Just works with email for now, grabs given user's email address\n  USER = 'user',\n\n  // Just works with email for now, grabs the emails for all team members\n  TEAM = 'team',\n}\n\n/**\n * This is an available action template that is associated to a Trigger in a Metric Alert Rule\n */\nexport type MetricActionTemplate = {\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName: string;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId: number;\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\nexport type SavedAction = UnsavedAction & SavedActionFields;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n};\n\nexport type UnsavedAction = {\n  type: ActionType;\n\n  targetType: TargetType | null;\n\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, etc\n   */\n  targetIdentifier: string | null;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default PermissionAlert;\n","import {Environment} from 'app/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Omit<Environment, 'id'>) {\n  return encodeURIComponent(env.name) || DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Omit<Environment, 'id'>) {\n  return env.name || DEFAULT_EMPTY_ENV_NAME;\n}\n","import React from 'react';\nimport {Location} from 'history';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Hovercard from 'app/components/hovercard';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport {Client} from 'app/api';\nimport {Organization, OnboardingTaskKey} from 'app/types';\nimport {updateOnboardingTask} from 'app/actionCreators/onboardingTasks';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  location: Location;\n  children: React.ReactNode;\n};\n\ntype State = {\n  dismissed: boolean;\n};\n\nclass OnboardingHovercard extends React.Component<Props, State> {\n  state: State = {\n    dismissed: false,\n  };\n\n  get shouldShowHovercard() {\n    const {organization} = this.props;\n    const {dismissed} = this.state;\n\n    const hasCompletedTask = organization.onboardingTasks.find(\n      task => task.task === OnboardingTaskKey.ALERT_RULE && task.status === 'complete'\n    );\n\n    const query = this.props.location?.query || {};\n\n    return (\n      !hasCompletedTask &&\n      !dismissed &&\n      Object.prototype.hasOwnProperty.call(query, 'onboardingTask')\n    );\n  }\n\n  skipTask = () => {\n    const {api, organization} = this.props;\n\n    updateOnboardingTask(api, organization, {\n      task: OnboardingTaskKey.ALERT_RULE,\n      status: 'complete',\n      data: {accepted_defaults: true},\n    });\n\n    this.setState({dismissed: true});\n  };\n\n  render() {\n    const {children, organization: _org, location: _location, ...props} = this.props;\n\n    if (!this.shouldShowHovercard) {\n      return children;\n    }\n\n    const hovercardBody = (\n      <HovercardBody>\n        <h1>{t('Configure custom alerting')}</h1>\n\n        <p>\n          {t(\n            `Add custom alert rules to configure under what conditions\n             you receive notifications from Sentry.`\n          )}\n        </p>\n\n        <Button size=\"xsmall\" onClick={this.skipTask}>\n          {t('The default rule looks good!')}\n        </Button>\n      </HovercardBody>\n    );\n\n    return (\n      <Hovercard show position=\"left\" body={hovercardBody} {...props}>\n        {children}\n      </Hovercard>\n    );\n  }\n}\n\nconst HovercardBody = styled('div')`\n  h1 {\n    font-size: ${p => p.theme.fontSizeLarge};\n    margin-bottom: ${space(1.5)};\n  }\n  p {\n    font-size: ${p => p.theme.fontSizeMedium};\n  }\n`;\n\nexport default withApi(OnboardingHovercard);\n","import {Link} from 'react-router';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport {css} from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {IssueAlertRule} from 'app/types/alerts';\nimport {\n  SavedIncidentRule,\n  AlertRuleThresholdType,\n} from 'app/views/settings/incidentRules/types';\nimport {getDisplayName} from 'app/utils/environment';\nimport {t, tct} from 'app/locale';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\n\nfunction isIssueAlert(data: IssueAlertRule | SavedIncidentRule): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\ntype Props = {\n  data: IssueAlertRule | SavedIncidentRule;\n  type: 'issue' | 'metric';\n\n  // Is the alert rule editable?\n  canEdit?: boolean;\n} & Pick<\n  RouteComponentProps<{orgId: string; projectId: string}, {}>,\n  'params' | 'routes' | 'location'\n>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n};\n\nclass RuleRow extends React.Component<Props, State> {\n  static propTypes: any = {\n    data: PropTypes.object.isRequired,\n    canEdit: PropTypes.bool,\n  };\n\n  state = {loading: false, error: false};\n\n  renderIssueRule(data: IssueAlertRule) {\n    const {params, routes, location, canEdit} = this.props;\n    const editLink = recreateRoute(`rules/${data.id}/`, {\n      params,\n      routes,\n      location,\n    });\n\n    const environmentName = data.environment\n      ? getDisplayName({name: data.environment})\n      : t('All Environments');\n\n    return (\n      <React.Fragment>\n        <RuleType>{t('Issue')}</RuleType>\n        <div>\n          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}\n          <RuleDescription>\n            {t('Environment')}: {environmentName}\n          </RuleDescription>\n        </div>\n\n        <ConditionsWithHeader>\n          <MatchTypeHeader>\n            {tct('[matchType] of the following:', {\n              matchType: data.actionMatch,\n            })}\n          </MatchTypeHeader>\n          {data.conditions.length !== 0 && (\n            <Conditions>\n              {data.conditions.map((condition, i) => (\n                <div key={i}>{condition.name}</div>\n              ))}\n            </Conditions>\n          )}\n        </ConditionsWithHeader>\n\n        <Actions>\n          {data.actions.map((action, i) => (\n            <Action key={i}>{action.name}</Action>\n          ))}\n        </Actions>\n      </React.Fragment>\n    );\n  }\n\n  renderMetricRule(data: SavedIncidentRule) {\n    const {params, routes, location, canEdit} = this.props;\n    const editLink = recreateRoute(`metric-rules/${data.id}/`, {\n      params,\n      routes,\n      location,\n    });\n\n    const numberOfTriggers = data.triggers.length;\n\n    return (\n      <React.Fragment>\n        <RuleType rowSpans={numberOfTriggers}>{t('Metric')}</RuleType>\n        <RuleNameAndDescription rowSpans={numberOfTriggers}>\n          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}\n          <RuleDescription />\n        </RuleNameAndDescription>\n\n        {numberOfTriggers !== 0 &&\n          data.triggers.map((trigger, i) => {\n            const hideBorder = i !== numberOfTriggers - 1;\n            return (\n              <React.Fragment key={i}>\n                <Trigger key={`trigger-${i}`} hideBorder={hideBorder}>\n                  <StatusBadge>{trigger.label}</StatusBadge>\n                  <TriggerDescription>\n                    {data.aggregate}{' '}\n                    {data.thresholdType === AlertRuleThresholdType.ABOVE\n                      ? t('above')\n                      : t('below')}{' '}\n                    {trigger.alertThreshold}/{data.timeWindow}\n                    {t('min')}\n                  </TriggerDescription>\n                </Trigger>\n                <Actions key={`actions-${i}`} hideBorder={hideBorder}>\n                  {trigger.actions?.length\n                    ? trigger.actions.map((action, j) => (\n                        <Action key={j}>{action.desc}</Action>\n                      ))\n                    : t('None')}\n                </Actions>\n              </React.Fragment>\n            );\n          })}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {data} = this.props;\n\n    return isIssueAlert(data) ? this.renderIssueRule(data) : this.renderMetricRule(data);\n  }\n}\n\nexport default RuleRow;\n\ntype RowSpansProp = {\n  rowSpans?: number;\n};\n\ntype HasBorderProp = {\n  hideBorder?: boolean;\n};\n\nconst RuleType = styled('div')<RowSpansProp>`\n  color: ${p => p.theme.gray600};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: bold;\n  text-transform: uppercase;\n  ${p => p.rowSpans && `grid-row: auto / span ${p.rowSpans}`};\n`;\n\nconst RuleNameAndDescription = styled('div')<RowSpansProp>`\n  ${p => p.rowSpans && `grid-row: auto / span ${p.rowSpans}`};\n`;\n\nconst RuleName = styled(Link)`\n  font-weight: bold;\n`;\n\nconst listingCss = css`\n  display: grid;\n  grid-gap: ${space(1)};\n`;\n\nconst Conditions = styled('div')`\n  ${listingCss};\n`;\n\nconst Actions = styled('div')<HasBorderProp>`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${listingCss};\n\n  ${p => p.hideBorder && `border-bottom: none`};\n`;\n\nconst Action = styled('div')`\n  line-height: 14px;\n`;\n\nconst ConditionsWithHeader = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst MatchTypeHeader = styled('div')`\n  font-weight: bold;\n  text-transform: uppercase;\n  color: ${p => p.theme.gray500};\n  margin-bottom: ${space(1)};\n`;\n\nconst RuleDescription = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin: ${space(0.5)} 0;\n  white-space: nowrap;\n`;\n\nconst Trigger = styled('div')<HasBorderProp>`\n  display: flex;\n  align-items: flex-start;\n  font-size: ${p => p.theme.fontSizeSmall};\n\n  ${p => p.hideBorder && `border-bottom: none`};\n`;\n\nconst TriggerDescription = styled('div')`\n  white-space: nowrap;\n`;\n\nconst StatusBadge = styled('div')`\n  background-color: ${p => p.theme.gray300};\n  color: ${p => p.theme.gray700};\n  text-transform: uppercase;\n  padding: ${space(0.25)} ${space(0.5)};\n  font-weight: 600;\n  margin-right: ${space(0.5)};\n  border-radius: ${p => p.theme.borderRadius};\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {IconAdd, IconSettings} from 'app/icons';\nimport {IssueAlertRule} from 'app/types/alerts';\nimport {Organization} from 'app/types';\nimport {PanelTable} from 'app/components/panels';\nimport {SavedIncidentRule} from 'app/views/settings/incidentRules/types';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport OnboardingHovercard from 'app/views/settings/projectAlerts/onboardingHovercard';\nimport Pagination from 'app/components/pagination';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\nimport RuleRow from 'app/views/settings/projectAlerts/ruleRow';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Tooltip from 'app/components/tooltip';\nimport routeTitle from 'app/utils/routeTitle';\nimport space from 'app/styles/space';\n\ntype Props = {\n  canEditRule: boolean;\n  organization: Organization;\n} & RouteComponentProps<\n  {\n    orgId: string;\n    projectId: string;\n  },\n  {}\n>;\n\ntype State = {\n  rules: Array<\n    ({type: 'alert_rule'} & IssueAlertRule) | ({type: 'rule'} & SavedIncidentRule)\n  >;\n} & AsyncView['state'];\n\nclass ProjectAlertRules extends AsyncView<Props, State> {\n  getEndpoints(): [string, string][] {\n    const {orgId, projectId} = this.props.params;\n    return [['rules', `/projects/${orgId}/${projectId}/combined-rules/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitle(t('Alert Rules'), projectId);\n  }\n\n  renderResults() {\n    const {canEditRule, params} = this.props;\n    const {orgId, projectId} = params;\n\n    return (\n      <React.Fragment>\n        {this.state.rules.map(rule => (\n          <RuleRow\n            type={rule.type === 'alert_rule' ? 'issue' : 'metric'}\n            api={this.api}\n            key={`${rule.type}-${rule.id}`}\n            data={rule}\n            orgId={orgId}\n            projectId={projectId}\n            params={this.props.params}\n            location={this.props.location}\n            routes={this.props.routes}\n            canEdit={canEditRule}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {canEditRule, location, organization, params} = this.props;\n    const {orgId, projectId} = params;\n    const {loading, rules, rulesPageLinks} = this.state;\n\n    const basePath = `/settings/${orgId}/projects/${projectId}/alerts/`;\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={t('Alert Rules')}\n          action={\n            <HeaderActions>\n              <Button to={`${basePath}settings/`} size=\"small\" icon={<IconSettings />}>\n                {t('Settings')}\n              </Button>\n              <OnboardingHovercard organization={organization} location={location}>\n                <Tooltip\n                  disabled={canEditRule}\n                  title={t('You do not have permission to edit alert rules.')}\n                >\n                  <Button\n                    to={`${basePath}new/?referrer=project_alerts`}\n                    disabled={!canEditRule}\n                    priority=\"primary\"\n                    size=\"small\"\n                    icon={<IconAdd size=\"xs\" isCircled />}\n                  >\n                    {t('New Alert Rule')}\n                  </Button>\n                </Tooltip>\n              </OnboardingHovercard>\n            </HeaderActions>\n          }\n        />\n        <PermissionAlert />\n\n        <ScrollWrapper>\n          <StyledPanelTable\n            isLoading={loading}\n            isEmpty={!loading && !rules.length}\n            emptyMessage={t('There are no alerts configured for this project.')}\n            headers={[\n              <div key=\"type\">{t('Type')}</div>,\n              <div key=\"name\">{t('Name')}</div>,\n              <div key=\"conditions\">{t('Conditions/Triggers')}</div>,\n              <div key=\"actions\">{t('Action(s)')}</div>,\n            ]}\n          >\n            {() => this.renderResults()}\n          </StyledPanelTable>\n        </ScrollWrapper>\n\n        <Pagination pageLinks={rulesPageLinks} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectAlertRules;\n\nconst ScrollWrapper = styled('div')`\n  width: 100%;\n  overflow-x: auto;\n`;\n\n/**\n * TODO(billy): Not sure if this should be default for PanelTable or not\n */\nconst StyledPanelTable = styled(PanelTable)`\n  width: fit-content;\n  min-width: 100%;\n`;\n\nconst HeaderActions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n"],"sourceRoot":""}