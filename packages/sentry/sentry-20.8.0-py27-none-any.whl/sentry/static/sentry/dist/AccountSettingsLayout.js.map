{"version":3,"sources":["webpack:///./app/components/badge.tsx","webpack:///./app/views/settings/components/settingsNavItem.tsx","webpack:///./app/views/settings/components/settingsNavigationGroup.tsx","webpack:///./app/views/settings/components/settingsNavigation.tsx","webpack:///./app/views/settings/account/accountSettingsNavigation.tsx","webpack:///./app/views/settings/account/accountSettingsLayout.jsx"],"names":["priorityColors","new","theme","red400","strong","blue400","highlight","green400","Badge","priority","text","props","space","p","gray400","propTypes","PropTypes","oneOfType","string","number","oneOf","SettingsNavItem","badge","label","index","id","LabelHook","HookOrDefault","hookName","defaultComponent","children","Fragment","renderedBadge","type","StyledNavItem","onlyActiveOnIndex","activeClassName","Link","gray500","gray800","purple400","SettingsNavigationGroup","organization","project","name","items","NavSection","data-test-id","SettingsHeading","map","path","title","show","recordAnalytics","badgeResult","to","replaceRouterParams","orgId","slug","projectId","key","onClick","window","location","pathname","trackAnalyticsEvent","organization_id","project_id","eventName","eventKey","sidebar_item_id","dest","gray600","SettingsNavigation","error","errorInfo","Sentry","scope","Object","keys","forEach","setExtra","href","this","navigationObjects","hooks","hookConfigs","otherProps","navWithHooks","concat","PositionStickyWrapper","config","Hook","i","React","cloneElement","Component","defaultProps","breakpoints","AccountSettingsNavigation","navigationConfiguration","AccountSettingsLayout","prevProps","access","fetchOrganizationDetails","setActive","loadProjects","renderNavigation","childContextTypes","SentryTypes","Organization","withLatestContext"],"mappings":"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","file":"AccountSettingsLayout.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport theme from 'app/utils/theme';\n\nconst priorityColors = {\n  new: theme.red400,\n  strong: theme.blue400,\n  highlight: theme.green400,\n} as const;\n\ntype Props = React.HTMLProps<HTMLSpanElement> & {\n  text?: string | number | null;\n  priority?: keyof typeof priorityColors;\n  className?: string;\n};\n\nconst Badge = styled(({priority: _priority, text, ...props}: Props) => (\n  <span {...props}>{text}</span>\n))<Props>`\n  display: inline-block;\n  height: 20px;\n  min-width: 20px;\n  line-height: 20px;\n  border-radius: 20px;\n  padding: 0 5px;\n  margin-left: ${space(0.5)};\n  font-size: 75%;\n  font-weight: 600;\n  text-align: center;\n  color: #fff;\n  background: ${p => (p.priority ? priorityColors[p.priority] : theme.gray400)};\n  transition: background 100ms linear;\n\n  position: relative;\n  top: -1px;\n`;\n\nBadge.propTypes = {\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  priority: PropTypes.oneOf(['strong', 'new', 'highlight']),\n} as any;\n\nexport default Badge;\n","import {Link} from 'react-router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport Badge from 'app/components/badge';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport FeatureBadge from 'app/components/featureBadge';\n\ntype Props = {\n  to: React.ComponentProps<Link>['to'];\n  label: React.ReactNode;\n  badge?: string | number | null;\n  index?: boolean;\n  id?: string;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\nconst SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {\n  const LabelHook = HookOrDefault({\n    hookName: 'sidebar:item-label',\n    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,\n  });\n\n  const renderedBadge =\n    badge === 'new' ? <FeatureBadge type=\"new\" /> : <Badge text={badge} />;\n\n  return (\n    <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n      <LabelHook id={id}>{label}</LabelHook>\n\n      {badge ? renderedBadge : null}\n    </StyledNavItem>\n  );\n};\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray500};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.gray800};\n\n    &:before {\n      background: ${p => p.theme.purple400};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.gray800};\n    outline: none;\n  }\n\n  &.focus-visible {\n    outline: none;\n    background: #f2eff5;\n    padding: 0 15px;\n    margin: 0 -15px;\n    border-radius: 3px;\n\n    &:before {\n      left: -15px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nexport default SettingsNavItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {NavigationGroupProps} from 'app/views/settings/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\nconst SettingsNavigationGroup = (props: NavigationGroupProps) => {\n  const {organization, project, name, items} = props;\n\n  return (\n    <NavSection data-test-id={name}>\n      <SettingsHeading>{name}</SettingsHeading>\n      {items.map(({path, title, index, show, badge, id, recordAnalytics}) => {\n        if (typeof show === 'function' && !show(props)) {\n          return null;\n        }\n        if (typeof show !== 'undefined' && !show) {\n          return null;\n        }\n        const badgeResult = typeof badge === 'function' ? badge(props) : null;\n        const to = replaceRouterParams(path, {\n          ...(organization ? {orgId: organization.slug} : {}),\n          ...(project ? {projectId: project.slug} : {}),\n        });\n\n        const handleClick = () => {\n          //only call the analytics event if the URL is changing\n          if (recordAnalytics && to !== window.location.pathname) {\n            trackAnalyticsEvent({\n              organization_id: organization && organization.id,\n              project_id: project && project.id,\n              eventName: 'Sidebar Item Clicked',\n              eventKey: 'sidebar.item_clicked',\n              sidebar_item_id: id,\n              dest: path,\n            });\n          }\n        };\n\n        return (\n          <SettingsNavItem\n            key={title}\n            to={to}\n            label={title}\n            index={index}\n            badge={badgeResult}\n            id={id}\n            onClick={handleClick}\n          />\n        );\n      })}\n    </NavSection>\n  );\n};\n\nconst NavSection = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled('div')`\n  color: ${p => p.theme.gray600};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default SettingsNavigationGroup;\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport {NavigationSection, NavigationProps} from 'app/views/settings/types';\n\ntype DefaultProps = {\n  /**\n   * Additional navigation configuration driven by hooks\n   */\n  hookConfigs: NavigationSection[];\n  /**\n   * Additional navigation elements driven from hooks\n   */\n  hooks: React.ReactElement[];\n};\n\ntype Props = DefaultProps &\n  NavigationProps & {\n    /**\n     * The configuration for this navigation panel\n     */\n    navigationObjects: NavigationSection[];\n  };\n\nclass SettingsNavigation extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    hooks: [],\n    hookConfigs: [],\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      scope.setExtra('url', window.location.href);\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <PositionStickyWrapper>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}\n      </PositionStickyWrapper>\n    );\n  }\n}\n\nconst PositionStickyWrapper = styled('div')`\n  padding: ${space(4)};\n  padding-right: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    position: sticky;\n    top: 70px;\n    overflow: scroll;\n    height: calc(100vh - 70px);\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n`;\n\nexport default SettingsNavigation;\n","import React from 'react';\n\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport navigationConfiguration from 'app/views/settings/account/navigationConfiguration';\n\nconst AccountSettingsNavigation = () => (\n  <SettingsNavigation navigationObjects={navigationConfiguration} />\n);\n\nexport default AccountSettingsNavigation;\n","import React from 'react';\n\nimport AccountSettingsNavigation from 'app/views/settings/account/accountSettingsNavigation';\nimport {fetchOrganizationDetails} from 'app/actionCreators/organizations';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport withLatestContext from 'app/utils/withLatestContext';\n\nclass AccountSettingsLayout extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  static childContextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getChildContext() {\n    return {\n      organization: this.props.organization,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <SettingsLayout\n        {...this.props}\n        renderNavigation={() => <AccountSettingsNavigation {...this.props} />}\n      >\n        {this.props.children}\n      </SettingsLayout>\n    );\n  }\n}\n\nexport default withLatestContext(AccountSettingsLayout);\n"],"sourceRoot":""}