{"version":3,"sources":["webpack:///./app/utils/discover/fields.tsx","webpack:///./app/types/utils.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/events/searchBar.tsx","webpack:///./app/views/events/index.jsx"],"names":["FieldKey","AGGREGATIONS","count","parameters","outputType","isSortable","multiPlotType","count_unique","kind","columnTypes","required","min","max","avg","defaultValue","sum","last_seen","p50","p75","p95","type","p99","p100","percentile","dataType","failure_rate","apdex","generateDefaultValue","parameter","organization","apdexThreshold","toString","user_misery","eps","epm","assert","FIELDS","ID","TIMESTAMP","TIME","CULPRIT","LOCATION","MESSAGE","PLATFORM_NAME","ENVIRONMENT","RELEASE","DIST","TITLE","EVENT_TYPE","TRANSACTION","USER","USER_ID","USER_EMAIL","USER_USERNAME","USER_IP","SDK_NAME","SDK_VERSION","HTTP_METHOD","HTTP_URL","OS_BUILD","OS_KERNEL_VERSION","DEVICE_NAME","DEVICE_BRAND","DEVICE_LOCALE","DEVICE_UUID","DEVICE_ARCH","DEVICE_BATTERY_LEVEL","DEVICE_ORIENTATION","DEVICE_SIMULATOR","DEVICE_ONLINE","DEVICE_CHARGING","GEO_COUNTRY_CODE","GEO_REGION","GEO_CITY","ERROR_TYPE","ERROR_VALUE","ERROR_MECHANISM","ERROR_HANDLED","STACK_ABS_PATH","STACK_FILENAME","STACK_PACKAGE","STACK_MODULE","STACK_FUNCTION","STACK_IN_APP","STACK_COLNO","STACK_LINENO","STACK_STACK_LEVEL","TRANSACTION_DURATION","TRANSACTION_OP","TRANSACTION_STATUS","TRACE","TRACE_SPAN","TRACE_PARENT_SPAN","PROJECT","ISSUE","FIELD_TAGS","Object","freeze","fromEntries","keys","map","item","key","name","TRACING_FIELDS","AGGREGATE_PATTERN","explodeFieldString","field","results","match","length","function","generateFieldAsString","value","aggregation","slice","filter","i","join","getAggregateAlias","replace","isAggregateField","aggregateOutputType","matches","exec","funcName","aggregate","hasOwnProperty","aggregateMultiPlotType","_value","withTags","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","listenTo","TagStore","getInitialState","tags","getAllTags","onTagsUpdate","this","setState","render","state","props","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","getEventFieldValues","memoize","tag","query","endpointParams","api","projectIdStrings","projectIds","String","fetchTagValues","slug","then","flatten","defined","Error","prepareQuery","cache","clear","prevProps","isEqual","fields","omitTags","functionTags","includes","fieldTags","features","assign","omit","combined","has","values","predefined","getTagList","css","hasRecentSearches","savedSearchType","SavedSearchType","EVENT","onGetTagValues","supportedTags","excludeEnvironment","dropdownClassName","React","PureComponent","withApi","EventsContainer","handleSearch","router","location","push","pathname","getParams","selection","loadOrganizationTags","projects","datetime","children","hookName","renderDisabled","resetParamsOnChange","Body","HeaderTitle","t","StyledSearchBar","placeholder","onSearch","Component","withOrganization","withGlobalSelection","p","theme","gray100","PageHeading","space"],"mappings":"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","file":"EventsContainer.js","sourcesContent":["import {LightWeightOrganization} from 'app/types';\nimport {assert} from 'app/types/utils';\n\nexport type Sort = {\n  kind: 'asc' | 'desc';\n  field: string;\n};\n\n// Contains the URL field value & the related table column width.\n// Can be parsed into a Column using explodeField()\nexport type Field = {\n  field: string;\n  width?: number;\n};\n\nexport type ColumnType =\n  | 'boolean'\n  | 'date'\n  | 'duration'\n  | 'integer'\n  | 'number'\n  | 'percentage'\n  | 'string';\n\nexport type ColumnValueType = ColumnType | 'never'; // Matches to nothing\n\nexport type AggregateParameter =\n  | {\n      kind: 'column';\n      columnTypes: Readonly<ColumnType[]>;\n      defaultValue?: string;\n      required: boolean;\n    }\n  | {\n      kind: 'value';\n      dataType: ColumnType;\n      defaultValue?: string;\n      required: boolean;\n    };\n\nexport type AggregationRefinement = string | undefined;\n\n// The parsed result of a Field.\n// Functions and Fields are handled as subtypes to enable other\n// code to work more simply.\n// This type can be converted into a Field.field using generateFieldAsString()\nexport type QueryFieldValue =\n  | {\n      kind: 'field';\n      field: string;\n    }\n  | {\n      kind: 'function';\n      function: [AggregationKey, string, AggregationRefinement];\n    };\n\n// Column is just an alias of a Query value\nexport type Column = QueryFieldValue;\n\n// Refer to src/sentry/api/event_search.py\nexport const AGGREGATIONS = {\n  count: {\n    parameters: [],\n    outputType: 'number',\n    isSortable: true,\n    multiPlotType: 'area',\n  },\n  count_unique: {\n    parameters: [\n      {\n        kind: 'column',\n        columnTypes: ['string', 'integer', 'number', 'duration', 'date', 'boolean'],\n        required: true,\n      },\n    ],\n    outputType: 'number',\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  min: {\n    parameters: [\n      {\n        kind: 'column',\n        columnTypes: ['integer', 'number', 'duration', 'date'],\n        required: true,\n      },\n    ],\n    outputType: null,\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  max: {\n    parameters: [\n      {\n        kind: 'column',\n        columnTypes: ['integer', 'number', 'duration', 'date'],\n        required: true,\n      },\n    ],\n    outputType: null,\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  avg: {\n    parameters: [\n      {\n        kind: 'column',\n        columnTypes: ['duration'],\n        defaultValue: 'transaction.duration',\n        required: true,\n      },\n    ],\n    outputType: null,\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  sum: {\n    parameters: [\n      {\n        kind: 'column',\n        columnTypes: ['duration'],\n        required: true,\n      },\n    ],\n    outputType: null,\n    isSortable: true,\n    multiPlotType: 'area',\n  },\n  last_seen: {\n    parameters: [],\n    outputType: 'date',\n    isSortable: true,\n    multiPlotType: 'area',\n  },\n\n  // Tracing functions.\n  p50: {\n    parameters: [],\n    outputType: 'duration',\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  p75: {\n    parameters: [],\n    outputType: 'duration',\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  p95: {\n    parameters: [],\n    outputType: 'duration',\n    type: [],\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  p99: {\n    parameters: [],\n    outputType: 'duration',\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  p100: {\n    parameters: [],\n    outputType: 'duration',\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  percentile: {\n    parameters: [\n      {\n        kind: 'column',\n        columnTypes: ['duration'],\n        defaultValue: 'transaction.duration',\n        required: true,\n      },\n      {\n        kind: 'value',\n        dataType: 'number',\n        defaultValue: '0.5',\n        required: true,\n      },\n    ],\n    outputType: null,\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  failure_rate: {\n    parameters: [],\n    outputType: 'percentage',\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  apdex: {\n    generateDefaultValue({parameter, organization}: DefaultValueInputs) {\n      return organization.apdexThreshold?.toString() ?? parameter.defaultValue;\n    },\n    parameters: [\n      {\n        kind: 'value',\n        dataType: 'number',\n        defaultValue: '300',\n        required: true,\n      },\n    ],\n    outputType: 'number',\n    isSortable: true,\n    multiPlotType: 'line',\n  },\n  user_misery: {\n    generateDefaultValue({parameter, organization}: DefaultValueInputs) {\n      return organization.apdexThreshold?.toString() ?? parameter.defaultValue;\n    },\n    parameters: [\n      {\n        kind: 'value',\n        dataType: 'number',\n        defaultValue: '300',\n        required: true,\n      },\n    ],\n    outputType: 'number',\n    isSortable: false,\n    multiPlotType: 'area',\n  },\n  eps: {\n    parameters: [],\n    outputType: 'number',\n    isSortable: true,\n    multiPlotType: 'area',\n  },\n  epm: {\n    parameters: [],\n    outputType: 'number',\n    isSortable: true,\n    multiPlotType: 'area',\n  },\n} as const;\n\nassert(AGGREGATIONS as Readonly<{[key in keyof typeof AGGREGATIONS]: Aggregation}>);\n\nexport type AggregationKey = keyof typeof AGGREGATIONS | '';\n\nexport type AggregationOutputType = Extract<\n  ColumnType,\n  'number' | 'integer' | 'date' | 'duration' | 'percentage'\n>;\n\nexport type PlotType = 'line' | 'area';\n\ntype DefaultValueInputs = {\n  parameter: AggregateParameter;\n  organization: LightWeightOrganization;\n};\n\nexport type Aggregation = {\n  /**\n   * Used by functions that need to define their default values dynamically\n   * based on the organization, or parameter data.\n   */\n  generateDefaultValue?: (data: DefaultValueInputs) => string;\n  /**\n   * List of parameters for the function.\n   */\n  parameters: Readonly<AggregateParameter[]>;\n  /**\n   * The output type. Null means to inherit from the field.\n   */\n  outputType: AggregationOutputType | null;\n  /**\n   * Can this function be used in a sort result\n   */\n  isSortable: boolean;\n  /**\n   * How this function should be plotted when shown in a multiseries result (top5)\n   */\n  multiPlotType: PlotType;\n};\n\nenum FieldKey {\n  CULPRIT = 'culprit',\n  DEVICE_ARCH = 'device.arch',\n  DEVICE_BATTERY_LEVEL = 'device.battery_level',\n  DEVICE_BRAND = 'device.brand',\n  DEVICE_CHARGING = 'device.charging',\n  DEVICE_LOCALE = 'device.locale',\n  DEVICE_NAME = 'device.name',\n  DEVICE_ONLINE = 'device.online',\n  DEVICE_ORIENTATION = 'device.orientation',\n  DEVICE_SIMULATOR = 'device.simulator',\n  DEVICE_UUID = 'device.uuid',\n  DIST = 'dist',\n  ENVIRONMENT = 'environment',\n  ERROR_HANDLED = 'error.handled',\n  ERROR_MECHANISM = 'error.mechanism',\n  ERROR_TYPE = 'error.type',\n  ERROR_VALUE = 'error.value',\n  EVENT_TYPE = 'event.type',\n  GEO_CITY = 'geo.city',\n  GEO_COUNTRY_CODE = 'geo.country_code',\n  GEO_REGION = 'geo.region',\n  HTTP_METHOD = 'http.method',\n  HTTP_URL = 'http.url',\n  ID = 'id',\n  ISSUE = 'issue',\n  LOCATION = 'location',\n  MESSAGE = 'message',\n  OS_BUILD = 'os.build',\n  OS_KERNEL_VERSION = 'os.kernel_version',\n  PLATFORM_NAME = 'platform.name',\n  PROJECT = 'project',\n  RELEASE = 'release',\n  SDK_NAME = 'sdk.name',\n  SDK_VERSION = 'sdk.version',\n  STACK_ABS_PATH = 'stack.abs_path',\n  STACK_COLNO = 'stack.colno',\n  STACK_FILENAME = 'stack.filename',\n  STACK_FUNCTION = 'stack.function',\n  STACK_IN_APP = 'stack.in_app',\n  STACK_LINENO = 'stack.lineno',\n  STACK_MODULE = 'stack.module',\n  STACK_PACKAGE = 'stack.package',\n  STACK_STACK_LEVEL = 'stack.stack_level',\n  TIME = 'time',\n  TIMESTAMP = 'timestamp',\n  TITLE = 'title',\n  TRACE = 'trace',\n  TRACE_PARENT_SPAN = 'trace.parent_span',\n  TRACE_SPAN = 'trace.span',\n  TRANSACTION = 'transaction',\n  TRANSACTION_DURATION = 'transaction.duration',\n  TRANSACTION_OP = 'transaction.op',\n  TRANSACTION_STATUS = 'transaction.status',\n  USER = 'user',\n  USER_EMAIL = 'user.email',\n  USER_ID = 'user.id',\n  USER_IP = 'user.ip',\n  USER_USERNAME = 'user.username',\n}\n\n/**\n * Refer to src/sentry/snuba/events.py, search for Columns\n */\nexport const FIELDS: Readonly<Record<FieldKey, ColumnType>> = {\n  [FieldKey.ID]: 'string',\n  // issue.id and project.id are omitted on purpose.\n  // Customers should use `issue` and `project` instead.\n  [FieldKey.TIMESTAMP]: 'date',\n  [FieldKey.TIME]: 'date',\n\n  [FieldKey.CULPRIT]: 'string',\n  [FieldKey.LOCATION]: 'string',\n  [FieldKey.MESSAGE]: 'string',\n  [FieldKey.PLATFORM_NAME]: 'string',\n  [FieldKey.ENVIRONMENT]: 'string',\n  [FieldKey.RELEASE]: 'string',\n  [FieldKey.DIST]: 'string',\n  [FieldKey.TITLE]: 'string',\n  [FieldKey.EVENT_TYPE]: 'string',\n  // tags.key and tags.value are omitted on purpose as well.\n\n  [FieldKey.TRANSACTION]: 'string',\n  [FieldKey.USER]: 'string',\n  [FieldKey.USER_ID]: 'string',\n  [FieldKey.USER_EMAIL]: 'string',\n  [FieldKey.USER_USERNAME]: 'string',\n  [FieldKey.USER_IP]: 'string',\n  [FieldKey.SDK_NAME]: 'string',\n  [FieldKey.SDK_VERSION]: 'string',\n  [FieldKey.HTTP_METHOD]: 'string',\n  [FieldKey.HTTP_URL]: 'string',\n  [FieldKey.OS_BUILD]: 'string',\n  [FieldKey.OS_KERNEL_VERSION]: 'string',\n  [FieldKey.DEVICE_NAME]: 'string',\n  [FieldKey.DEVICE_BRAND]: 'string',\n  [FieldKey.DEVICE_LOCALE]: 'string',\n  [FieldKey.DEVICE_UUID]: 'string',\n  [FieldKey.DEVICE_ARCH]: 'string',\n  [FieldKey.DEVICE_BATTERY_LEVEL]: 'number',\n  [FieldKey.DEVICE_ORIENTATION]: 'string',\n  [FieldKey.DEVICE_SIMULATOR]: 'boolean',\n  [FieldKey.DEVICE_ONLINE]: 'boolean',\n  [FieldKey.DEVICE_CHARGING]: 'boolean',\n  [FieldKey.GEO_COUNTRY_CODE]: 'string',\n  [FieldKey.GEO_REGION]: 'string',\n  [FieldKey.GEO_CITY]: 'string',\n  [FieldKey.ERROR_TYPE]: 'string',\n  [FieldKey.ERROR_VALUE]: 'string',\n  [FieldKey.ERROR_MECHANISM]: 'string',\n  [FieldKey.ERROR_HANDLED]: 'boolean',\n  [FieldKey.STACK_ABS_PATH]: 'string',\n  [FieldKey.STACK_FILENAME]: 'string',\n  [FieldKey.STACK_PACKAGE]: 'string',\n  [FieldKey.STACK_MODULE]: 'string',\n  [FieldKey.STACK_FUNCTION]: 'string',\n  [FieldKey.STACK_IN_APP]: 'boolean',\n  [FieldKey.STACK_COLNO]: 'number',\n  [FieldKey.STACK_LINENO]: 'number',\n  [FieldKey.STACK_STACK_LEVEL]: 'number',\n  // contexts.key and contexts.value omitted on purpose.\n\n  // Transaction event fields.\n  [FieldKey.TRANSACTION_DURATION]: 'duration',\n  [FieldKey.TRANSACTION_OP]: 'string',\n  [FieldKey.TRANSACTION_STATUS]: 'string',\n\n  [FieldKey.TRACE]: 'string',\n  [FieldKey.TRACE_SPAN]: 'string',\n  [FieldKey.TRACE_PARENT_SPAN]: 'string',\n\n  // Field alises defined in src/sentry/api/event_search.py\n  [FieldKey.PROJECT]: 'string',\n  [FieldKey.ISSUE]: 'string',\n};\n\nexport type FieldTag = {\n  key: FieldKey;\n  name: FieldKey;\n};\n\nexport const FIELD_TAGS = Object.freeze(\n  Object.fromEntries(Object.keys(FIELDS).map(item => [item, {key: item, name: item}]))\n);\n\n// Allows for a less strict field key definition in cases we are returning custom strings as fields\nexport type LooseFieldKey = FieldKey | string | '';\n\n// This list should be removed with the tranaction-events feature flag.\nexport const TRACING_FIELDS = [\n  'avg',\n  'sum',\n  'transaction.duration',\n  'transaction.op',\n  'transaction.status',\n  'p50',\n  'p75',\n  'p95',\n  'p99',\n  'p100',\n  'percentile',\n  'failure_rate',\n  'apdex',\n  'user_misery',\n  'eps',\n  'epm',\n];\n\nconst AGGREGATE_PATTERN = /^([^\\(]+)\\((.*?)(?:\\s*,\\s*(.*))?\\)$/;\n\nexport function explodeFieldString(field: string): Column {\n  const results = field.match(AGGREGATE_PATTERN);\n\n  if (results && results.length >= 3) {\n    return {\n      kind: 'function',\n      function: [\n        results[1] as AggregationKey,\n        results[2],\n        results[3] as AggregationRefinement,\n      ],\n    };\n  }\n\n  return {kind: 'field', field};\n}\n\nexport function generateFieldAsString(value: QueryFieldValue): string {\n  if (value.kind === 'field') {\n    return value.field;\n  }\n\n  const aggregation = value.function[0];\n  const parameters = value.function.slice(1).filter(i => i);\n  return `${aggregation}(${parameters.join(',')})`;\n}\n\nexport function explodeField(field: Field): Column {\n  const results = explodeFieldString(field.field);\n\n  return results;\n}\n\n/**\n * Get the alias that the API results will have for a given aggregate function name\n */\nexport function getAggregateAlias(field: string): string {\n  if (!field.match(AGGREGATE_PATTERN)) {\n    return field;\n  }\n  return field\n    .replace(AGGREGATE_PATTERN, '$1_$2_$3')\n    .replace(/\\./g, '_')\n    .replace(/\\,/g, '_')\n    .replace(/_+$/, '');\n}\n\n/**\n * Check if a field name looks like an aggregate function or known aggregate alias.\n */\nexport function isAggregateField(field: string): boolean {\n  return field.match(AGGREGATE_PATTERN) !== null;\n}\n\n/**\n * Convert a function string into type it will output.\n * This is useful when you need to format values in tooltips,\n * or in series markers.\n */\nexport function aggregateOutputType(field: string): AggregationOutputType {\n  const matches = AGGREGATE_PATTERN.exec(field);\n  if (!matches) {\n    return 'number';\n  }\n  const funcName = matches[1];\n  const aggregate = AGGREGATIONS[funcName];\n  // Attempt to use the function's outputType. If the function\n  // is an inherit type it will have a field as the first parameter\n  // and we can use that to get the type.\n  if (aggregate && aggregate.outputType) {\n    return aggregate.outputType;\n  } else if (matches[2] && FIELDS.hasOwnProperty(matches[2])) {\n    return FIELDS[matches[2]];\n  }\n  return 'number';\n}\n\n/**\n * Get the multi-series chart type for an aggregate function.\n */\nexport function aggregateMultiPlotType(field: string): PlotType {\n  const matches = AGGREGATE_PATTERN.exec(field);\n  // Handle invalid data.\n  if (!matches) {\n    return 'area';\n  }\n  const funcName = matches[1];\n  if (!AGGREGATIONS.hasOwnProperty(funcName)) {\n    return 'area';\n  }\n  return AGGREGATIONS[funcName].multiPlotType;\n}\n","// from:\n// - https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions\n// - https://www.typescriptlang.org/play/#example/assertion-functions\n\n// This declares a function which asserts that the expression called\n// value is true:\n// eslint-disable-next-line prettier/prettier\nexport function assert(_value: unknown): asserts _value {}\n\n// This declares a function which asserts that the expression called\n// value is of type Type:\n// eslint-disable-next-line prettier/prettier\nexport function assertType<Type>(_value: unknown): asserts _value is Type {}\n","import React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\n\nimport getDisplayName from 'app/utils/getDisplayName';\nimport TagStore from 'app/stores/tagStore';\nimport {TagCollection} from 'app/types';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nconst withTags = <P extends InjectedTagsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTagsProps>, State>({\n    displayName: `withTags(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TagStore, 'onTagsUpdate') as any],\n\n    getInitialState() {\n      return {\n        tags: TagStore.getAllTags(),\n      };\n    },\n\n    onTagsUpdate(tags: TagCollection) {\n      this.setState({\n        tags,\n      });\n    },\n\n    render() {\n      return <WrappedComponent tags={this.state.tags} {...(this.props as P)} />;\n    },\n  });\n\nexport default withTags;\n","import {ClassNames} from '@emotion/core';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';\nimport {defined} from 'app/utils';\nimport {fetchTagValues} from 'app/actionCreators/tags';\nimport SentryTypes from 'app/sentryTypes';\nimport {SavedSearchType, Organization, TagCollection} from 'app/types';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {Field, FIELD_TAGS, TRACING_FIELDS} from 'app/utils/discover/fields';\nimport withApi from 'app/utils/withApi';\nimport withTags from 'app/utils/withTags';\nimport {Client} from 'app/api';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  static propTypes: any = {\n    api: PropTypes.object,\n    organization: SentryTypes.Organization,\n    tags: PropTypes.objectOf(SentryTypes.Tag),\n    omitTags: PropTypes.arrayOf(PropTypes.string.isRequired),\n    projectIds: PropTypes.arrayOf(PropTypes.number.isRequired),\n    fields: PropTypes.arrayOf(PropTypes.object.isRequired) as any,\n  };\n\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList() {\n    const {fields, organization, tags, omitTags} = this.props;\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(item => !Object.keys(FIELD_TAGS).includes(item.field))\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    const tags = this.getTagList();\n    return (\n      <ClassNames>\n        {({css}) => (\n          <SmartSearchBar\n            {...this.props}\n            hasRecentSearches\n            savedSearchType={SavedSearchType.EVENT}\n            onGetTagValues={this.getEventFieldValues}\n            supportedTags={tags}\n            prepareQuery={this.prepareQuery}\n            excludeEnvironment\n            dropdownClassName={css`\n              max-height: 300px;\n              overflow-y: auto;\n            `}\n          />\n        )}\n      </ClassNames>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {loadOrganizationTags} from 'app/actionCreators/tags';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport {t} from 'app/locale';\nimport FeatureBadge from 'app/components/featureBadge';\nimport Feature from 'app/components/acl/feature';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport SentryTypes from 'app/sentryTypes';\nimport PageHeading from 'app/components/pageHeading';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\nimport SearchBar from './searchBar';\n\nclass EventsContainer extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    organization: SentryTypes.Organization,\n    router: PropTypes.object,\n    selection: SentryTypes.GlobalSelection,\n  };\n\n  componentDidMount() {\n    const {api, organization, selection} = this.props;\n    loadOrganizationTags(api, organization.slug, selection);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {api, organization, selection} = this.props;\n    if (\n      !isEqual(prevProps.selection.projects, selection.projects) ||\n      !isEqual(prevProps.selection.datetime, selection.datetime)\n    ) {\n      loadOrganizationTags(api, organization.slug, selection);\n    }\n  }\n\n  handleSearch = query => {\n    const {router, location} = this.props;\n    router.push({\n      pathname: location.pathname,\n      query: getParams({\n        ...(location.query || {}),\n        query,\n      }),\n    });\n  };\n\n  render() {\n    const {organization, location, children, selection} = this.props;\n\n    return (\n      <Feature\n        features={['events']}\n        hookName=\"feature-disabled:events-page\"\n        renderDisabled\n      >\n        <GlobalSelectionHeader resetParamsOnChange={['cursor']}>\n          <PageContent>\n            <LightWeightNoProjectMessage organization={organization}>\n              <Body>\n                <PageHeader>\n                  <HeaderTitle>\n                    {t('Events')} <FeatureBadge type=\"beta\" />\n                  </HeaderTitle>\n                </PageHeader>\n                <div>\n                  <StyledSearchBar\n                    organization={organization}\n                    projectIds={selection.projects}\n                    query={(location.query && location.query.query) || ''}\n                    placeholder={t(\n                      'Search for events, users, tags, and everything else.'\n                    )}\n                    onSearch={this.handleSearch}\n                  />\n                </div>\n                {children}\n              </Body>\n            </LightWeightNoProjectMessage>\n          </PageContent>\n        </GlobalSelectionHeader>\n      </Feature>\n    );\n  }\n}\nexport default withApi(withOrganization(withGlobalSelection(EventsContainer)));\nexport {EventsContainer};\n\nconst Body = styled('div')`\n  background-color: ${p => p.theme.gray100};\n  flex-direction: column;\n  flex: 1;\n`;\n\nconst HeaderTitle = styled(PageHeading)`\n  flex: 1;\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex: 1;\n  margin-bottom: ${space(2)};\n`;\n"],"sourceRoot":""}