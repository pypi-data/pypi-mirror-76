{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/components/switch.tsx","webpack:///./app/components/truncate.tsx","webpack:///./app/views/settings/project/projectServiceHooks.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","Switch","forwardRef","size","isActive","isLoading","isDisabled","toggle","id","name","className","SwitchButton","ref","type","onClick","undefined","role","aria-checked","data-test-id","Toggle","getSize","getToggleSize","getToggleTop","getTranslateX","theme","borderDark","borderLight","green400","gray400","Truncate","state","isExpanded","onFocus","value","maxLength","length","setState","onBlur","leftTrim","isTruncated","shortValue","slice","onMouseOver","onMouseOut","ServiceHookRow","loading","error","orgId","projectId","hook","label","to","url","help","events","join","status","onToggleActive","ProjectServiceHooks","params","addLoadingMessage","t","api","request","method","data","success","clearIndicators","hookList","map","h","addErrorMessage","Fragment","key","bind","body","renderResults","renderEmpty","access","Set","context","organization","has","priority","isCircled","contextTypes","PropTypes","object","isRequired"],"mappings":"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","file":"ProjectServiceHooks.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  forwardRef?: React.Ref<HTMLButtonElement>;\n  className?: string;\n  id?: string;\n  name?: string;\n  size?: 'sm' | 'lg';\n  isActive?: boolean;\n  isLoading?: boolean;\n  isDisabled?: boolean;\n  toggle: React.HTMLProps<HTMLButtonElement>['onClick'];\n};\n\nconst Switch = ({\n  forwardRef,\n  size = 'sm',\n  isActive,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n}: Props) => (\n  <SwitchButton\n    ref={forwardRef}\n    id={id}\n    name={name}\n    type=\"button\"\n    className={className}\n    onClick={isDisabled ? undefined : toggle}\n    role=\"checkbox\"\n    aria-checked={isActive}\n    isLoading={isLoading}\n    isDisabled={isDisabled}\n    isActive={isActive}\n    size={size}\n    data-test-id=\"switch\"\n  >\n    <Toggle isDisabled={isDisabled} isActive={isActive} size={size} />\n  </SwitchButton>\n);\n\nSwitch.propTypes = {\n  id: PropTypes.string,\n  forwardRef: PropTypes.any,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  isActive: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  toggle: PropTypes.func.isRequired,\n};\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 6 : 10);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 2 : 4);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => (p.isActive ? p.theme.borderDark : p.theme.borderLight)};\n  position: relative;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  transition: 0.15s border ease;\n  cursor: ${p => (p.isLoading || p.isDisabled ? 'not-allowed' : 'pointer')};\n  pointer-events: ${p => (p.isLoading || p.isDisabled ? 'none' : null)};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 2}px;\n  border-radius: ${getSize}px;\n\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: ${p => p.theme.borderDark};\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p => (p.isActive ? p.theme.green400 : p.theme.gray400)};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default React.forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardRef={ref} />\n));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\ntype DefaultProps = {\n  maxLength: number;\n  leftTrim: boolean;\n};\n\ntype Props = DefaultProps & {\n  value: string;\n  className?: string;\n};\n\ntype State = {\n  isExpanded: boolean;\n};\n\nclass Truncate extends React.Component<Props, State> {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    leftTrim: PropTypes.bool,\n    maxLength: PropTypes.number,\n  };\n\n  static defaultProps: DefaultProps = {\n    maxLength: 50,\n    leftTrim: false,\n  };\n\n  state = {\n    isExpanded: false,\n  };\n\n  onFocus = () => {\n    const {value, maxLength} = this.props;\n    if (value.length <= maxLength) {\n      return;\n    }\n    this.setState({isExpanded: true});\n  };\n\n  onBlur = () => {\n    if (this.state.isExpanded) {\n      this.setState({isExpanded: false});\n    }\n  };\n\n  render() {\n    const {leftTrim, maxLength, value} = this.props;\n    const isTruncated = value.length > maxLength;\n    let shortValue: React.ReactNode = '';\n\n    if (isTruncated) {\n      if (leftTrim) {\n        shortValue = (\n          <span>… {value.slice(value.length - (maxLength - 4), value.length)}</span>\n        );\n      } else {\n        shortValue = <span>{value.slice(0, maxLength - 4)} …</span>;\n      }\n    } else {\n      shortValue = value;\n    }\n\n    let className = this.props.className || '';\n    className += ' truncated';\n    if (this.state.isExpanded) {\n      className += ' expanded';\n    }\n\n    return (\n      <span\n        className={className}\n        onMouseOver={this.onFocus}\n        onMouseOut={this.onBlur}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n      >\n        <span className=\"short-value\">{shortValue}</span>\n        {isTruncated && <span className=\"full-value\">{value}</span>}\n      </span>\n    );\n  }\n}\n\nexport default Truncate;\n","import {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Switch from 'app/components/switch';\nimport Truncate from 'app/components/truncate';\nimport {IconAdd, IconFlag} from 'app/icons';\n\nclass ServiceHookRow extends React.Component {\n  static propTypes = {\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n    hook: PropTypes.object.isRequired,\n    onToggleActive: PropTypes.func.isRequired,\n  };\n\n  state = {\n    loading: false,\n    error: false,\n  };\n\n  render() {\n    const {orgId, projectId, hook} = this.props;\n    return (\n      <Field\n        label={\n          <Link to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}>\n            <Truncate value={hook.url} />\n          </Link>\n        }\n        help={\n          hook.events && hook.events.length !== 0 ? (\n            <small>{hook.events.join(', ')}</small>\n          ) : (\n            <small>\n              <em>no events configured</em>\n            </small>\n          )\n        }\n      >\n        <Switch\n          isActive={hook.status === 'active'}\n          size=\"lg\"\n          toggle={this.props.onToggleActive}\n        />\n      </Field>\n    );\n  }\n}\n\nexport default class ProjectServiceHooks extends AsyncView {\n  static contextTypes = {\n    organization: PropTypes.object.isRequired,\n  };\n\n  getEndpoints() {\n    const {orgId, projectId} = this.props.params;\n    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = hook => {\n    const {orgId, projectId} = this.props.params;\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {\n      method: 'PUT',\n      data: {\n        isActive: hook.status !== 'active',\n      },\n      success: data => {\n        clearIndicators();\n        const hookList = this.state.hookList.map(h => {\n          if (h.id === data.id) {\n            return {\n              ...h,\n              ...data,\n            };\n          }\n          return h;\n        });\n        this.setState({hookList});\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <React.Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" icon={<IconFlag size=\"md\" />}>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={orgId}\n              projectId={projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    let body;\n    if (this.state.hookList.length > 0) {\n      body = this.renderResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    const {orgId, projectId} = this.props.params;\n    const access = new Set(this.context.organization.access);\n\n    return (\n      <div className=\"ref-project-service-hooks\">\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${orgId}/projects/${projectId}/hooks/new/`}\n                size=\"small\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}