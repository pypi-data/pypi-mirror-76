# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['unihan_etl']

package_data = \
{'': ['*']}

install_requires = \
['appdirs', 'unicodecsv', 'zhon']

entry_points = \
{'console_scripts': ['unihan-etl = unihan_etl.__main__:run']}

setup_kwargs = {
    'name': 'unihan-etl',
    'version': '0.11.0a2',
    'description': 'Export UNIHAN to Python, Data Package, CSV, JSON and YAML',
    'long_description': '*unihan-etl* - `ETL`_ tool for Unicode\'s Han Unification (`UNIHAN`_) database\nreleases. unihan-etl retrieves (downloads), extracts (unzips), and transforms the\ndatabase from Unicode\'s website to a flat, tabular or structured, tree-like\nformat.\n\nunihan-etl can be used as a python library through its `API`_, to retrieve data\nas a python object, or through the `CLI`_ to retrieve a CSV, JSON, or YAML file.\n\nPart of the `cihai`_ project. Similar project: `libUnihan <http://libunihan.sourceforge.net/>`_.\n\nUNIHAN Version compatibility (as of unihan-etl v0.10.0):\n`11.0.0 <https://www.unicode.org/reports/tr38/tr38-25.html#History>`__\n(released 2018-05-08, revision 25).\n\n|pypi| |docs| |build-status| |coverage| |license|\n\n`UNIHAN`_\'s data is dispersed across multiple files in the format of::\n\n    U+3400\tkCantonese\tjau1\n    U+3400\tkDefinition\t(same as U+4E18 丘) hillock or mound\n    U+3400\tkMandarin\tqiū\n    U+3401\tkCantonese\ttim2\n    U+3401\tkDefinition\tto lick; to taste, a mat, bamboo bark\n    U+3401\tkHanyuPinyin\t10019.020:tiàn\n    U+3401\tkMandarin\ttiàn\n\nValues vary in shape and structure depending on their field type.\n`kHanyuPinyin <http://www.unicode.org/reports/tr38/#kHanyuPinyin>`_\nmaps Unicode codepoints to `Hànyǔ Dà Zìdiǎn <https://en.wikipedia.org/wiki/Hanyu_Da_Zidian>`_,\nwhere ``10019.020:tiàn`` represents an entry. Complicating it further,\nmore variations::\n\n    U+5EFE\tkHanyuPinyin\t10513.110,10514.010,10514.020:gǒng\n    U+5364\tkHanyuPinyin\t10093.130:xī,lǔ 74609.020:lǔ,xī\n\n*kHanyuPinyin* supports multiple entries delimited by spaces. ":"\n(colon) separate locations in the work from pinyin readings. ","\n(comma) separate multiple entries/readings. This is just one of 90 \nfields contained in the database.\n\n.. _API: https://unihan-etl.git-pull.com/en/latest/api.html\n.. _CLI: https://unihan-etl.git-pull.com/en/latest/cli.html\n\nTabular, "Flat" output\n----------------------\n\nCSV (default), ``$ unihan-etl``::\n\n   char,ucn,kCantonese,kDefinition,kHanyuPinyin,kMandarin\n   㐀,U+3400,jau1,(same as U+4E18 丘) hillock or mound,,qiū\n   㐁,U+3401,tim2,"to lick; to taste, a mat, bamboo bark",10019.020:tiàn,tiàn\n\nWith ``$ unihan-etl -F yaml --no-expand``:\n\n.. code-block:: yaml\n\n   - char: 㐀\n     kCantonese: jau1\n     kDefinition: (same as U+4E18 丘) hillock or mound\n     kHanyuPinyin: null\n     kMandarin: qiū\n     ucn: U+3400\n   - char: 㐁\n     kCantonese: tim2\n     kDefinition: to lick; to taste, a mat, bamboo bark\n     kHanyuPinyin: 10019.020:tiàn\n     kMandarin: tiàn\n     ucn: U+3401\n\nWith ``$ unihan-etl -F json --no-expand``:\n\n.. code-block:: json\n\n   [\n     {\n       "char": "㐀",\n       "ucn": "U+3400",\n       "kDefinition": "(same as U+4E18 丘) hillock or mound",\n       "kCantonese": "jau1",\n       "kHanyuPinyin": null,\n       "kMandarin": "qiū"\n     },\n     {\n       "char": "㐁",\n       "ucn": "U+3401",\n       "kDefinition": "to lick; to taste, a mat, bamboo bark",\n       "kCantonese": "tim2",\n       "kHanyuPinyin": "10019.020:tiàn",\n       "kMandarin": "tiàn"\n     }\n   ]\n\n"Structured" output\n-------------------\n\nCodepoints can pack a lot more detail, unihan-etl carefully extracts these values\nin a uniform manner. Empty values are pruned.\n\nTo make this possible, unihan-etl exports to JSON, YAML, and python\nlist/dicts.\n\n.. admonition:: Why not CSV?\n   \n   Unfortunately, CSV is only suitable for storing table-like \n   information. File formats such as JSON and YAML accept key-values and\n   hierarchical entries.\n\nJSON, ``$ unihan-etl -F json``:\n\n.. code-block:: json\n\n  [\n    {\n      "char": "㐀",\n      "ucn": "U+3400",\n      "kDefinition": [\n        "(same as U+4E18 丘) hillock or mound"\n      ],\n      "kCantonese": [\n        "jau1"\n      ],\n      "kMandarin": {\n        "zh-Hans": "qiū",\n        "zh-Hant": "qiū"\n      }\n    },\n    {\n      "char": "㐁",\n      "ucn": "U+3401",\n      "kDefinition": [\n        "to lick",\n        "to taste, a mat, bamboo bark"\n      ],\n      "kCantonese": [\n        "tim2"\n      ],\n      "kHanyuPinyin": [\n        {\n          "locations": [\n            {\n              "volume": 1,\n              "page": 19,\n              "character": 2,\n              "virtual": 0\n            }\n          ],\n          "readings": [\n            "tiàn"\n          ]\n        }\n      ],\n      "kMandarin": {\n        "zh-Hans": "tiàn",\n        "zh-Hant": "tiàn"\n      }\n    }\n   ]\n\nYAML ``$ unihan-etl -F yaml``:\n\n.. code-block:: yaml\n\n   - char: 㐀\n     kCantonese:\n     - jau1\n     kDefinition:\n     - (same as U+4E18 丘) hillock or mound\n     kMandarin:\n       zh-Hans: qiū\n       zh-Hant: qiū\n     ucn: U+3400\n   - char: 㐁\n     kCantonese:\n     - tim2\n     kDefinition:\n     - to lick\n     - to taste, a mat, bamboo bark\n     kHanyuPinyin:\n     - locations:\n       - character: 2\n         page: 19\n         virtual: 0\n         volume: 1\n       readings:\n       - tiàn\n     kMandarin:\n       zh-Hans: tiàn\n       zh-Hant: tiàn\n     ucn: U+3401\n\n\nFeatures\n--------\n\n* automatically downloads UNIHAN from the internet\n* strives for accuracy with the specifications described in `UNIHAN\'s database\n  design <http://www.unicode.org/reports/tr38/>`_\n* export to JSON, CSV and YAML (requires `pyyaml`_) via ``-F``\n* configurable to export specific fields via ``-f``\n* accounts for encoding conflicts due to the Unicode-heavy content\n* designed as a technical proof for future CJK (Chinese, Japanese,\n  Korean) datasets\n* core component and dependency of `cihai`_, a CJK library\n* `data package`_ support\n* expansion of multi-value delimited fields in YAML, JSON and python\n  dictionaries \n* supports python 2.7, >= 3.5 and pypy\n\nIf you encounter a problem or have a question, please `create an\nissue`_.\n\n.. _cihai: https://cihai.git-pull.com\n.. _cihai-handbook: https://github.com/cihai/cihai-handbook\n.. _cihai team: https://github.com/cihai?tab=members\n.. _cihai-python: https://github.com/cihai/cihai-python\n\nUsage\n-----\n\n``unihan-etl`` offers customizable builds via its command line arguments.\n\nSee `unihan-etl CLI arguments`_ for information on how you can specify \ncolumns, files, download URL\'s, and output destination.\n\nTo download and build your own UNIHAN export:\n\n.. code-block:: bash\n\n   $ pip install --user unihan-etl\n\nTo output CSV, the default format:\n\n.. code-block:: bash\n\n    $ unihan-etl\n\nTo output JSON::\n\n    $ unihan-etl -F json\n\nTo output YAML::\n\n    $ pip install --user pyyaml\n    $ unihan-etl -F yaml\n\nTo only output the kDefinition field in a csv::\n\n    $ unihan-etl -f kDefinition\n\nTo output multiple fields, separate with spaces::\n\n    $ unihan-etl -f kCantonese kDefinition\n\nTo output to a custom file::\n\n    $ unihan-etl --destination ./exported.csv\n\nTo output to a custom file (templated file extension)::\n\n    $ unihan-etl --destination ./exported.{ext}\n\nSee `unihan-etl CLI arguments`_ for advanced usage examples.\n\n.. _unihan-etl CLI arguments: https://unihan-etl.git-pull.com/en/latest/cli.html\n\nCode layout\n-----------\n\n.. code-block:: bash\n\n    # cache dir (Unihan.zip is downloaded, contents extracted)\n    {XDG cache dir}/unihan_etl/\n\n    # output dir\n    {XDG data dir}/unihan_etl/\n      unihan.json\n      unihan.csv\n      unihan.yaml   # (requires pyyaml)\n\n    # package dir\n    unihan_etl/\n      process.py    # argparse, download, extract, transform UNIHAN\'s data\n      constants.py  # immutable data vars (field to filename mappings, etc)\n      expansion.py  # extracting details baked inside of fields\n      _compat.py    # python 2/3 compatibility module\n      util.py       # utility / helper functions\n\n    # test suite\n    tests/*\n\n.. _UNIHAN: http://www.unicode.org/charts/unihan.html\n.. _ETL: https://en.wikipedia.org/wiki/Extract,_transform,_load\n.. _create an issue: https://github.com/cihai/unihan-etl/issues/new\n.. _Data Package: http://frictionlessdata.io/data-packages/\n.. _pyyaml: http://pyyaml.org/\n\n.. |pypi| image:: https://img.shields.io/pypi/v/unihan-etl.svg\n    :alt: Python Package\n    :target: http://badge.fury.io/py/unihan-etl\n\n.. |docs| image:: https://github.com/cihai/unihan-etl/workflows/Publish%20Docs/badge.svg\n   :alt: Docs\n   :target: https://github.com/cihai/unihan-etl/actions?query=workflow%3A"Publish+Docs"\n\n.. |build-status| image:: https://github.com/cihai/unihan-etl/workflows/test/badge.svg\n   :alt: Build Status\n   :target: https://github.com/cihai/unihan-etl/actions?query=workflow%3A"test"\n\n.. |coverage| image:: https://codecov.io/gh/cihai/unihan-etl/branch/master/graph/badge.svg\n    :alt: Code Coverage\n    :target: https://codecov.io/gh/cihai/unihan-etl\n\n.. |license| image:: https://img.shields.io/github/license/cihai/unihan-etl.svg\n    :alt: License \n',
    'author': 'Tony Narlock',
    'author_email': 'tony@git-pull.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://unihan-etl.git-pull.com',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',
}


setup(**setup_kwargs)
