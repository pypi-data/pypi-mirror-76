# coding: utf-8

"""
    ****************************************************************************
    Copyright (c) 2016-present,
    Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.

    This file is part of Catapult.

    Catapult is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Catapult is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Catapult. If not, see <http://www.gnu.org/licenses/>.
    ****************************************************************************
    
    Catapult REST Endpoints
    OpenAPI Specification of catapult-rest 1.2.0  # noqa: E501
    The version of the OpenAPI document: 0.9.6
    Contact: contact@nem.foundation

    NOTE: This file is auto generated by Symbol OpenAPI Generator:
    https://github.com/nemtech/symbol-openapi-generator
    Do not edit this file manually.
"""


import pprint
import re  # noqa: F401

import six

from symbol_openapi_client.configuration import Configuration


class VotingKeyLinkTransactionBodyDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'linked_public_key': 'str',
        'start_point': 'str',
        'end_point': 'str',
        'link_action': 'LinkActionEnum'
    }

    attribute_map = {
        'linked_public_key': 'linkedPublicKey',
        'start_point': 'startPoint',
        'end_point': 'endPoint',
        'link_action': 'linkAction'
    }

    def __init__(self, linked_public_key=None, start_point=None, end_point=None, link_action=None, local_vars_configuration=None):  # noqa: E501
        """VotingKeyLinkTransactionBodyDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._linked_public_key = None
        self._start_point = None
        self._end_point = None
        self._link_action = None
        self.discriminator = None

        self.linked_public_key = linked_public_key
        self.start_point = start_point
        self.end_point = end_point
        self.link_action = link_action

    @property
    def linked_public_key(self):
        """Gets the linked_public_key of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501

        48 bytes voting public key.  # noqa: E501

        :return: The linked_public_key of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501
        :rtype: str
        """
        return self._linked_public_key

    @linked_public_key.setter
    def linked_public_key(self, linked_public_key):
        """Sets the linked_public_key of this VotingKeyLinkTransactionBodyDTO.

        48 bytes voting public key.  # noqa: E501

        :param linked_public_key: The linked_public_key of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and linked_public_key is None:  # noqa: E501
            raise ValueError("Invalid value for `linked_public_key`, must not be `None`")  # noqa: E501

        self._linked_public_key = linked_public_key

    @property
    def start_point(self):
        """Gets the start_point of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501

        Finalization point  # noqa: E501

        :return: The start_point of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501
        :rtype: str
        """
        return self._start_point

    @start_point.setter
    def start_point(self, start_point):
        """Sets the start_point of this VotingKeyLinkTransactionBodyDTO.

        Finalization point  # noqa: E501

        :param start_point: The start_point of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and start_point is None:  # noqa: E501
            raise ValueError("Invalid value for `start_point`, must not be `None`")  # noqa: E501

        self._start_point = start_point

    @property
    def end_point(self):
        """Gets the end_point of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501

        Finalization point  # noqa: E501

        :return: The end_point of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501
        :rtype: str
        """
        return self._end_point

    @end_point.setter
    def end_point(self, end_point):
        """Sets the end_point of this VotingKeyLinkTransactionBodyDTO.

        Finalization point  # noqa: E501

        :param end_point: The end_point of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and end_point is None:  # noqa: E501
            raise ValueError("Invalid value for `end_point`, must not be `None`")  # noqa: E501

        self._end_point = end_point

    @property
    def link_action(self):
        """Gets the link_action of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501


        :return: The link_action of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501
        :rtype: LinkActionEnum
        """
        return self._link_action

    @link_action.setter
    def link_action(self, link_action):
        """Sets the link_action of this VotingKeyLinkTransactionBodyDTO.


        :param link_action: The link_action of this VotingKeyLinkTransactionBodyDTO.  # noqa: E501
        :type: LinkActionEnum
        """
        if self.local_vars_configuration.client_side_validation and link_action is None:  # noqa: E501
            raise ValueError("Invalid value for `link_action`, must not be `None`")  # noqa: E501

        self._link_action = link_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VotingKeyLinkTransactionBodyDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VotingKeyLinkTransactionBodyDTO):
            return True

        return self.to_dict() != other.to_dict()
