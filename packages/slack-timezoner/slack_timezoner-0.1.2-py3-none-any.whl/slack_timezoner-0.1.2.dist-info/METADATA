Metadata-Version: 2.1
Name: slack-timezoner
Version: 0.1.2
Summary: A toy app to give a breakdown of timezone distribution in a slack workgroup
Home-page: https://github.com/mrchrisadams/slack-timezoner
License: Apache-2.0
Author: Chris Adams
Author-email: chris@productscience.co.uk
Requires-Python: >=3.6
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Dist: django (>=3.0.8,<4.0.0)
Requires-Dist: python-dotenv (>=0.14.0,<0.15.0)
Requires-Dist: slackclient (>=2.7.2,<3.0.0)
Project-URL: Repository, https://github.com/mrchrisadams/slack-timezoner
Description-Content-Type: text/markdown

# Slack Timezoner

If you use slack, it's sometimes useful to get an idea of the geographic distribution of members.

And because we're online, while geographic distance is important to know it's often the timezone that's more relevant for working out when might be sensible to contact someone, or see how a commmunity is distributed.

This is what slack timezoner does. Right now all it does is print out a count of members in your community, by timezone.


##Â Usage


1. Create an app for a single slack group
2. Get a Web API token - https://api.slack.com/web#authentication
3. Checkout this code
4. Install dependencies
5. Either use the code programatically, or run it this as a server, to see the JSON output


### Create an app

You need to create an app for a single team. See below for more

https://slack.dev/python-slackclient/auth.html#

You can create an app at the link below:

https://api.slack.com/apps

### Get a web api token

This is detailed in slack's extensive documentation. You need a Web API token

https://api.slack.com/web#authentication

If it helps it should be visible at a link that looks like the pattern below, and it will be called `OAuth Access Token` in the web UI:

https://api.slack.com/apps/YOUR_APP_ID/oauth


### Check out this code

### Use the code programatically, or run the server

This project includes a minimal, single-file Django app, to serve the summary as JSON, to display using some charting or tabular renderer.

```
python ./minimal.py runserver
```

Alternatively, you can also import the library and use it programatically in python code:


```
import slack_timezoner.group_by_timezones

tzc = group_by_timezones.TimeZoneCounter()

# returns a Counter datastructure
res = tzc.summary()

```


### Next steps

This was thrown together in a hurry, and I'd like to adapt this to allow running the same kind of summaries for any public channel in slack workspace.

You can list all the channels in workspace with this API call:
https://api.slack.com/methods/conversations.list


Once you have that, you can get a list of the members like so:
https://api.slack.com/methods/conversations.members

This returns a list of member ids like so:

```
{
    "ok": true,
    "members": [
        "U023BECGF",
        "U061F7AUR",
        "W012A3CDE"
    ],
    "response_metadata": {
        "next_cursor": "e3VzZXJfaWQ6IFcxMjM0NTY3fQ=="
    }
}
```

You can then look up the timezones, with this call to recontruct a datastructure similar to the one used in the TimeZoneCounter already.

https://slack.dev/python-slackclient/basic_usage.html#listing-team-members



### Contributing

This is currently used in the ClimateAction.tech slack. If you're interested in helping out, please file an issue, or join the slack there.


You can join the link below:

https://climateaction.tech/#join





