# Copyright 2019 The FastEstimator Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
from typing import Any, Dict, List, TypeVar

import tensorflow as tf
import torch

import fastestimator as fe
from fastestimator.backend.roll import roll
from fastestimator.op.tensorop.loss.loss import LossOp
from fastestimator.util.util import to_list

Tensor = TypeVar('Tensor', tf.Tensor, torch.Tensor)


class MixLoss(LossOp):
    """Loss class to compute mixiup and cutmix losses.

    This class should be used in conjunction with MixUpBatch and CutMixBatch to perform mix-up training, which helps to reduce
    over-fitting, stabilize GAN training, and harden against adversarial attacks (https://arxiv.org/abs/1710.09412)

    Args:
        loss: A loss object which we use to calculate the underlying loss of MixLoss. This should be an object of type
            fe.op.tensorop.loss.loss.LossOp.
        lam: The key of the lambda value generated by MixUpBatch or CutMixBatch.
        average_loss: Boolean to specify if we should average the loss or not.
    """
    def __init__(self, loss: LossOp, lam: str, average_loss: bool = True):
        self.loss = loss
        self.loss.average_loss = average_loss
        super().__init__(inputs=[lam] + loss.inputs,
                         outputs=loss.outputs,
                         mode=loss.mode,
                         average_loss=self.loss.average_loss)

    def forward(self, data: List[Tensor], state: Dict[str, Any]):
        lam, y_pred, y_true = data

        loss1 = self.loss.forward(list([y_pred, y_true]), state)

        y_true_rolled = roll(y_true, shift=1, axis=0)
        loss2 = self.loss.forward(list([y_pred, y_true_rolled]), state)

        loss = lam * loss1 + (1.0 - lam) * loss2

        if self.average_loss:
            loss = fe.backend.reduce_mean(loss)

        return to_list(loss)
