{
  "description": "Generate a classifier (configurable G/D)",
  "publication": "examples/classification.py",
  "discriminator": 
  {
      "class": "class:hypergan.discriminators.configurable_discriminator.ConfigurableDiscriminator",
      "layers":[
        "identity name=in",
        "layer digit",
        "linear 28*28*1 input_size=10 name=digitup",
        "cat in digitup",
        "conv 64 stride=2 input_channels=2","relu",
        "conv 128 stride=2","relu",
        "conv 256 stride=2","relu",
        "flatten",
        "linear 1024", "relu",
        "multi_head_attention 1"
      ]
  },
  "latent":
  {
    "class": "function:hypergan.distributions.uniform_distribution.UniformDistribution",
    "min": -1,
    "max": 1,
    "z": 100
  },
  "generator": {
    "class": "class:hypergan.discriminators.configurable_discriminator.ConfigurableDiscriminator",
    "layers": [
      "conv 64 stride=2","relu",
      "conv 128 stride=2","relu",
      "conv 256 stride=2","relu",
      "flatten",
      "linear 1024", "relu",
      "multi_head_attention 10"
    ]
  },
  "loss":
  {
    "class": "function:hypergan.losses.standard_loss.StandardLoss"
  },
  "trainer": {
    "class": "function:hypergan.trainers.simultaneous_trainer.SimultaneousTrainer",

    "hooks": [
      {
        "class": "function:hypergan.train_hooks.adversarial_norm_train_hook.AdversarialNormTrainHook",
        "gammas": [-1e9, 1e9],
        "offset": 1.0,
        "loss": [
          "dg"
        ],
        "mode": "fake"
      },
      {
        "class": "function:hypergan.train_hooks.adversarial_norm_train_hook.AdversarialNormTrainHook",
        "gamma": -1e9,
        "offset": 1.0,
        "loss": [
          "d"
        ],
        "mode": "real"
      }
    ],
    "optimizer": {
      "amsgrad": true,
      "betas": [
        0.1,
        0.997
      ],
      "class": "class:torch.optim.Adam",
      "eps": 1e-08,
      "lr": 0.0001,
      "weight_decay": 0
    }
  },
  "hypergan_version": "~1",
  "class": "class:hypergan.gans.standard_gan.StandardGAN"
}
