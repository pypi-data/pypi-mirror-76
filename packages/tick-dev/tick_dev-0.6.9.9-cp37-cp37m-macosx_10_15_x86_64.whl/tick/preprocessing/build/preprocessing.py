# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _preprocessing
else:
    import _preprocessing

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _preprocessing.SHARED_PTR_DISOWN


def to_hex(bytes: 'std::string const &') -> "std::string":
    r"""to_hex(std::string const & bytes) -> std::string"""
    return _preprocessing.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    r"""to_bytes(std::string const & hex) -> std::string"""
    return _preprocessing.to_bytes(hex)
import tick.base
import tick.array.build.array
class SparseLongitudinalFeaturesProduct(object):
    r"""Proxy of C++ SparseLongitudinalFeaturesProduct class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtrList1D const &'):
        r"""__init__(SparseLongitudinalFeaturesProduct self, SBaseArrayDouble2dPtrList1D const & features) -> SparseLongitudinalFeaturesProduct"""
        _preprocessing.SparseLongitudinalFeaturesProduct_swiginit(self, _preprocessing.new_SparseLongitudinalFeaturesProduct(features))

    def sparse_features_product(self, row: 'ArrayULong &', col: 'ArrayULong &', data: 'ArrayDouble &', out_row: 'ArrayULong &', out_col: 'ArrayULong &', out_data: 'ArrayDouble &') -> "void":
        r"""sparse_features_product(SparseLongitudinalFeaturesProduct self, ArrayULong & row, ArrayULong & col, ArrayDouble & data, ArrayULong & out_row, ArrayULong & out_col, ArrayDouble & out_data)"""
        return _preprocessing.SparseLongitudinalFeaturesProduct_sparse_features_product(self, row, col, data, out_row, out_col, out_data)

    def __getstate__(self): return SparseLongitudinalFeaturesProductSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SparseLongitudinalFeaturesProductDeserialize(self, s)

    __swig_destroy__ = _preprocessing.delete_SparseLongitudinalFeaturesProduct

# Register SparseLongitudinalFeaturesProduct in _preprocessing:
_preprocessing.SparseLongitudinalFeaturesProduct_swigregister(SparseLongitudinalFeaturesProduct)


def SparseLongitudinalFeaturesProductDeserialize(ptr: 'SparseLongitudinalFeaturesProduct', hex: 'std::string const &') -> "void":
    r"""SparseLongitudinalFeaturesProductDeserialize(SparseLongitudinalFeaturesProduct ptr, std::string const & hex)"""
    return _preprocessing.SparseLongitudinalFeaturesProductDeserialize(ptr, hex)

def SparseLongitudinalFeaturesProductSerialize(ptr: 'SparseLongitudinalFeaturesProduct') -> "std::string":
    r"""SparseLongitudinalFeaturesProductSerialize(SparseLongitudinalFeaturesProduct ptr) -> std::string"""
    return _preprocessing.SparseLongitudinalFeaturesProductSerialize(ptr)
class LongitudinalFeaturesLagger(object):
    r"""Proxy of C++ LongitudinalFeaturesLagger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtrList1D const &', n_lags: 'SArrayULongPtr const'):
        r"""__init__(LongitudinalFeaturesLagger self, SBaseArrayDouble2dPtrList1D const & features, SArrayULongPtr const n_lags) -> LongitudinalFeaturesLagger"""
        _preprocessing.LongitudinalFeaturesLagger_swiginit(self, _preprocessing.new_LongitudinalFeaturesLagger(features, n_lags))

    def dense_lag_preprocessor(self, features: 'ArrayDouble2d &', out: 'ArrayDouble2d &', censoring: 'ulong') -> "void":
        r"""dense_lag_preprocessor(LongitudinalFeaturesLagger self, ArrayDouble2d & features, ArrayDouble2d & out, ulong censoring)"""
        return _preprocessing.LongitudinalFeaturesLagger_dense_lag_preprocessor(self, features, out, censoring)

    def sparse_lag_preprocessor(self, row: 'ArrayULong &', col: 'ArrayULong &', data: 'ArrayDouble &', out_row: 'ArrayULong &', out_col: 'ArrayULong &', out_data: 'ArrayDouble &', censoring: 'ulong') -> "void":
        r"""sparse_lag_preprocessor(LongitudinalFeaturesLagger self, ArrayULong & row, ArrayULong & col, ArrayDouble & data, ArrayULong & out_row, ArrayULong & out_col, ArrayDouble & out_data, ulong censoring)"""
        return _preprocessing.LongitudinalFeaturesLagger_sparse_lag_preprocessor(self, row, col, data, out_row, out_col, out_data, censoring)

    def __getstate__(self): return LongitudinalFeaturesLaggerSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return LongitudinalFeaturesLaggerDeserialize(self, s)

    __swig_destroy__ = _preprocessing.delete_LongitudinalFeaturesLagger

# Register LongitudinalFeaturesLagger in _preprocessing:
_preprocessing.LongitudinalFeaturesLagger_swigregister(LongitudinalFeaturesLagger)


def LongitudinalFeaturesLaggerDeserialize(ptr: 'LongitudinalFeaturesLagger', hex: 'std::string const &') -> "void":
    r"""LongitudinalFeaturesLaggerDeserialize(LongitudinalFeaturesLagger ptr, std::string const & hex)"""
    return _preprocessing.LongitudinalFeaturesLaggerDeserialize(ptr, hex)

def LongitudinalFeaturesLaggerSerialize(ptr: 'LongitudinalFeaturesLagger') -> "std::string":
    r"""LongitudinalFeaturesLaggerSerialize(LongitudinalFeaturesLagger ptr) -> std::string"""
    return _preprocessing.LongitudinalFeaturesLaggerSerialize(ptr)


