# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _base_model
else:
    import _base_model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def to_hex(bytes: 'std::string const &') -> "std::string":
    r"""to_hex(std::string const & bytes) -> std::string"""
    return _base_model.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    r"""to_bytes(std::string const & hex) -> std::string"""
    return _base_model.to_bytes(hex)
SHARED_PTR_DISOWN = _base_model.SHARED_PTR_DISOWN

import tick.base
import tick.array.build.array
class Model(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Model self) -> Model"""
        _base_model.Model_swiginit(self, _base_model.new_Model())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _base_model.Model_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _base_model.Model_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(Model self) -> unsigned long"""
        return _base_model.Model_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(Model self) -> bool"""
        return _base_model.Model_is_sparse(self)
    __swig_destroy__ = _base_model.delete_Model

# Register Model in _base_model:
_base_model.Model_swigregister(Model)

class ModelDouble(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelDouble self) -> ModelDouble"""
        _base_model.ModelDouble_swiginit(self, _base_model.new_ModelDouble())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _base_model.ModelDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _base_model.ModelDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelDouble self) -> unsigned long"""
        return _base_model.ModelDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelDouble self) -> bool"""
        return _base_model.ModelDouble_is_sparse(self)
    __swig_destroy__ = _base_model.delete_ModelDouble

# Register ModelDouble in _base_model:
_base_model.ModelDouble_swigregister(ModelDouble)

class ModelFloat(object):
    r"""Proxy of C++ TModel< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelFloat self) -> ModelFloat"""
        _base_model.ModelFloat_swiginit(self, _base_model.new_ModelFloat())

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _base_model.ModelFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        r"""loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _base_model.ModelFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelFloat self) -> unsigned long"""
        return _base_model.ModelFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelFloat self) -> bool"""
        return _base_model.ModelFloat_is_sparse(self)
    __swig_destroy__ = _base_model.delete_ModelFloat

# Register ModelFloat in _base_model:
_base_model.ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(object):
    r"""Proxy of C++ TModel< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicDouble self) -> ModelAtomicDouble"""
        _base_model.ModelAtomicDouble_swiginit(self, _base_model.new_ModelAtomicDouble())

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _base_model.ModelAtomicDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        r"""loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _base_model.ModelAtomicDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _base_model.ModelAtomicDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicDouble self) -> bool"""
        return _base_model.ModelAtomicDouble_is_sparse(self)
    __swig_destroy__ = _base_model.delete_ModelAtomicDouble

# Register ModelAtomicDouble in _base_model:
_base_model.ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(object):
    r"""Proxy of C++ TModel< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicFloat self) -> ModelAtomicFloat"""
        _base_model.ModelAtomicFloat_swiginit(self, _base_model.new_ModelAtomicFloat())

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _base_model.ModelAtomicFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        r"""loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _base_model.ModelAtomicFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _base_model.ModelAtomicFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicFloat self) -> bool"""
        return _base_model.ModelAtomicFloat_is_sparse(self)
    __swig_destroy__ = _base_model.delete_ModelAtomicFloat

# Register ModelAtomicFloat in _base_model:
_base_model.ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    r"""Proxy of C++ TModelLabelsFeatures< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        _base_model.ModelLabelsFeaturesDouble_swiginit(self, _base_model.new_ModelLabelsFeaturesDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesDouble_get_n_features(self)
    __swig_destroy__ = _base_model.delete_ModelLabelsFeaturesDouble

# Register ModelLabelsFeaturesDouble in _base_model:
_base_model.ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        _base_model.ModelLabelsFeaturesFloat_swiginit(self, _base_model.new_ModelLabelsFeaturesFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesFloat_get_n_features(self)
    __swig_destroy__ = _base_model.delete_ModelLabelsFeaturesFloat

# Register ModelLabelsFeaturesFloat in _base_model:
_base_model.ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLabelsFeatures< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        _base_model.ModelLabelsFeaturesAtomicDouble_swiginit(self, _base_model.new_ModelLabelsFeaturesAtomicDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesAtomicDouble_get_n_features(self)
    __swig_destroy__ = _base_model.delete_ModelLabelsFeaturesAtomicDouble

# Register ModelLabelsFeaturesAtomicDouble in _base_model:
_base_model.ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        _base_model.ModelLabelsFeaturesAtomicFloat_swiginit(self, _base_model.new_ModelLabelsFeaturesAtomicFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _base_model.ModelLabelsFeaturesAtomicFloat_get_n_features(self)
    __swig_destroy__ = _base_model.delete_ModelLabelsFeaturesAtomicFloat

# Register ModelLabelsFeaturesAtomicFloat in _base_model:
_base_model.ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitz self) -> ModelLipschitz"""
        _base_model.ModelLipschitz_swiginit(self, _base_model.new_ModelLipschitz())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitz self) -> double"""
        return _base_model.ModelLipschitz_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitz self) -> double"""
        return _base_model.ModelLipschitz_get_lip_mean(self)
    __swig_destroy__ = _base_model.delete_ModelLipschitz

# Register ModelLipschitz in _base_model:
_base_model.ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzDouble self) -> ModelLipschitzDouble"""
        _base_model.ModelLipschitzDouble_swiginit(self, _base_model.new_ModelLipschitzDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzDouble self) -> double"""
        return _base_model.ModelLipschitzDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _base_model.ModelLipschitzDouble_get_lip_mean(self)
    __swig_destroy__ = _base_model.delete_ModelLipschitzDouble

# Register ModelLipschitzDouble in _base_model:
_base_model.ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    r"""Proxy of C++ TModelLipschitz< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzFloat self) -> ModelLipschitzFloat"""
        _base_model.ModelLipschitzFloat_swiginit(self, _base_model.new_ModelLipschitzFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzFloat self) -> float"""
        return _base_model.ModelLipschitzFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _base_model.ModelLipschitzFloat_get_lip_mean(self)
    __swig_destroy__ = _base_model.delete_ModelLipschitzFloat

# Register ModelLipschitzFloat in _base_model:
_base_model.ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLipschitz< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicDouble self) -> ModelLipschitzAtomicDouble"""
        _base_model.ModelLipschitzAtomicDouble_swiginit(self, _base_model.new_ModelLipschitzAtomicDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _base_model.ModelLipschitzAtomicDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _base_model.ModelLipschitzAtomicDouble_get_lip_mean(self)
    __swig_destroy__ = _base_model.delete_ModelLipschitzAtomicDouble

# Register ModelLipschitzAtomicDouble in _base_model:
_base_model.ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLipschitz< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicFloat self) -> ModelLipschitzAtomicFloat"""
        _base_model.ModelLipschitzAtomicFloat_swiginit(self, _base_model.new_ModelLipschitzAtomicFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _base_model.ModelLipschitzAtomicFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _base_model.ModelLipschitzAtomicFloat_get_lip_mean(self)
    __swig_destroy__ = _base_model.delete_ModelLipschitzAtomicFloat

# Register ModelLipschitzAtomicFloat in _base_model:
_base_model.ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble"""
        _base_model.ModelGeneralizedLinearDouble_swiginit(self, _base_model.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _base_model.ModelGeneralizedLinearDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _base_model.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _base_model.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _base_model.delete_ModelGeneralizedLinearDouble

# Register ModelGeneralizedLinearDouble in _base_model:
_base_model.ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat"""
        _base_model.ModelGeneralizedLinearFloat_swiginit(self, _base_model.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _base_model.ModelGeneralizedLinearFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _base_model.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _base_model.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _base_model.delete_ModelGeneralizedLinearFloat

# Register ModelGeneralizedLinearFloat in _base_model:
_base_model.ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble"""
        _base_model.ModelGeneralizedLinearAtomicDouble_swiginit(self, _base_model.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _base_model.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _base_model.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _base_model.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _base_model.delete_ModelGeneralizedLinearAtomicDouble

# Register ModelGeneralizedLinearAtomicDouble in _base_model:
_base_model.ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat"""
        _base_model.ModelGeneralizedLinearAtomicFloat_swiginit(self, _base_model.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _base_model.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _base_model.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _base_model.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _base_model.delete_ModelGeneralizedLinearAtomicFloat

# Register ModelGeneralizedLinearAtomicFloat in _base_model:
_base_model.ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)



