# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _array
else:
    import _array

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _array.SHARED_PTR_DISOWN


def tick_float_array_to_file(_file: 'std::string', array: 'ArrayFloat const &') -> "void":
    r"""tick_float_array_to_file(std::string _file, ArrayFloat const & array)"""
    return _array.tick_float_array_to_file(_file, array)

def tick_double_array_to_file(_file: 'std::string', array: 'ArrayDouble const &') -> "void":
    r"""tick_double_array_to_file(std::string _file, ArrayDouble const & array)"""
    return _array.tick_double_array_to_file(_file, array)

def tick_float_array_from_file(_file: 'std::string') -> "SArrayFloatPtr":
    r"""tick_float_array_from_file(std::string _file) -> SArrayFloatPtr"""
    return _array.tick_float_array_from_file(_file)

def tick_double_array_from_file(_file: 'std::string') -> "SArrayDoublePtr":
    r"""tick_double_array_from_file(std::string _file) -> SArrayDoublePtr"""
    return _array.tick_double_array_from_file(_file)

def tick_float_array2d_to_file(_file: 'std::string', array: 'ArrayFloat2d const &') -> "void":
    r"""tick_float_array2d_to_file(std::string _file, ArrayFloat2d const & array)"""
    return _array.tick_float_array2d_to_file(_file, array)

def tick_double_array2d_to_file(_file: 'std::string', array: 'ArrayDouble2d const &') -> "void":
    r"""tick_double_array2d_to_file(std::string _file, ArrayDouble2d const & array)"""
    return _array.tick_double_array2d_to_file(_file, array)

def tick_float_array2d_from_file(_file: 'std::string') -> "SArrayFloat2dPtr":
    r"""tick_float_array2d_from_file(std::string _file) -> SArrayFloat2dPtr"""
    return _array.tick_float_array2d_from_file(_file)

def tick_double_array2d_from_file(_file: 'std::string') -> "SArrayDouble2dPtr":
    r"""tick_double_array2d_from_file(std::string _file) -> SArrayDouble2dPtr"""
    return _array.tick_double_array2d_from_file(_file)

def tick_float_sparse2d_to_file(_file: 'std::string', array: 'SparseArrayFloat2d const &') -> "void":
    r"""tick_float_sparse2d_to_file(std::string _file, SparseArrayFloat2d const & array)"""
    return _array.tick_float_sparse2d_to_file(_file, array)

def tick_double_sparse2d_to_file(_file: 'std::string', array: 'SparseArrayDouble2d const &') -> "void":
    r"""tick_double_sparse2d_to_file(std::string _file, SparseArrayDouble2d const & array)"""
    return _array.tick_double_sparse2d_to_file(_file, array)

def tick_float_sparse2d_from_file(_file: 'std::string') -> "SSparseArrayFloat2dPtr":
    r"""tick_float_sparse2d_from_file(std::string _file) -> SSparseArrayFloat2dPtr"""
    return _array.tick_float_sparse2d_from_file(_file)

def tick_double_sparse2d_from_file(_file: 'std::string') -> "SSparseArrayDouble2dPtr":
    r"""tick_double_sparse2d_from_file(std::string _file) -> SSparseArrayDouble2dPtr"""
    return _array.tick_double_sparse2d_from_file(_file)

def tick_float_colmaj_sparse2d_to_file(_file: 'std::string', array: 'ColMajSparseArrayFloat2d const &') -> "void":
    r"""tick_float_colmaj_sparse2d_to_file(std::string _file, ColMajSparseArrayFloat2d const & array)"""
    return _array.tick_float_colmaj_sparse2d_to_file(_file, array)

def tick_float_colmaj_sparse2d_from_file(_file: 'std::string') -> "SColMajSparseArrayFloat2dPtr":
    r"""tick_float_colmaj_sparse2d_from_file(std::string _file) -> SColMajSparseArrayFloat2dPtr"""
    return _array.tick_float_colmaj_sparse2d_from_file(_file)

def tick_double_colmaj_sparse2d_to_file(_file: 'std::string', array: 'ColMajSparseArrayDouble2d const &') -> "void":
    r"""tick_double_colmaj_sparse2d_to_file(std::string _file, ColMajSparseArrayDouble2d const & array)"""
    return _array.tick_double_colmaj_sparse2d_to_file(_file, array)

def tick_double_colmaj_sparse2d_from_file(_file: 'std::string') -> "SColMajSparseArrayDouble2dPtr":
    r"""tick_double_colmaj_sparse2d_from_file(std::string _file) -> SColMajSparseArrayDouble2dPtr"""
    return _array.tick_double_colmaj_sparse2d_from_file(_file)

def tick_float_colmaj_array2d_to_file(_file: 'std::string', array: 'ColMajArrayFloat2d const &') -> "void":
    r"""tick_float_colmaj_array2d_to_file(std::string _file, ColMajArrayFloat2d const & array)"""
    return _array.tick_float_colmaj_array2d_to_file(_file, array)

def tick_float_colmaj_array2d_from_file(_file: 'std::string') -> "SColMajArrayFloat2dPtr":
    r"""tick_float_colmaj_array2d_from_file(std::string _file) -> SColMajArrayFloat2dPtr"""
    return _array.tick_float_colmaj_array2d_from_file(_file)

def tick_double_colmaj_array2d_to_file(_file: 'std::string', array: 'ColMajArrayDouble2d const &') -> "void":
    r"""tick_double_colmaj_array2d_to_file(std::string _file, ColMajArrayDouble2d const & array)"""
    return _array.tick_double_colmaj_array2d_to_file(_file, array)

def tick_double_colmaj_array2d_from_file(_file: 'std::string') -> "SColMajArrayDouble2dPtr":
    r"""tick_double_colmaj_array2d_from_file(std::string _file) -> SColMajArrayDouble2dPtr"""
    return _array.tick_double_colmaj_array2d_from_file(_file)


