# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _prox
else:
    import _prox

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _prox.SHARED_PTR_DISOWN

import tick.base
import tick.array.build.array
class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _prox.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _prox.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _prox.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _prox.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _prox.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _prox.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _prox:
_prox.SwigPyIterator_swigregister(SwigPyIterator)

class Prox(object):
    r"""Proxy of C++ TProx< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Prox self, double strength, bool positive) -> Prox
        __init__(Prox self, double strength, unsigned long start, unsigned long end, bool positive) -> Prox
        """
        _prox.Prox_swiginit(self, _prox.new_Prox(*args))

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        r"""call(Prox self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _prox.Prox_call(self, coeffs, step, out)

    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""value(Prox self, ArrayDouble const & coeffs) -> double"""
        return _prox.Prox_value(self, coeffs)

    def get_strength(self) -> "double":
        r"""get_strength(Prox self) -> double"""
        return _prox.Prox_get_strength(self)

    def set_strength(self, strength: 'double') -> "void":
        r"""set_strength(Prox self, double strength)"""
        return _prox.Prox_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(Prox self) -> ulong"""
        return _prox.Prox_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(Prox self) -> ulong"""
        return _prox.Prox_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(Prox self, ulong start, ulong end)"""
        return _prox.Prox_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(Prox self) -> bool"""
        return _prox.Prox_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(Prox self, bool positive)"""
        return _prox.Prox_set_positive(self, positive)
    __swig_destroy__ = _prox.delete_Prox

# Register Prox in _prox:
_prox.Prox_swigregister(Prox)

class ProxDouble(object):
    r"""Proxy of C++ TProx< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxDouble self, double strength, bool positive) -> ProxDouble
        __init__(ProxDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxDouble
        """
        _prox.ProxDouble_swiginit(self, _prox.new_ProxDouble(*args))

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        r"""call(ProxDouble self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _prox.ProxDouble_call(self, coeffs, step, out)

    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""value(ProxDouble self, ArrayDouble const & coeffs) -> double"""
        return _prox.ProxDouble_value(self, coeffs)

    def get_strength(self) -> "double":
        r"""get_strength(ProxDouble self) -> double"""
        return _prox.ProxDouble_get_strength(self)

    def set_strength(self, strength: 'double') -> "void":
        r"""set_strength(ProxDouble self, double strength)"""
        return _prox.ProxDouble_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(ProxDouble self) -> ulong"""
        return _prox.ProxDouble_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(ProxDouble self) -> ulong"""
        return _prox.ProxDouble_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(ProxDouble self, ulong start, ulong end)"""
        return _prox.ProxDouble_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(ProxDouble self) -> bool"""
        return _prox.ProxDouble_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxDouble self, bool positive)"""
        return _prox.ProxDouble_set_positive(self, positive)
    __swig_destroy__ = _prox.delete_ProxDouble

# Register ProxDouble in _prox:
_prox.ProxDouble_swigregister(ProxDouble)

class ProxFloat(object):
    r"""Proxy of C++ TProx< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxFloat self, float strength, bool positive) -> ProxFloat
        __init__(ProxFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxFloat
        """
        _prox.ProxFloat_swiginit(self, _prox.new_ProxFloat(*args))

    def call(self, coeffs: 'ArrayFloat const &', step: 'float', out: 'ArrayFloat &') -> "void":
        r"""call(ProxFloat self, ArrayFloat const & coeffs, float step, ArrayFloat & out)"""
        return _prox.ProxFloat_call(self, coeffs, step, out)

    def value(self, coeffs: 'ArrayFloat const &') -> "float":
        r"""value(ProxFloat self, ArrayFloat const & coeffs) -> float"""
        return _prox.ProxFloat_value(self, coeffs)

    def get_strength(self) -> "float":
        r"""get_strength(ProxFloat self) -> float"""
        return _prox.ProxFloat_get_strength(self)

    def set_strength(self, strength: 'float') -> "void":
        r"""set_strength(ProxFloat self, float strength)"""
        return _prox.ProxFloat_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(ProxFloat self) -> ulong"""
        return _prox.ProxFloat_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(ProxFloat self) -> ulong"""
        return _prox.ProxFloat_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(ProxFloat self, ulong start, ulong end)"""
        return _prox.ProxFloat_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(ProxFloat self) -> bool"""
        return _prox.ProxFloat_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxFloat self, bool positive)"""
        return _prox.ProxFloat_set_positive(self, positive)
    __swig_destroy__ = _prox.delete_ProxFloat

# Register ProxFloat in _prox:
_prox.ProxFloat_swigregister(ProxFloat)

class ProxAtomicDouble(object):
    r"""Proxy of C++ TProx< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxAtomicDouble self, double strength, bool positive) -> ProxAtomicDouble
        __init__(ProxAtomicDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxAtomicDouble
        """
        _prox.ProxAtomicDouble_swiginit(self, _prox.new_ProxAtomicDouble(*args))

    def call(self, coeffs: 'Array< std::atomic< double > > const &', step: 'double', out: 'Array< std::atomic< double > > &') -> "void":
        r"""call(ProxAtomicDouble self, Array< std::atomic< double > > const & coeffs, double step, Array< std::atomic< double > > & out)"""
        return _prox.ProxAtomicDouble_call(self, coeffs, step, out)

    def value(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        r"""value(ProxAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _prox.ProxAtomicDouble_value(self, coeffs)

    def get_strength(self) -> "double":
        r"""get_strength(ProxAtomicDouble self) -> double"""
        return _prox.ProxAtomicDouble_get_strength(self)

    def set_strength(self, strength: 'double') -> "void":
        r"""set_strength(ProxAtomicDouble self, double strength)"""
        return _prox.ProxAtomicDouble_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(ProxAtomicDouble self) -> ulong"""
        return _prox.ProxAtomicDouble_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(ProxAtomicDouble self) -> ulong"""
        return _prox.ProxAtomicDouble_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(ProxAtomicDouble self, ulong start, ulong end)"""
        return _prox.ProxAtomicDouble_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(ProxAtomicDouble self) -> bool"""
        return _prox.ProxAtomicDouble_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxAtomicDouble self, bool positive)"""
        return _prox.ProxAtomicDouble_set_positive(self, positive)
    __swig_destroy__ = _prox.delete_ProxAtomicDouble

# Register ProxAtomicDouble in _prox:
_prox.ProxAtomicDouble_swigregister(ProxAtomicDouble)

class TProxAtomicFloat(object):
    r"""Proxy of C++ TProx< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TProxAtomicFloat self, float strength, bool positive) -> TProxAtomicFloat
        __init__(TProxAtomicFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxAtomicFloat
        """
        _prox.TProxAtomicFloat_swiginit(self, _prox.new_TProxAtomicFloat(*args))

    def call(self, coeffs: 'Array< std::atomic< float > > const &', step: 'float', out: 'Array< std::atomic< float > > &') -> "void":
        r"""call(TProxAtomicFloat self, Array< std::atomic< float > > const & coeffs, float step, Array< std::atomic< float > > & out)"""
        return _prox.TProxAtomicFloat_call(self, coeffs, step, out)

    def value(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        r"""value(TProxAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _prox.TProxAtomicFloat_value(self, coeffs)

    def get_strength(self) -> "float":
        r"""get_strength(TProxAtomicFloat self) -> float"""
        return _prox.TProxAtomicFloat_get_strength(self)

    def set_strength(self, strength: 'float') -> "void":
        r"""set_strength(TProxAtomicFloat self, float strength)"""
        return _prox.TProxAtomicFloat_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(TProxAtomicFloat self) -> ulong"""
        return _prox.TProxAtomicFloat_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(TProxAtomicFloat self) -> ulong"""
        return _prox.TProxAtomicFloat_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(TProxAtomicFloat self, ulong start, ulong end)"""
        return _prox.TProxAtomicFloat_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(TProxAtomicFloat self) -> bool"""
        return _prox.TProxAtomicFloat_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(TProxAtomicFloat self, bool positive)"""
        return _prox.TProxAtomicFloat_set_positive(self, positive)
    __swig_destroy__ = _prox.delete_TProxAtomicFloat

# Register TProxAtomicFloat in _prox:
_prox.TProxAtomicFloat_swigregister(TProxAtomicFloat)

class TProxSeparableDouble(Prox):
    r"""Proxy of C++ TProxSeparable< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TProxSeparableDouble self, double strength, bool positive) -> TProxSeparableDouble
        __init__(TProxSeparableDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableDouble
        """
        _prox.TProxSeparableDouble_swiginit(self, _prox.new_TProxSeparableDouble(*args))

    def call(self, *args) -> "void":
        r"""
        call(TProxSeparableDouble self, ArrayDouble const & coeffs, double step, ArrayDouble & out)
        call(TProxSeparableDouble self, ArrayDouble const & coeffs, ArrayDouble const & step, ArrayDouble & out)
        """
        return _prox.TProxSeparableDouble_call(self, *args)
    __swig_destroy__ = _prox.delete_TProxSeparableDouble

# Register TProxSeparableDouble in _prox:
_prox.TProxSeparableDouble_swigregister(TProxSeparableDouble)

class TProxSeparableFloat(ProxFloat):
    r"""Proxy of C++ TProxSeparable< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        TProxSeparable(float strength, bool positive) -> TProxSeparableFloat
        __init__(TProxSeparableFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableFloat
        """
        _prox.TProxSeparableFloat_swiginit(self, _prox.new_TProxSeparableFloat(*args))

    def call(self, *args) -> "void":
        r"""
        call(TProxSeparableFloat self, ArrayFloat const & coeffs, float step, ArrayFloat & out)
        call(TProxSeparableFloat self, ArrayFloat const & coeffs, ArrayFloat const & step, ArrayFloat & out)
        """
        return _prox.TProxSeparableFloat_call(self, *args)
    __swig_destroy__ = _prox.delete_TProxSeparableFloat

# Register TProxSeparableFloat in _prox:
_prox.TProxSeparableFloat_swigregister(TProxSeparableFloat)

class TProxSeparableAtomicDouble(ProxAtomicDouble):
    r"""Proxy of C++ TProxSeparable< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TProxSeparableAtomicDouble self, double strength, bool positive) -> TProxSeparableAtomicDouble
        __init__(TProxSeparableAtomicDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableAtomicDouble
        """
        _prox.TProxSeparableAtomicDouble_swiginit(self, _prox.new_TProxSeparableAtomicDouble(*args))

    def call(self, *args) -> "void":
        r"""
        call(TProxSeparableAtomicDouble self, Array< std::atomic< double > > const & coeffs, double step, Array< std::atomic< double > > & out)
        call(TProxSeparableAtomicDouble self, Array< std::atomic< double > > const & coeffs, Array< double > const & step, Array< std::atomic< double > > & out)
        """
        return _prox.TProxSeparableAtomicDouble_call(self, *args)
    __swig_destroy__ = _prox.delete_TProxSeparableAtomicDouble

# Register TProxSeparableAtomicDouble in _prox:
_prox.TProxSeparableAtomicDouble_swigregister(TProxSeparableAtomicDouble)

class TProxSeparableAtomicFloat(TProxAtomicFloat):
    r"""Proxy of C++ TProxSeparable< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TProxSeparableAtomicFloat self, float strength, bool positive) -> TProxSeparableAtomicFloat
        __init__(TProxSeparableAtomicFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableAtomicFloat
        """
        _prox.TProxSeparableAtomicFloat_swiginit(self, _prox.new_TProxSeparableAtomicFloat(*args))

    def call(self, *args) -> "void":
        r"""
        call(TProxSeparableAtomicFloat self, Array< std::atomic< float > > const & coeffs, float step, Array< std::atomic< float > > & out)
        call(TProxSeparableAtomicFloat self, Array< std::atomic< float > > const & coeffs, Array< float > const & step, Array< std::atomic< float > > & out)
        """
        return _prox.TProxSeparableAtomicFloat_call(self, *args)
    __swig_destroy__ = _prox.delete_TProxSeparableAtomicFloat

# Register TProxSeparableAtomicFloat in _prox:
_prox.TProxSeparableAtomicFloat_swigregister(TProxSeparableAtomicFloat)

class ProxZeroDouble(Prox):
    r"""Proxy of C++ TProxZero< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxZeroDouble self) -> ProxZeroDouble
        __init__(ProxZeroDouble self, double strength) -> ProxZeroDouble
        __init__(ProxZeroDouble self, double strength, unsigned long start, unsigned long end) -> ProxZeroDouble
        """
        _prox.ProxZeroDouble_swiginit(self, _prox.new_ProxZeroDouble(*args))

    def compare(self, that: 'ProxZeroDouble') -> "bool":
        r"""compare(ProxZeroDouble self, ProxZeroDouble that) -> bool"""
        return _prox.ProxZeroDouble_compare(self, that)

    def __getstate__(self): return ProxZeroDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxZeroDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxZeroDouble

# Register ProxZeroDouble in _prox:
_prox.ProxZeroDouble_swigregister(ProxZeroDouble)


def ProxZeroDoubleDeserialize(ptr: 'ProxZeroDouble', hex: 'std::string const &') -> "void":
    r"""ProxZeroDoubleDeserialize(ProxZeroDouble ptr, std::string const & hex)"""
    return _prox.ProxZeroDoubleDeserialize(ptr, hex)

def ProxZeroDoubleSerialize(ptr: 'ProxZeroDouble') -> "std::string":
    r"""ProxZeroDoubleSerialize(ProxZeroDouble ptr) -> std::string"""
    return _prox.ProxZeroDoubleSerialize(ptr)
class ProxZeroFloat(ProxFloat):
    r"""Proxy of C++ TProxZero< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxZeroFloat self) -> ProxZeroFloat
        __init__(ProxZeroFloat self, float strength) -> ProxZeroFloat
        __init__(ProxZeroFloat self, float strength, unsigned long start, unsigned long end) -> ProxZeroFloat
        """
        _prox.ProxZeroFloat_swiginit(self, _prox.new_ProxZeroFloat(*args))

    def compare(self, that: 'ProxZeroFloat') -> "bool":
        r"""compare(ProxZeroFloat self, ProxZeroFloat that) -> bool"""
        return _prox.ProxZeroFloat_compare(self, that)

    def __getstate__(self): return ProxZeroFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxZeroFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxZeroFloat

# Register ProxZeroFloat in _prox:
_prox.ProxZeroFloat_swigregister(ProxZeroFloat)


def ProxZeroFloatDeserialize(ptr: 'ProxZeroFloat', hex: 'std::string const &') -> "void":
    r"""ProxZeroFloatDeserialize(ProxZeroFloat ptr, std::string const & hex)"""
    return _prox.ProxZeroFloatDeserialize(ptr, hex)

def ProxZeroFloatSerialize(ptr: 'ProxZeroFloat') -> "std::string":
    r"""ProxZeroFloatSerialize(ProxZeroFloat ptr) -> std::string"""
    return _prox.ProxZeroFloatSerialize(ptr)
class ProxPositiveDouble(Prox):
    r"""Proxy of C++ TProxPositive< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxPositiveDouble self) -> ProxPositiveDouble
        __init__(ProxPositiveDouble self, double strength) -> ProxPositiveDouble
        __init__(ProxPositiveDouble self, double strength, unsigned long start, unsigned long end) -> ProxPositiveDouble
        """
        _prox.ProxPositiveDouble_swiginit(self, _prox.new_ProxPositiveDouble(*args))

    def compare(self, that: 'ProxPositiveDouble') -> "bool":
        r"""compare(ProxPositiveDouble self, ProxPositiveDouble that) -> bool"""
        return _prox.ProxPositiveDouble_compare(self, that)

    def __getstate__(self): return ProxPositiveDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxPositiveDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxPositiveDouble

# Register ProxPositiveDouble in _prox:
_prox.ProxPositiveDouble_swigregister(ProxPositiveDouble)


def ProxPositiveDoubleDeserialize(ptr: 'ProxPositiveDouble', hex: 'std::string const &') -> "void":
    r"""ProxPositiveDoubleDeserialize(ProxPositiveDouble ptr, std::string const & hex)"""
    return _prox.ProxPositiveDoubleDeserialize(ptr, hex)

def ProxPositiveDoubleSerialize(ptr: 'ProxPositiveDouble') -> "std::string":
    r"""ProxPositiveDoubleSerialize(ProxPositiveDouble ptr) -> std::string"""
    return _prox.ProxPositiveDoubleSerialize(ptr)
class ProxPositiveFloat(ProxFloat):
    r"""Proxy of C++ TProxPositive< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxPositiveFloat self) -> ProxPositiveFloat
        __init__(ProxPositiveFloat self, float strength) -> ProxPositiveFloat
        __init__(ProxPositiveFloat self, float strength, unsigned long start, unsigned long end) -> ProxPositiveFloat
        """
        _prox.ProxPositiveFloat_swiginit(self, _prox.new_ProxPositiveFloat(*args))

    def compare(self, that: 'ProxPositiveFloat') -> "bool":
        r"""compare(ProxPositiveFloat self, ProxPositiveFloat that) -> bool"""
        return _prox.ProxPositiveFloat_compare(self, that)

    def __getstate__(self): return ProxPositiveFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxPositiveFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxPositiveFloat

# Register ProxPositiveFloat in _prox:
_prox.ProxPositiveFloat_swigregister(ProxPositiveFloat)


def ProxPositiveFloatDeserialize(ptr: 'ProxPositiveFloat', hex: 'std::string const &') -> "void":
    r"""ProxPositiveFloatDeserialize(ProxPositiveFloat ptr, std::string const & hex)"""
    return _prox.ProxPositiveFloatDeserialize(ptr, hex)

def ProxPositiveFloatSerialize(ptr: 'ProxPositiveFloat') -> "std::string":
    r"""ProxPositiveFloatSerialize(ProxPositiveFloat ptr) -> std::string"""
    return _prox.ProxPositiveFloatSerialize(ptr)
class ProxL2SqDouble(TProxSeparableDouble):
    r"""Proxy of C++ TProxL2Sq< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL2SqDouble self) -> ProxL2SqDouble
        __init__(ProxL2SqDouble self, double strength, bool positive) -> ProxL2SqDouble
        __init__(ProxL2SqDouble self, double strength, ulong start, ulong end, bool positive) -> ProxL2SqDouble
        """
        _prox.ProxL2SqDouble_swiginit(self, _prox.new_ProxL2SqDouble(*args))

    def compare(self, that: 'ProxL2SqDouble') -> "bool":
        r"""compare(ProxL2SqDouble self, ProxL2SqDouble that) -> bool"""
        return _prox.ProxL2SqDouble_compare(self, that)

    def __getstate__(self): return ProxL2SqDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2SqDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL2SqDouble

# Register ProxL2SqDouble in _prox:
_prox.ProxL2SqDouble_swigregister(ProxL2SqDouble)


def ProxL2SqDoubleDeserialize(ptr: 'ProxL2SqDouble', hex: 'std::string const &') -> "void":
    r"""ProxL2SqDoubleDeserialize(ProxL2SqDouble ptr, std::string const & hex)"""
    return _prox.ProxL2SqDoubleDeserialize(ptr, hex)

def ProxL2SqDoubleSerialize(ptr: 'ProxL2SqDouble') -> "std::string":
    r"""ProxL2SqDoubleSerialize(ProxL2SqDouble ptr) -> std::string"""
    return _prox.ProxL2SqDoubleSerialize(ptr)
class ProxL2SqFloat(TProxSeparableFloat):
    r"""Proxy of C++ TProxL2Sq< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL2SqFloat self) -> ProxL2SqFloat
        __init__(ProxL2SqFloat self, float strength, bool positive) -> ProxL2SqFloat
        __init__(ProxL2SqFloat self, float strength, ulong start, ulong end, bool positive) -> ProxL2SqFloat
        """
        _prox.ProxL2SqFloat_swiginit(self, _prox.new_ProxL2SqFloat(*args))

    def compare(self, that: 'ProxL2SqFloat') -> "bool":
        r"""compare(ProxL2SqFloat self, ProxL2SqFloat that) -> bool"""
        return _prox.ProxL2SqFloat_compare(self, that)

    def __getstate__(self): return ProxL2SqFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2SqFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL2SqFloat

# Register ProxL2SqFloat in _prox:
_prox.ProxL2SqFloat_swigregister(ProxL2SqFloat)


def ProxL2SqFloatDeserialize(ptr: 'ProxL2SqFloat', hex: 'std::string const &') -> "void":
    r"""ProxL2SqFloatDeserialize(ProxL2SqFloat ptr, std::string const & hex)"""
    return _prox.ProxL2SqFloatDeserialize(ptr, hex)

def ProxL2SqFloatSerialize(ptr: 'ProxL2SqFloat') -> "std::string":
    r"""ProxL2SqFloatSerialize(ProxL2SqFloat ptr) -> std::string"""
    return _prox.ProxL2SqFloatSerialize(ptr)
class ProxL2Double(Prox):
    r"""Proxy of C++ TProxL2< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL2Double self) -> ProxL2Double
        __init__(ProxL2Double self, double strength, bool positive) -> ProxL2Double
        __init__(ProxL2Double self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxL2Double
        """
        _prox.ProxL2Double_swiginit(self, _prox.new_ProxL2Double(*args))

    def compare(self, that: 'ProxL2Double') -> "bool":
        r"""compare(ProxL2Double self, ProxL2Double that) -> bool"""
        return _prox.ProxL2Double_compare(self, that)

    def __getstate__(self): return ProxL2DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2DoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL2Double

# Register ProxL2Double in _prox:
_prox.ProxL2Double_swigregister(ProxL2Double)


def ProxL2DoubleDeserialize(ptr: 'ProxL2Double', hex: 'std::string const &') -> "void":
    r"""ProxL2DoubleDeserialize(ProxL2Double ptr, std::string const & hex)"""
    return _prox.ProxL2DoubleDeserialize(ptr, hex)

def ProxL2DoubleSerialize(ptr: 'ProxL2Double') -> "std::string":
    r"""ProxL2DoubleSerialize(ProxL2Double ptr) -> std::string"""
    return _prox.ProxL2DoubleSerialize(ptr)
class ProxL2Float(ProxFloat):
    r"""Proxy of C++ TProxL2< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL2Float self) -> ProxL2Float
        __init__(ProxL2Float self, float strength, bool positive) -> ProxL2Float
        __init__(ProxL2Float self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxL2Float
        """
        _prox.ProxL2Float_swiginit(self, _prox.new_ProxL2Float(*args))

    def compare(self, that: 'ProxL2Float') -> "bool":
        r"""compare(ProxL2Float self, ProxL2Float that) -> bool"""
        return _prox.ProxL2Float_compare(self, that)

    def __getstate__(self): return ProxL2FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2FloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL2Float

# Register ProxL2Float in _prox:
_prox.ProxL2Float_swigregister(ProxL2Float)


def ProxL2FloatDeserialize(ptr: 'ProxL2Float', hex: 'std::string const &') -> "void":
    r"""ProxL2FloatDeserialize(ProxL2Float ptr, std::string const & hex)"""
    return _prox.ProxL2FloatDeserialize(ptr, hex)

def ProxL2FloatSerialize(ptr: 'ProxL2Float') -> "std::string":
    r"""ProxL2FloatSerialize(ProxL2Float ptr) -> std::string"""
    return _prox.ProxL2FloatSerialize(ptr)
class ProxL1Double(TProxSeparableDouble):
    r"""Proxy of C++ ProxL1Double class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL1Double self) -> ProxL1Double
        __init__(ProxL1Double self, double strength, bool positive) -> ProxL1Double
        __init__(ProxL1Double self, double strength, ulong start, ulong end, bool positive) -> ProxL1Double
        """
        _prox.ProxL1Double_swiginit(self, _prox.new_ProxL1Double(*args))

    def compare(self, that: 'ProxL1Double') -> "bool":
        r"""compare(ProxL1Double self, ProxL1Double that) -> bool"""
        return _prox.ProxL1Double_compare(self, that)

    def __getstate__(self): return ProxL1DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1DoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL1Double

# Register ProxL1Double in _prox:
_prox.ProxL1Double_swigregister(ProxL1Double)


def ProxL1DoubleDeserialize(ptr: 'ProxL1Double', hex: 'std::string const &') -> "void":
    r"""ProxL1DoubleDeserialize(ProxL1Double ptr, std::string const & hex)"""
    return _prox.ProxL1DoubleDeserialize(ptr, hex)

def ProxL1DoubleSerialize(ptr: 'ProxL1Double') -> "std::string":
    r"""ProxL1DoubleSerialize(ProxL1Double ptr) -> std::string"""
    return _prox.ProxL1DoubleSerialize(ptr)
class ProxL1Float(TProxSeparableFloat):
    r"""Proxy of C++ ProxL1Float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL1Float self) -> ProxL1Float
        __init__(ProxL1Float self, float strength, bool positive) -> ProxL1Float
        __init__(ProxL1Float self, float strength, ulong start, ulong end, bool positive) -> ProxL1Float
        """
        _prox.ProxL1Float_swiginit(self, _prox.new_ProxL1Float(*args))

    def compare(self, that: 'ProxL1Float') -> "bool":
        r"""compare(ProxL1Float self, ProxL1Float that) -> bool"""
        return _prox.ProxL1Float_compare(self, that)

    def __getstate__(self): return ProxL1FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1FloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL1Float

# Register ProxL1Float in _prox:
_prox.ProxL1Float_swigregister(ProxL1Float)


def ProxL1FloatDeserialize(ptr: 'ProxL1Float', hex: 'std::string const &') -> "void":
    r"""ProxL1FloatDeserialize(ProxL1Float ptr, std::string const & hex)"""
    return _prox.ProxL1FloatDeserialize(ptr, hex)

def ProxL1FloatSerialize(ptr: 'ProxL1Float') -> "std::string":
    r"""ProxL1FloatSerialize(ProxL1Float ptr) -> std::string"""
    return _prox.ProxL1FloatSerialize(ptr)
class ProxL1wDouble(TProxSeparableDouble):
    r"""Proxy of C++ ProxL1wDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL1wDouble self) -> ProxL1wDouble
        __init__(ProxL1wDouble self, double strength, SArrayDoublePtr weights, bool positive) -> ProxL1wDouble
        __init__(ProxL1wDouble self, double strength, SArrayDoublePtr weights, ulong start, ulong end, bool positive) -> ProxL1wDouble
        """
        _prox.ProxL1wDouble_swiginit(self, _prox.new_ProxL1wDouble(*args))

    def set_weights(self, weights: 'SArrayDoublePtr') -> "void":
        r"""set_weights(ProxL1wDouble self, SArrayDoublePtr weights)"""
        return _prox.ProxL1wDouble_set_weights(self, weights)

    def compare(self, that: 'ProxL1wDouble') -> "bool":
        r"""compare(ProxL1wDouble self, ProxL1wDouble that) -> bool"""
        return _prox.ProxL1wDouble_compare(self, that)

    def __getstate__(self): return ProxL1wDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1wDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL1wDouble

# Register ProxL1wDouble in _prox:
_prox.ProxL1wDouble_swigregister(ProxL1wDouble)


def ProxL1wDoubleDeserialize(ptr: 'ProxL1wDouble', hex: 'std::string const &') -> "void":
    r"""ProxL1wDoubleDeserialize(ProxL1wDouble ptr, std::string const & hex)"""
    return _prox.ProxL1wDoubleDeserialize(ptr, hex)

def ProxL1wDoubleSerialize(ptr: 'ProxL1wDouble') -> "std::string":
    r"""ProxL1wDoubleSerialize(ProxL1wDouble ptr) -> std::string"""
    return _prox.ProxL1wDoubleSerialize(ptr)
class ProxL1wFloat(TProxSeparableFloat):
    r"""Proxy of C++ ProxL1wFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL1wFloat self) -> ProxL1wFloat
        __init__(ProxL1wFloat self, float strength, SArrayFloatPtr weights, bool positive) -> ProxL1wFloat
        __init__(ProxL1wFloat self, float strength, SArrayFloatPtr weights, ulong start, ulong end, bool positive) -> ProxL1wFloat
        """
        _prox.ProxL1wFloat_swiginit(self, _prox.new_ProxL1wFloat(*args))

    def set_weights(self, weights: 'SArrayFloatPtr') -> "void":
        r"""set_weights(ProxL1wFloat self, SArrayFloatPtr weights)"""
        return _prox.ProxL1wFloat_set_weights(self, weights)

    def compare(self, that: 'ProxL1wFloat') -> "bool":
        r"""compare(ProxL1wFloat self, ProxL1wFloat that) -> bool"""
        return _prox.ProxL1wFloat_compare(self, that)

    def __getstate__(self): return ProxL1wFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1wFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxL1wFloat

# Register ProxL1wFloat in _prox:
_prox.ProxL1wFloat_swigregister(ProxL1wFloat)


def ProxL1wFloatDeserialize(ptr: 'ProxL1wFloat', hex: 'std::string const &') -> "void":
    r"""ProxL1wFloatDeserialize(ProxL1wFloat ptr, std::string const & hex)"""
    return _prox.ProxL1wFloatDeserialize(ptr, hex)

def ProxL1wFloatSerialize(ptr: 'ProxL1wFloat') -> "std::string":
    r"""ProxL1wFloatSerialize(ProxL1wFloat ptr) -> std::string"""
    return _prox.ProxL1wFloatSerialize(ptr)
class ProxTVDouble(Prox):
    r"""Proxy of C++ TProxTV< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxTVDouble self) -> ProxTVDouble
        __init__(ProxTVDouble self, double strength, bool positive) -> ProxTVDouble
        __init__(ProxTVDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxTVDouble
        """
        _prox.ProxTVDouble_swiginit(self, _prox.new_ProxTVDouble(*args))

    def compare(self, that: 'ProxTVDouble') -> "bool":
        r"""compare(ProxTVDouble self, ProxTVDouble that) -> bool"""
        return _prox.ProxTVDouble_compare(self, that)

    def __getstate__(self): return ProxTVDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxTVDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxTVDouble

# Register ProxTVDouble in _prox:
_prox.ProxTVDouble_swigregister(ProxTVDouble)


def ProxTVDoubleDeserialize(ptr: 'ProxTVDouble', hex: 'std::string const &') -> "void":
    r"""ProxTVDoubleDeserialize(ProxTVDouble ptr, std::string const & hex)"""
    return _prox.ProxTVDoubleDeserialize(ptr, hex)

def ProxTVDoubleSerialize(ptr: 'ProxTVDouble') -> "std::string":
    r"""ProxTVDoubleSerialize(ProxTVDouble ptr) -> std::string"""
    return _prox.ProxTVDoubleSerialize(ptr)
class ProxTVFloat(ProxFloat):
    r"""Proxy of C++ TProxTV< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxTVFloat self) -> ProxTVFloat
        __init__(ProxTVFloat self, float strength, bool positive) -> ProxTVFloat
        __init__(ProxTVFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxTVFloat
        """
        _prox.ProxTVFloat_swiginit(self, _prox.new_ProxTVFloat(*args))

    def compare(self, that: 'ProxTVFloat') -> "bool":
        r"""compare(ProxTVFloat self, ProxTVFloat that) -> bool"""
        return _prox.ProxTVFloat_compare(self, that)

    def __getstate__(self): return ProxTVFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxTVFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxTVFloat

# Register ProxTVFloat in _prox:
_prox.ProxTVFloat_swigregister(ProxTVFloat)


def ProxTVFloatDeserialize(ptr: 'ProxTVFloat', hex: 'std::string const &') -> "void":
    r"""ProxTVFloatDeserialize(ProxTVFloat ptr, std::string const & hex)"""
    return _prox.ProxTVFloatDeserialize(ptr, hex)

def ProxTVFloatSerialize(ptr: 'ProxTVFloat') -> "std::string":
    r"""ProxTVFloatSerialize(ProxTVFloat ptr) -> std::string"""
    return _prox.ProxTVFloatSerialize(ptr)
class ProxElasticNetDouble(TProxSeparableDouble):
    r"""Proxy of C++ TProxElasticNet< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxElasticNetDouble self) -> ProxElasticNetDouble
        __init__(ProxElasticNetDouble self, double strength, double ratio, bool positive) -> ProxElasticNetDouble
        __init__(ProxElasticNetDouble self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNetDouble
        """
        _prox.ProxElasticNetDouble_swiginit(self, _prox.new_ProxElasticNetDouble(*args))

    def get_ratio(self) -> "double":
        r"""get_ratio(ProxElasticNetDouble self) -> double"""
        return _prox.ProxElasticNetDouble_get_ratio(self)

    def set_ratio(self, ratio: 'double') -> "void":
        r"""set_ratio(ProxElasticNetDouble self, double ratio)"""
        return _prox.ProxElasticNetDouble_set_ratio(self, ratio)

    def compare(self, that: 'ProxElasticNetDouble') -> "bool":
        r"""compare(ProxElasticNetDouble self, ProxElasticNetDouble that) -> bool"""
        return _prox.ProxElasticNetDouble_compare(self, that)

    def __getstate__(self): return ProxElasticNetDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxElasticNetDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxElasticNetDouble

# Register ProxElasticNetDouble in _prox:
_prox.ProxElasticNetDouble_swigregister(ProxElasticNetDouble)


def ProxElasticNetDoubleDeserialize(ptr: 'ProxElasticNetDouble', hex: 'std::string const &') -> "void":
    r"""ProxElasticNetDoubleDeserialize(ProxElasticNetDouble ptr, std::string const & hex)"""
    return _prox.ProxElasticNetDoubleDeserialize(ptr, hex)

def ProxElasticNetDoubleSerialize(ptr: 'ProxElasticNetDouble') -> "std::string":
    r"""ProxElasticNetDoubleSerialize(ProxElasticNetDouble ptr) -> std::string"""
    return _prox.ProxElasticNetDoubleSerialize(ptr)
class ProxElasticNetFloat(TProxSeparableFloat):
    r"""Proxy of C++ TProxElasticNet< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxElasticNetFloat self) -> ProxElasticNetFloat
        __init__(ProxElasticNetFloat self, float strength, float ratio, bool positive) -> ProxElasticNetFloat
        __init__(ProxElasticNetFloat self, float strength, float ratio, ulong start, ulong end, bool positive) -> ProxElasticNetFloat
        """
        _prox.ProxElasticNetFloat_swiginit(self, _prox.new_ProxElasticNetFloat(*args))

    def get_ratio(self) -> "float":
        r"""get_ratio(ProxElasticNetFloat self) -> float"""
        return _prox.ProxElasticNetFloat_get_ratio(self)

    def set_ratio(self, ratio: 'float') -> "void":
        r"""set_ratio(ProxElasticNetFloat self, float ratio)"""
        return _prox.ProxElasticNetFloat_set_ratio(self, ratio)

    def compare(self, that: 'ProxElasticNetFloat') -> "bool":
        r"""compare(ProxElasticNetFloat self, ProxElasticNetFloat that) -> bool"""
        return _prox.ProxElasticNetFloat_compare(self, that)

    def __getstate__(self): return ProxElasticNetFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxElasticNetFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxElasticNetFloat

# Register ProxElasticNetFloat in _prox:
_prox.ProxElasticNetFloat_swigregister(ProxElasticNetFloat)


def ProxElasticNetFloatDeserialize(ptr: 'ProxElasticNetFloat', hex: 'std::string const &') -> "void":
    r"""ProxElasticNetFloatDeserialize(ProxElasticNetFloat ptr, std::string const & hex)"""
    return _prox.ProxElasticNetFloatDeserialize(ptr, hex)

def ProxElasticNetFloatSerialize(ptr: 'ProxElasticNetFloat') -> "std::string":
    r"""ProxElasticNetFloatSerialize(ProxElasticNetFloat ptr) -> std::string"""
    return _prox.ProxElasticNetFloatSerialize(ptr)
class ProxElasticNetAtomicDouble(TProxSeparableAtomicDouble):
    r"""Proxy of C++ TProxElasticNet< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxElasticNetAtomicDouble self) -> ProxElasticNetAtomicDouble
        __init__(ProxElasticNetAtomicDouble self, double strength, double ratio, bool positive) -> ProxElasticNetAtomicDouble
        __init__(ProxElasticNetAtomicDouble self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNetAtomicDouble
        """
        _prox.ProxElasticNetAtomicDouble_swiginit(self, _prox.new_ProxElasticNetAtomicDouble(*args))

    def get_ratio(self) -> "double":
        r"""get_ratio(ProxElasticNetAtomicDouble self) -> double"""
        return _prox.ProxElasticNetAtomicDouble_get_ratio(self)

    def set_ratio(self, ratio: 'double') -> "void":
        r"""set_ratio(ProxElasticNetAtomicDouble self, double ratio)"""
        return _prox.ProxElasticNetAtomicDouble_set_ratio(self, ratio)

    def compare(self, that: 'ProxElasticNetAtomicDouble') -> "bool":
        r"""compare(ProxElasticNetAtomicDouble self, ProxElasticNetAtomicDouble that) -> bool"""
        return _prox.ProxElasticNetAtomicDouble_compare(self, that)
    __swig_destroy__ = _prox.delete_ProxElasticNetAtomicDouble

# Register ProxElasticNetAtomicDouble in _prox:
_prox.ProxElasticNetAtomicDouble_swigregister(ProxElasticNetAtomicDouble)

class ProxElasticNetAtomicFloat(TProxSeparableAtomicFloat):
    r"""Proxy of C++ TProxElasticNet< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxElasticNetAtomicFloat self) -> ProxElasticNetAtomicFloat
        __init__(ProxElasticNetAtomicFloat self, float strength, float ratio, bool positive) -> ProxElasticNetAtomicFloat
        __init__(ProxElasticNetAtomicFloat self, float strength, float ratio, ulong start, ulong end, bool positive) -> ProxElasticNetAtomicFloat
        """
        _prox.ProxElasticNetAtomicFloat_swiginit(self, _prox.new_ProxElasticNetAtomicFloat(*args))

    def get_ratio(self) -> "float":
        r"""get_ratio(ProxElasticNetAtomicFloat self) -> float"""
        return _prox.ProxElasticNetAtomicFloat_get_ratio(self)

    def set_ratio(self, ratio: 'float') -> "void":
        r"""set_ratio(ProxElasticNetAtomicFloat self, float ratio)"""
        return _prox.ProxElasticNetAtomicFloat_set_ratio(self, ratio)

    def compare(self, that: 'ProxElasticNetAtomicFloat') -> "bool":
        r"""compare(ProxElasticNetAtomicFloat self, ProxElasticNetAtomicFloat that) -> bool"""
        return _prox.ProxElasticNetAtomicFloat_compare(self, that)
    __swig_destroy__ = _prox.delete_ProxElasticNetAtomicFloat

# Register ProxElasticNetAtomicFloat in _prox:
_prox.ProxElasticNetAtomicFloat_swigregister(ProxElasticNetAtomicFloat)

class ProxSlopeDouble(Prox):
    r"""Proxy of C++ TProxSlope< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxSlopeDouble self) -> ProxSlopeDouble
        __init__(ProxSlopeDouble self, double _lambda, double fdr, bool positive) -> ProxSlopeDouble
        __init__(ProxSlopeDouble self, double _lambda, double fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlopeDouble
        """
        _prox.ProxSlopeDouble_swiginit(self, _prox.new_ProxSlopeDouble(*args))

    def get_false_discovery_rate(self) -> "double":
        r"""get_false_discovery_rate(ProxSlopeDouble self) -> double"""
        return _prox.ProxSlopeDouble_get_false_discovery_rate(self)

    def set_false_discovery_rate(self, fdr: 'double') -> "void":
        r"""set_false_discovery_rate(ProxSlopeDouble self, double fdr)"""
        return _prox.ProxSlopeDouble_set_false_discovery_rate(self, fdr)

    def get_weight_i(self, i: 'unsigned long') -> "double":
        r"""get_weight_i(ProxSlopeDouble self, unsigned long i) -> double"""
        return _prox.ProxSlopeDouble_get_weight_i(self, i)

    def compare(self, that: 'ProxSlopeDouble') -> "bool":
        r"""compare(ProxSlopeDouble self, ProxSlopeDouble that) -> bool"""
        return _prox.ProxSlopeDouble_compare(self, that)

    def __getstate__(self): return ProxSlopeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxSlopeDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxSlopeDouble

# Register ProxSlopeDouble in _prox:
_prox.ProxSlopeDouble_swigregister(ProxSlopeDouble)


def ProxSlopeDoubleDeserialize(ptr: 'ProxSlopeDouble', hex: 'std::string const &') -> "void":
    r"""ProxSlopeDoubleDeserialize(ProxSlopeDouble ptr, std::string const & hex)"""
    return _prox.ProxSlopeDoubleDeserialize(ptr, hex)

def ProxSlopeDoubleSerialize(ptr: 'ProxSlopeDouble') -> "std::string":
    r"""ProxSlopeDoubleSerialize(ProxSlopeDouble ptr) -> std::string"""
    return _prox.ProxSlopeDoubleSerialize(ptr)
class ProxSlopeFloat(ProxFloat):
    r"""Proxy of C++ TProxSlope< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxSlopeFloat self) -> ProxSlopeFloat
        __init__(ProxSlopeFloat self, float _lambda, float fdr, bool positive) -> ProxSlopeFloat
        __init__(ProxSlopeFloat self, float _lambda, float fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlopeFloat
        """
        _prox.ProxSlopeFloat_swiginit(self, _prox.new_ProxSlopeFloat(*args))

    def get_false_discovery_rate(self) -> "float":
        r"""get_false_discovery_rate(ProxSlopeFloat self) -> float"""
        return _prox.ProxSlopeFloat_get_false_discovery_rate(self)

    def set_false_discovery_rate(self, fdr: 'float') -> "void":
        r"""set_false_discovery_rate(ProxSlopeFloat self, float fdr)"""
        return _prox.ProxSlopeFloat_set_false_discovery_rate(self, fdr)

    def get_weight_i(self, i: 'unsigned long') -> "float":
        r"""get_weight_i(ProxSlopeFloat self, unsigned long i) -> float"""
        return _prox.ProxSlopeFloat_get_weight_i(self, i)

    def compare(self, that: 'ProxSlopeFloat') -> "bool":
        r"""compare(ProxSlopeFloat self, ProxSlopeFloat that) -> bool"""
        return _prox.ProxSlopeFloat_compare(self, that)

    def __getstate__(self): return ProxSlopeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxSlopeFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxSlopeFloat

# Register ProxSlopeFloat in _prox:
_prox.ProxSlopeFloat_swigregister(ProxSlopeFloat)


def ProxSlopeFloatDeserialize(ptr: 'ProxSlopeFloat', hex: 'std::string const &') -> "void":
    r"""ProxSlopeFloatDeserialize(ProxSlopeFloat ptr, std::string const & hex)"""
    return _prox.ProxSlopeFloatDeserialize(ptr, hex)

def ProxSlopeFloatSerialize(ptr: 'ProxSlopeFloat') -> "std::string":
    r"""ProxSlopeFloatSerialize(ProxSlopeFloat ptr) -> std::string"""
    return _prox.ProxSlopeFloatSerialize(ptr)
class ProxDoublePtrVector(object):
    r"""Proxy of C++ std::vector< ProxDoublePtr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(ProxDoublePtrVector self) -> SwigPyIterator"""
        return _prox.ProxDoublePtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(ProxDoublePtrVector self) -> bool"""
        return _prox.ProxDoublePtrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(ProxDoublePtrVector self) -> bool"""
        return _prox.ProxDoublePtrVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        r"""__len__(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _prox.ProxDoublePtrVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type') -> "std::vector< std::shared_ptr< TProx< double,double > >,std::allocator< std::shared_ptr< TProx< double,double > > > > *":
        r"""__getslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j) -> ProxDoublePtrVector"""
        return _prox.ProxDoublePtrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j)
        __setslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j, ProxDoublePtrVector v)
        """
        return _prox.ProxDoublePtrVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type') -> "void":
        r"""__delslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j)"""
        return _prox.ProxDoublePtrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i)
        __delitem__(ProxDoublePtrVector self, PySliceObject * slice)
        """
        return _prox.ProxDoublePtrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        r"""
        __getitem__(ProxDoublePtrVector self, PySliceObject * slice) -> ProxDoublePtrVector
        __getitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &
        """
        return _prox.ProxDoublePtrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(ProxDoublePtrVector self, PySliceObject * slice, ProxDoublePtrVector v)
        __setitem__(ProxDoublePtrVector self, PySliceObject * slice)
        __setitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _prox.ProxDoublePtrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type":
        r"""pop(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type"""
        return _prox.ProxDoublePtrVector_pop(self)

    def append(self, x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        r"""append(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _prox.ProxDoublePtrVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(ProxDoublePtrVector self) -> bool"""
        return _prox.ProxDoublePtrVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        r"""size(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _prox.ProxDoublePtrVector_size(self)

    def swap(self, v: 'ProxDoublePtrVector') -> "void":
        r"""swap(ProxDoublePtrVector self, ProxDoublePtrVector v)"""
        return _prox.ProxDoublePtrVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        r"""begin(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator"""
        return _prox.ProxDoublePtrVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        r"""end(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator"""
        return _prox.ProxDoublePtrVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator":
        r"""rbegin(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator"""
        return _prox.ProxDoublePtrVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator":
        r"""rend(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator"""
        return _prox.ProxDoublePtrVector_rend(self)

    def clear(self) -> "void":
        r"""clear(ProxDoublePtrVector self)"""
        return _prox.ProxDoublePtrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::allocator_type":
        r"""get_allocator(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::allocator_type"""
        return _prox.ProxDoublePtrVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(ProxDoublePtrVector self)"""
        return _prox.ProxDoublePtrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        r"""
        erase(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        erase(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator first, std::vector< std::shared_ptr< TProx< double,double > > >::iterator last) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        """
        return _prox.ProxDoublePtrVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ProxDoublePtrVector self) -> ProxDoublePtrVector
        __init__(ProxDoublePtrVector self, ProxDoublePtrVector other) -> ProxDoublePtrVector
        __init__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type size) -> ProxDoublePtrVector
        __init__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type size, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & value) -> ProxDoublePtrVector
        """
        _prox.ProxDoublePtrVector_swiginit(self, _prox.new_ProxDoublePtrVector(*args))

    def push_back(self, x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        r"""push_back(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _prox.ProxDoublePtrVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        r"""front(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &"""
        return _prox.ProxDoublePtrVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        r"""back(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &"""
        return _prox.ProxDoublePtrVector_back(self)

    def assign(self, n: 'std::vector< std::shared_ptr< TProx< double,double > > >::size_type', x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        r"""assign(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _prox.ProxDoublePtrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type new_size)
        resize(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type new_size, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _prox.ProxDoublePtrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        insert(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _prox.ProxDoublePtrVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::shared_ptr< TProx< double,double > > >::size_type') -> "void":
        r"""reserve(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n)"""
        return _prox.ProxDoublePtrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        r"""capacity(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _prox.ProxDoublePtrVector_capacity(self)
    __swig_destroy__ = _prox.delete_ProxDoublePtrVector

# Register ProxDoublePtrVector in _prox:
_prox.ProxDoublePtrVector_swigregister(ProxDoublePtrVector)

class ProxFloatPtrVector(object):
    r"""Proxy of C++ std::vector< ProxFloatPtr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(ProxFloatPtrVector self) -> SwigPyIterator"""
        return _prox.ProxFloatPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(ProxFloatPtrVector self) -> bool"""
        return _prox.ProxFloatPtrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(ProxFloatPtrVector self) -> bool"""
        return _prox.ProxFloatPtrVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        r"""__len__(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _prox.ProxFloatPtrVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type') -> "std::vector< std::shared_ptr< TProx< float,float > >,std::allocator< std::shared_ptr< TProx< float,float > > > > *":
        r"""__getslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j) -> ProxFloatPtrVector"""
        return _prox.ProxFloatPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j)
        __setslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j, ProxFloatPtrVector v)
        """
        return _prox.ProxFloatPtrVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type') -> "void":
        r"""__delslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j)"""
        return _prox.ProxFloatPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i)
        __delitem__(ProxFloatPtrVector self, PySliceObject * slice)
        """
        return _prox.ProxFloatPtrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        r"""
        __getitem__(ProxFloatPtrVector self, PySliceObject * slice) -> ProxFloatPtrVector
        __getitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &
        """
        return _prox.ProxFloatPtrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(ProxFloatPtrVector self, PySliceObject * slice, ProxFloatPtrVector v)
        __setitem__(ProxFloatPtrVector self, PySliceObject * slice)
        __setitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _prox.ProxFloatPtrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type":
        r"""pop(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type"""
        return _prox.ProxFloatPtrVector_pop(self)

    def append(self, x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        r"""append(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _prox.ProxFloatPtrVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(ProxFloatPtrVector self) -> bool"""
        return _prox.ProxFloatPtrVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        r"""size(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _prox.ProxFloatPtrVector_size(self)

    def swap(self, v: 'ProxFloatPtrVector') -> "void":
        r"""swap(ProxFloatPtrVector self, ProxFloatPtrVector v)"""
        return _prox.ProxFloatPtrVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        r"""begin(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator"""
        return _prox.ProxFloatPtrVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        r"""end(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator"""
        return _prox.ProxFloatPtrVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator":
        r"""rbegin(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator"""
        return _prox.ProxFloatPtrVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator":
        r"""rend(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator"""
        return _prox.ProxFloatPtrVector_rend(self)

    def clear(self) -> "void":
        r"""clear(ProxFloatPtrVector self)"""
        return _prox.ProxFloatPtrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::allocator_type":
        r"""get_allocator(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::allocator_type"""
        return _prox.ProxFloatPtrVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(ProxFloatPtrVector self)"""
        return _prox.ProxFloatPtrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        r"""
        erase(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        erase(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator first, std::vector< std::shared_ptr< TProx< float,float > > >::iterator last) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        """
        return _prox.ProxFloatPtrVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ProxFloatPtrVector self) -> ProxFloatPtrVector
        __init__(ProxFloatPtrVector self, ProxFloatPtrVector other) -> ProxFloatPtrVector
        __init__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type size) -> ProxFloatPtrVector
        __init__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type size, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & value) -> ProxFloatPtrVector
        """
        _prox.ProxFloatPtrVector_swiginit(self, _prox.new_ProxFloatPtrVector(*args))

    def push_back(self, x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        r"""push_back(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _prox.ProxFloatPtrVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        r"""front(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &"""
        return _prox.ProxFloatPtrVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        r"""back(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &"""
        return _prox.ProxFloatPtrVector_back(self)

    def assign(self, n: 'std::vector< std::shared_ptr< TProx< float,float > > >::size_type', x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        r"""assign(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _prox.ProxFloatPtrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type new_size)
        resize(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type new_size, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _prox.ProxFloatPtrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        insert(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _prox.ProxFloatPtrVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::shared_ptr< TProx< float,float > > >::size_type') -> "void":
        r"""reserve(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n)"""
        return _prox.ProxFloatPtrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        r"""capacity(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _prox.ProxFloatPtrVector_capacity(self)
    __swig_destroy__ = _prox.delete_ProxFloatPtrVector

# Register ProxFloatPtrVector in _prox:
_prox.ProxFloatPtrVector_swigregister(ProxFloatPtrVector)

class ProxMultiDouble(Prox):
    r"""Proxy of C++ TProxMulti< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxDoublePtrVector'):
        r"""__init__(ProxMultiDouble self, ProxDoublePtrVector proxs) -> ProxMultiDouble"""
        _prox.ProxMultiDouble_swiginit(self, _prox.new_ProxMultiDouble(proxs))
    __swig_destroy__ = _prox.delete_ProxMultiDouble

# Register ProxMultiDouble in _prox:
_prox.ProxMultiDouble_swigregister(ProxMultiDouble)

class ProxMultiFloat(ProxFloat):
    r"""Proxy of C++ TProxMulti< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxFloatPtrVector'):
        r"""__init__(ProxMultiFloat self, ProxFloatPtrVector proxs) -> ProxMultiFloat"""
        _prox.ProxMultiFloat_swiginit(self, _prox.new_ProxMultiFloat(proxs))
    __swig_destroy__ = _prox.delete_ProxMultiFloat

# Register ProxMultiFloat in _prox:
_prox.ProxMultiFloat_swigregister(ProxMultiFloat)

class ProxEqualityDouble(Prox):
    r"""Proxy of C++ TProxEquality< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxEqualityDouble self) -> ProxEqualityDouble
        __init__(ProxEqualityDouble self, double strength, bool positive) -> ProxEqualityDouble
        __init__(ProxEqualityDouble self, double strength, ulong start, ulong end, bool positive) -> ProxEqualityDouble
        """
        _prox.ProxEqualityDouble_swiginit(self, _prox.new_ProxEqualityDouble(*args))

    def compare(self, that: 'ProxEqualityDouble') -> "bool":
        r"""compare(ProxEqualityDouble self, ProxEqualityDouble that) -> bool"""
        return _prox.ProxEqualityDouble_compare(self, that)

    def __getstate__(self): return ProxEqualityDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxEqualityDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxEqualityDouble

# Register ProxEqualityDouble in _prox:
_prox.ProxEqualityDouble_swigregister(ProxEqualityDouble)


def ProxEqualityDoubleDeserialize(ptr: 'ProxEqualityDouble', hex: 'std::string const &') -> "void":
    r"""ProxEqualityDoubleDeserialize(ProxEqualityDouble ptr, std::string const & hex)"""
    return _prox.ProxEqualityDoubleDeserialize(ptr, hex)

def ProxEqualityDoubleSerialize(ptr: 'ProxEqualityDouble') -> "std::string":
    r"""ProxEqualityDoubleSerialize(ProxEqualityDouble ptr) -> std::string"""
    return _prox.ProxEqualityDoubleSerialize(ptr)
class ProxEqualityFloat(ProxFloat):
    r"""Proxy of C++ TProxEquality< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxEqualityFloat self) -> ProxEqualityFloat
        __init__(ProxEqualityFloat self, float strength, bool positive) -> ProxEqualityFloat
        __init__(ProxEqualityFloat self, float strength, ulong start, ulong end, bool positive) -> ProxEqualityFloat
        """
        _prox.ProxEqualityFloat_swiginit(self, _prox.new_ProxEqualityFloat(*args))

    def compare(self, that: 'ProxEqualityFloat') -> "bool":
        r"""compare(ProxEqualityFloat self, ProxEqualityFloat that) -> bool"""
        return _prox.ProxEqualityFloat_compare(self, that)

    def __getstate__(self): return ProxEqualityFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxEqualityFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxEqualityFloat

# Register ProxEqualityFloat in _prox:
_prox.ProxEqualityFloat_swigregister(ProxEqualityFloat)


def ProxEqualityFloatDeserialize(ptr: 'ProxEqualityFloat', hex: 'std::string const &') -> "void":
    r"""ProxEqualityFloatDeserialize(ProxEqualityFloat ptr, std::string const & hex)"""
    return _prox.ProxEqualityFloatDeserialize(ptr, hex)

def ProxEqualityFloatSerialize(ptr: 'ProxEqualityFloat') -> "std::string":
    r"""ProxEqualityFloatSerialize(ProxEqualityFloat ptr) -> std::string"""
    return _prox.ProxEqualityFloatSerialize(ptr)
class ProxWithGroupsDouble(Prox):
    r"""Proxy of C++ TProxWithGroups< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxWithGroupsDouble self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxWithGroupsDouble
        __init__(ProxWithGroupsDouble self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxWithGroupsDouble
        """
        _prox.ProxWithGroupsDouble_swiginit(self, _prox.new_ProxWithGroupsDouble(*args))
    __swig_destroy__ = _prox.delete_ProxWithGroupsDouble

# Register ProxWithGroupsDouble in _prox:
_prox.ProxWithGroupsDouble_swigregister(ProxWithGroupsDouble)

class ProxWithGroupsFloat(ProxFloat):
    r"""Proxy of C++ TProxWithGroups< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxWithGroupsFloat self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxWithGroupsFloat
        __init__(ProxWithGroupsFloat self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxWithGroupsFloat
        """
        _prox.ProxWithGroupsFloat_swiginit(self, _prox.new_ProxWithGroupsFloat(*args))
    __swig_destroy__ = _prox.delete_ProxWithGroupsFloat

# Register ProxWithGroupsFloat in _prox:
_prox.ProxWithGroupsFloat_swigregister(ProxWithGroupsFloat)

class ProxBinarsityDouble(ProxWithGroupsDouble):
    r"""Proxy of C++ TProxBinarsity< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxBinarsityDouble self) -> ProxBinarsityDouble
        __init__(ProxBinarsityDouble self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsityDouble
        __init__(ProxBinarsityDouble self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsityDouble
        """
        _prox.ProxBinarsityDouble_swiginit(self, _prox.new_ProxBinarsityDouble(*args))

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxBinarsityDouble self, bool positive)"""
        return _prox.ProxBinarsityDouble_set_positive(self, positive)

    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        r"""set_blocks_start(ProxBinarsityDouble self, SArrayULongPtr blocks_start)"""
        return _prox.ProxBinarsityDouble_set_blocks_start(self, blocks_start)

    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        r"""set_blocks_length(ProxBinarsityDouble self, SArrayULongPtr blocks_length)"""
        return _prox.ProxBinarsityDouble_set_blocks_length(self, blocks_length)

    def compare(self, that: 'ProxBinarsityDouble') -> "bool":
        r"""compare(ProxBinarsityDouble self, ProxBinarsityDouble that) -> bool"""
        return _prox.ProxBinarsityDouble_compare(self, that)

    def __getstate__(self): return ProxBinarsityDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxBinarsityDoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxBinarsityDouble

# Register ProxBinarsityDouble in _prox:
_prox.ProxBinarsityDouble_swigregister(ProxBinarsityDouble)


def ProxBinarsityDoubleDeserialize(ptr: 'ProxBinarsityDouble', hex: 'std::string const &') -> "void":
    r"""ProxBinarsityDoubleDeserialize(ProxBinarsityDouble ptr, std::string const & hex)"""
    return _prox.ProxBinarsityDoubleDeserialize(ptr, hex)

def ProxBinarsityDoubleSerialize(ptr: 'ProxBinarsityDouble') -> "std::string":
    r"""ProxBinarsityDoubleSerialize(ProxBinarsityDouble ptr) -> std::string"""
    return _prox.ProxBinarsityDoubleSerialize(ptr)
class ProxBinarsityFloat(ProxWithGroupsFloat):
    r"""Proxy of C++ TProxBinarsity< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxBinarsityFloat self) -> ProxBinarsityFloat
        __init__(ProxBinarsityFloat self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsityFloat
        __init__(ProxBinarsityFloat self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsityFloat
        """
        _prox.ProxBinarsityFloat_swiginit(self, _prox.new_ProxBinarsityFloat(*args))

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxBinarsityFloat self, bool positive)"""
        return _prox.ProxBinarsityFloat_set_positive(self, positive)

    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        r"""set_blocks_start(ProxBinarsityFloat self, SArrayULongPtr blocks_start)"""
        return _prox.ProxBinarsityFloat_set_blocks_start(self, blocks_start)

    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        r"""set_blocks_length(ProxBinarsityFloat self, SArrayULongPtr blocks_length)"""
        return _prox.ProxBinarsityFloat_set_blocks_length(self, blocks_length)

    def compare(self, that: 'ProxBinarsityFloat') -> "bool":
        r"""compare(ProxBinarsityFloat self, ProxBinarsityFloat that) -> bool"""
        return _prox.ProxBinarsityFloat_compare(self, that)

    def __getstate__(self): return ProxBinarsityFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxBinarsityFloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxBinarsityFloat

# Register ProxBinarsityFloat in _prox:
_prox.ProxBinarsityFloat_swigregister(ProxBinarsityFloat)


def ProxBinarsityFloatDeserialize(ptr: 'ProxBinarsityFloat', hex: 'std::string const &') -> "void":
    r"""ProxBinarsityFloatDeserialize(ProxBinarsityFloat ptr, std::string const & hex)"""
    return _prox.ProxBinarsityFloatDeserialize(ptr, hex)

def ProxBinarsityFloatSerialize(ptr: 'ProxBinarsityFloat') -> "std::string":
    r"""ProxBinarsityFloatSerialize(ProxBinarsityFloat ptr) -> std::string"""
    return _prox.ProxBinarsityFloatSerialize(ptr)
class ProxGroupL1Double(ProxWithGroupsDouble):
    r"""Proxy of C++ TProxGroupL1< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxGroupL1Double self) -> ProxGroupL1Double
        __init__(ProxGroupL1Double self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1Double
        __init__(ProxGroupL1Double self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1Double
        """
        _prox.ProxGroupL1Double_swiginit(self, _prox.new_ProxGroupL1Double(*args))

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxGroupL1Double self, bool positive)"""
        return _prox.ProxGroupL1Double_set_positive(self, positive)

    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        r"""set_blocks_start(ProxGroupL1Double self, SArrayULongPtr blocks_start)"""
        return _prox.ProxGroupL1Double_set_blocks_start(self, blocks_start)

    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        r"""set_blocks_length(ProxGroupL1Double self, SArrayULongPtr blocks_length)"""
        return _prox.ProxGroupL1Double_set_blocks_length(self, blocks_length)

    def compare(self, that: 'ProxGroupL1Double') -> "bool":
        r"""compare(ProxGroupL1Double self, ProxGroupL1Double that) -> bool"""
        return _prox.ProxGroupL1Double_compare(self, that)

    def __getstate__(self): return ProxGroupL1DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxGroupL1DoubleDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxGroupL1Double

# Register ProxGroupL1Double in _prox:
_prox.ProxGroupL1Double_swigregister(ProxGroupL1Double)


def ProxGroupL1DoubleDeserialize(ptr: 'ProxGroupL1Double', hex: 'std::string const &') -> "void":
    r"""ProxGroupL1DoubleDeserialize(ProxGroupL1Double ptr, std::string const & hex)"""
    return _prox.ProxGroupL1DoubleDeserialize(ptr, hex)

def ProxGroupL1DoubleSerialize(ptr: 'ProxGroupL1Double') -> "std::string":
    r"""ProxGroupL1DoubleSerialize(ProxGroupL1Double ptr) -> std::string"""
    return _prox.ProxGroupL1DoubleSerialize(ptr)
class ProxGroupL1Float(ProxWithGroupsFloat):
    r"""Proxy of C++ TProxGroupL1< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxGroupL1Float self) -> ProxGroupL1Float
        __init__(ProxGroupL1Float self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1Float
        __init__(ProxGroupL1Float self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1Float
        """
        _prox.ProxGroupL1Float_swiginit(self, _prox.new_ProxGroupL1Float(*args))

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxGroupL1Float self, bool positive)"""
        return _prox.ProxGroupL1Float_set_positive(self, positive)

    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        r"""set_blocks_start(ProxGroupL1Float self, SArrayULongPtr blocks_start)"""
        return _prox.ProxGroupL1Float_set_blocks_start(self, blocks_start)

    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        r"""set_blocks_length(ProxGroupL1Float self, SArrayULongPtr blocks_length)"""
        return _prox.ProxGroupL1Float_set_blocks_length(self, blocks_length)

    def compare(self, that: 'ProxGroupL1Float') -> "bool":
        r"""compare(ProxGroupL1Float self, ProxGroupL1Float that) -> bool"""
        return _prox.ProxGroupL1Float_compare(self, that)

    def __getstate__(self): return ProxGroupL1FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxGroupL1FloatDeserialize(self, s)

    __swig_destroy__ = _prox.delete_ProxGroupL1Float

# Register ProxGroupL1Float in _prox:
_prox.ProxGroupL1Float_swigregister(ProxGroupL1Float)


def ProxGroupL1FloatDeserialize(ptr: 'ProxGroupL1Float', hex: 'std::string const &') -> "void":
    r"""ProxGroupL1FloatDeserialize(ProxGroupL1Float ptr, std::string const & hex)"""
    return _prox.ProxGroupL1FloatDeserialize(ptr, hex)

def ProxGroupL1FloatSerialize(ptr: 'ProxGroupL1Float') -> "std::string":
    r"""ProxGroupL1FloatSerialize(ProxGroupL1Float ptr) -> std::string"""
    return _prox.ProxGroupL1FloatSerialize(ptr)


