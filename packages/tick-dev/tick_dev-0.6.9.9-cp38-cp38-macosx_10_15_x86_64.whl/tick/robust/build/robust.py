# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _robust
else:
    import _robust

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def to_hex(bytes: 'std::string const &') -> "std::string":
    r"""to_hex(std::string const & bytes) -> std::string"""
    return _robust.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    r"""to_bytes(std::string const & hex) -> std::string"""
    return _robust.to_bytes(hex)
SHARED_PTR_DISOWN = _robust.SHARED_PTR_DISOWN

import tick.base
import tick.array.build.array
class Model(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Model self) -> Model"""
        _robust.Model_swiginit(self, _robust.new_Model())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _robust.Model_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _robust.Model_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(Model self) -> unsigned long"""
        return _robust.Model_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(Model self) -> bool"""
        return _robust.Model_is_sparse(self)
    __swig_destroy__ = _robust.delete_Model

# Register Model in _robust:
_robust.Model_swigregister(Model)

class ModelDouble(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelDouble self) -> ModelDouble"""
        _robust.ModelDouble_swiginit(self, _robust.new_ModelDouble())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _robust.ModelDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _robust.ModelDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelDouble self) -> unsigned long"""
        return _robust.ModelDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelDouble self) -> bool"""
        return _robust.ModelDouble_is_sparse(self)
    __swig_destroy__ = _robust.delete_ModelDouble

# Register ModelDouble in _robust:
_robust.ModelDouble_swigregister(ModelDouble)

class ModelFloat(object):
    r"""Proxy of C++ TModel< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelFloat self) -> ModelFloat"""
        _robust.ModelFloat_swiginit(self, _robust.new_ModelFloat())

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _robust.ModelFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        r"""loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _robust.ModelFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelFloat self) -> unsigned long"""
        return _robust.ModelFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelFloat self) -> bool"""
        return _robust.ModelFloat_is_sparse(self)
    __swig_destroy__ = _robust.delete_ModelFloat

# Register ModelFloat in _robust:
_robust.ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(object):
    r"""Proxy of C++ TModel< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicDouble self) -> ModelAtomicDouble"""
        _robust.ModelAtomicDouble_swiginit(self, _robust.new_ModelAtomicDouble())

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _robust.ModelAtomicDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        r"""loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _robust.ModelAtomicDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _robust.ModelAtomicDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicDouble self) -> bool"""
        return _robust.ModelAtomicDouble_is_sparse(self)
    __swig_destroy__ = _robust.delete_ModelAtomicDouble

# Register ModelAtomicDouble in _robust:
_robust.ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(object):
    r"""Proxy of C++ TModel< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicFloat self) -> ModelAtomicFloat"""
        _robust.ModelAtomicFloat_swiginit(self, _robust.new_ModelAtomicFloat())

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _robust.ModelAtomicFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        r"""loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _robust.ModelAtomicFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _robust.ModelAtomicFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicFloat self) -> bool"""
        return _robust.ModelAtomicFloat_is_sparse(self)
    __swig_destroy__ = _robust.delete_ModelAtomicFloat

# Register ModelAtomicFloat in _robust:
_robust.ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    r"""Proxy of C++ TModelLabelsFeatures< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        _robust.ModelLabelsFeaturesDouble_swiginit(self, _robust.new_ModelLabelsFeaturesDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesDouble_get_n_features(self)
    __swig_destroy__ = _robust.delete_ModelLabelsFeaturesDouble

# Register ModelLabelsFeaturesDouble in _robust:
_robust.ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        _robust.ModelLabelsFeaturesFloat_swiginit(self, _robust.new_ModelLabelsFeaturesFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesFloat_get_n_features(self)
    __swig_destroy__ = _robust.delete_ModelLabelsFeaturesFloat

# Register ModelLabelsFeaturesFloat in _robust:
_robust.ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLabelsFeatures< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        _robust.ModelLabelsFeaturesAtomicDouble_swiginit(self, _robust.new_ModelLabelsFeaturesAtomicDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesAtomicDouble_get_n_features(self)
    __swig_destroy__ = _robust.delete_ModelLabelsFeaturesAtomicDouble

# Register ModelLabelsFeaturesAtomicDouble in _robust:
_robust.ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        _robust.ModelLabelsFeaturesAtomicFloat_swiginit(self, _robust.new_ModelLabelsFeaturesAtomicFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _robust.ModelLabelsFeaturesAtomicFloat_get_n_features(self)
    __swig_destroy__ = _robust.delete_ModelLabelsFeaturesAtomicFloat

# Register ModelLabelsFeaturesAtomicFloat in _robust:
_robust.ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitz self) -> ModelLipschitz"""
        _robust.ModelLipschitz_swiginit(self, _robust.new_ModelLipschitz())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitz self) -> double"""
        return _robust.ModelLipschitz_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitz self) -> double"""
        return _robust.ModelLipschitz_get_lip_mean(self)
    __swig_destroy__ = _robust.delete_ModelLipschitz

# Register ModelLipschitz in _robust:
_robust.ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzDouble self) -> ModelLipschitzDouble"""
        _robust.ModelLipschitzDouble_swiginit(self, _robust.new_ModelLipschitzDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzDouble self) -> double"""
        return _robust.ModelLipschitzDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _robust.ModelLipschitzDouble_get_lip_mean(self)
    __swig_destroy__ = _robust.delete_ModelLipschitzDouble

# Register ModelLipschitzDouble in _robust:
_robust.ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    r"""Proxy of C++ TModelLipschitz< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzFloat self) -> ModelLipschitzFloat"""
        _robust.ModelLipschitzFloat_swiginit(self, _robust.new_ModelLipschitzFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzFloat self) -> float"""
        return _robust.ModelLipschitzFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _robust.ModelLipschitzFloat_get_lip_mean(self)
    __swig_destroy__ = _robust.delete_ModelLipschitzFloat

# Register ModelLipschitzFloat in _robust:
_robust.ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLipschitz< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicDouble self) -> ModelLipschitzAtomicDouble"""
        _robust.ModelLipschitzAtomicDouble_swiginit(self, _robust.new_ModelLipschitzAtomicDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _robust.ModelLipschitzAtomicDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _robust.ModelLipschitzAtomicDouble_get_lip_mean(self)
    __swig_destroy__ = _robust.delete_ModelLipschitzAtomicDouble

# Register ModelLipschitzAtomicDouble in _robust:
_robust.ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLipschitz< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicFloat self) -> ModelLipschitzAtomicFloat"""
        _robust.ModelLipschitzAtomicFloat_swiginit(self, _robust.new_ModelLipschitzAtomicFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _robust.ModelLipschitzAtomicFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _robust.ModelLipschitzAtomicFloat_get_lip_mean(self)
    __swig_destroy__ = _robust.delete_ModelLipschitzAtomicFloat

# Register ModelLipschitzAtomicFloat in _robust:
_robust.ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble"""
        _robust.ModelGeneralizedLinearDouble_swiginit(self, _robust.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _robust.ModelGeneralizedLinearDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _robust.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearDouble

# Register ModelGeneralizedLinearDouble in _robust:
_robust.ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat"""
        _robust.ModelGeneralizedLinearFloat_swiginit(self, _robust.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _robust.ModelGeneralizedLinearFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _robust.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearFloat

# Register ModelGeneralizedLinearFloat in _robust:
_robust.ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble"""
        _robust.ModelGeneralizedLinearAtomicDouble_swiginit(self, _robust.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _robust.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _robust.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearAtomicDouble

# Register ModelGeneralizedLinearAtomicDouble in _robust:
_robust.ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat"""
        _robust.ModelGeneralizedLinearAtomicFloat_swiginit(self, _robust.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _robust.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _robust.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearAtomicFloat

# Register ModelGeneralizedLinearAtomicFloat in _robust:
_robust.ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

class ModelHingeDouble(ModelGeneralizedLinearDouble):
    r"""Proxy of C++ ModelHingeDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelHingeDouble self) -> ModelHingeDouble
        __init__(ModelHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelHingeDouble
        """
        _robust.ModelHingeDouble_swiginit(self, _robust.new_ModelHingeDouble(*args))

    def compare(self, that: 'ModelHingeDouble') -> "bool":
        r"""compare(ModelHingeDouble self, ModelHingeDouble that) -> bool"""
        return _robust.ModelHingeDouble_compare(self, that)

    def __getstate__(self): return ModelHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelHingeDouble

# Register ModelHingeDouble in _robust:
_robust.ModelHingeDouble_swigregister(ModelHingeDouble)


def ModelHingeDoubleDeserialize(ptr: 'ModelHingeDouble', hex: 'std::string const &') -> "void":
    r"""ModelHingeDoubleDeserialize(ModelHingeDouble ptr, std::string const & hex)"""
    return _robust.ModelHingeDoubleDeserialize(ptr, hex)

def ModelHingeDoubleSerialize(ptr: 'ModelHingeDouble') -> "std::string":
    r"""ModelHingeDoubleSerialize(ModelHingeDouble ptr) -> std::string"""
    return _robust.ModelHingeDoubleSerialize(ptr)
class ModelHingeFloat(ModelGeneralizedLinearFloat):
    r"""Proxy of C++ ModelHingeFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelHingeFloat self) -> ModelHingeFloat
        __init__(ModelHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelHingeFloat
        """
        _robust.ModelHingeFloat_swiginit(self, _robust.new_ModelHingeFloat(*args))

    def compare(self, that: 'ModelHingeFloat') -> "bool":
        r"""compare(ModelHingeFloat self, ModelHingeFloat that) -> bool"""
        return _robust.ModelHingeFloat_compare(self, that)

    def __getstate__(self): return ModelHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHingeFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelHingeFloat

# Register ModelHingeFloat in _robust:
_robust.ModelHingeFloat_swigregister(ModelHingeFloat)


def ModelHingeFloatDeserialize(ptr: 'ModelHingeFloat', hex: 'std::string const &') -> "void":
    r"""ModelHingeFloatDeserialize(ModelHingeFloat ptr, std::string const & hex)"""
    return _robust.ModelHingeFloatDeserialize(ptr, hex)

def ModelHingeFloatSerialize(ptr: 'ModelHingeFloat') -> "std::string":
    r"""ModelHingeFloatSerialize(ModelHingeFloat ptr) -> std::string"""
    return _robust.ModelHingeFloatSerialize(ptr)
class ModelQuadraticHingeDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelQuadraticHingeDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelQuadraticHingeDouble self) -> ModelQuadraticHingeDouble
        __init__(ModelQuadraticHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelQuadraticHingeDouble
        """
        _robust.ModelQuadraticHingeDouble_swiginit(self, _robust.new_ModelQuadraticHingeDouble(*args))

    def compare(self, that: 'ModelQuadraticHingeDouble') -> "bool":
        r"""compare(ModelQuadraticHingeDouble self, ModelQuadraticHingeDouble that) -> bool"""
        return _robust.ModelQuadraticHingeDouble_compare(self, that)

    def __getstate__(self): return ModelQuadraticHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelQuadraticHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelQuadraticHingeDouble

# Register ModelQuadraticHingeDouble in _robust:
_robust.ModelQuadraticHingeDouble_swigregister(ModelQuadraticHingeDouble)


def ModelQuadraticHingeDoubleDeserialize(ptr: 'ModelQuadraticHingeDouble', hex: 'std::string const &') -> "void":
    r"""ModelQuadraticHingeDoubleDeserialize(ModelQuadraticHingeDouble ptr, std::string const & hex)"""
    return _robust.ModelQuadraticHingeDoubleDeserialize(ptr, hex)

def ModelQuadraticHingeDoubleSerialize(ptr: 'ModelQuadraticHingeDouble') -> "std::string":
    r"""ModelQuadraticHingeDoubleSerialize(ModelQuadraticHingeDouble ptr) -> std::string"""
    return _robust.ModelQuadraticHingeDoubleSerialize(ptr)
class ModelQuadraticHingeFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelQuadraticHingeFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelQuadraticHingeFloat self) -> ModelQuadraticHingeFloat
        __init__(ModelQuadraticHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelQuadraticHingeFloat
        """
        _robust.ModelQuadraticHingeFloat_swiginit(self, _robust.new_ModelQuadraticHingeFloat(*args))

    def compare(self, that: 'ModelQuadraticHingeFloat') -> "bool":
        r"""compare(ModelQuadraticHingeFloat self, ModelQuadraticHingeFloat that) -> bool"""
        return _robust.ModelQuadraticHingeFloat_compare(self, that)

    def __getstate__(self): return ModelQuadraticHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelQuadraticHingeFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelQuadraticHingeFloat

# Register ModelQuadraticHingeFloat in _robust:
_robust.ModelQuadraticHingeFloat_swigregister(ModelQuadraticHingeFloat)


def ModelQuadraticHingeFloatDeserialize(ptr: 'ModelQuadraticHingeFloat', hex: 'std::string const &') -> "void":
    r"""ModelQuadraticHingeFloatDeserialize(ModelQuadraticHingeFloat ptr, std::string const & hex)"""
    return _robust.ModelQuadraticHingeFloatDeserialize(ptr, hex)

def ModelQuadraticHingeFloatSerialize(ptr: 'ModelQuadraticHingeFloat') -> "std::string":
    r"""ModelQuadraticHingeFloatSerialize(ModelQuadraticHingeFloat ptr) -> std::string"""
    return _robust.ModelQuadraticHingeFloatSerialize(ptr)
class ModelSmoothedHingeDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelSmoothedHingeDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelSmoothedHingeDouble self) -> ModelSmoothedHingeDouble
        __init__(ModelSmoothedHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const smoothness=1, int const n_threads=1) -> ModelSmoothedHingeDouble
        """
        _robust.ModelSmoothedHingeDouble_swiginit(self, _robust.new_ModelSmoothedHingeDouble(*args))

    def get_smoothness(self) -> "double":
        r"""get_smoothness(ModelSmoothedHingeDouble self) -> double"""
        return _robust.ModelSmoothedHingeDouble_get_smoothness(self)

    def set_smoothness(self, smoothness: 'double') -> "void":
        r"""set_smoothness(ModelSmoothedHingeDouble self, double smoothness)"""
        return _robust.ModelSmoothedHingeDouble_set_smoothness(self, smoothness)

    def compare(self, that: 'ModelSmoothedHingeDouble') -> "bool":
        r"""compare(ModelSmoothedHingeDouble self, ModelSmoothedHingeDouble that) -> bool"""
        return _robust.ModelSmoothedHingeDouble_compare(self, that)

    def __getstate__(self): return ModelSmoothedHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelSmoothedHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelSmoothedHingeDouble

# Register ModelSmoothedHingeDouble in _robust:
_robust.ModelSmoothedHingeDouble_swigregister(ModelSmoothedHingeDouble)


def ModelSmoothedHingeDoubleDeserialize(ptr: 'ModelSmoothedHingeDouble', hex: 'std::string const &') -> "void":
    r"""ModelSmoothedHingeDoubleDeserialize(ModelSmoothedHingeDouble ptr, std::string const & hex)"""
    return _robust.ModelSmoothedHingeDoubleDeserialize(ptr, hex)

def ModelSmoothedHingeDoubleSerialize(ptr: 'ModelSmoothedHingeDouble') -> "std::string":
    r"""ModelSmoothedHingeDoubleSerialize(ModelSmoothedHingeDouble ptr) -> std::string"""
    return _robust.ModelSmoothedHingeDoubleSerialize(ptr)
class ModelSmoothedHingeFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelSmoothedHingeFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelSmoothedHingeFloat self) -> ModelSmoothedHingeFloat
        __init__(ModelSmoothedHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const smoothness=1, int const n_threads=1) -> ModelSmoothedHingeFloat
        """
        _robust.ModelSmoothedHingeFloat_swiginit(self, _robust.new_ModelSmoothedHingeFloat(*args))

    def get_smoothness(self) -> "float":
        r"""get_smoothness(ModelSmoothedHingeFloat self) -> float"""
        return _robust.ModelSmoothedHingeFloat_get_smoothness(self)

    def set_smoothness(self, smoothness: 'float') -> "void":
        r"""set_smoothness(ModelSmoothedHingeFloat self, float smoothness)"""
        return _robust.ModelSmoothedHingeFloat_set_smoothness(self, smoothness)

    def compare(self, that: 'ModelSmoothedHingeFloat') -> "bool":
        r"""compare(ModelSmoothedHingeFloat self, ModelSmoothedHingeFloat that) -> bool"""
        return _robust.ModelSmoothedHingeFloat_compare(self, that)

    def __getstate__(self): return ModelSmoothedHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelSmoothedHingeFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelSmoothedHingeFloat

# Register ModelSmoothedHingeFloat in _robust:
_robust.ModelSmoothedHingeFloat_swigregister(ModelSmoothedHingeFloat)


def ModelSmoothedHingeFloatDeserialize(ptr: 'ModelSmoothedHingeFloat', hex: 'std::string const &') -> "void":
    r"""ModelSmoothedHingeFloatDeserialize(ModelSmoothedHingeFloat ptr, std::string const & hex)"""
    return _robust.ModelSmoothedHingeFloatDeserialize(ptr, hex)

def ModelSmoothedHingeFloatSerialize(ptr: 'ModelSmoothedHingeFloat') -> "std::string":
    r"""ModelSmoothedHingeFloatSerialize(ModelSmoothedHingeFloat ptr) -> std::string"""
    return _robust.ModelSmoothedHingeFloatSerialize(ptr)
class ModelLinRegDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelLinRegDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLinRegDouble self) -> ModelLinRegDouble
        __init__(ModelLinRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegDouble
        """
        _robust.ModelLinRegDouble_swiginit(self, _robust.new_ModelLinRegDouble(*args))

    def compare(self, that: 'ModelLinRegDouble') -> "bool":
        r"""compare(ModelLinRegDouble self, ModelLinRegDouble that) -> bool"""
        return _robust.ModelLinRegDouble_compare(self, that)

    def __getstate__(self): return ModelLinRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLinRegDouble

# Register ModelLinRegDouble in _robust:
_robust.ModelLinRegDouble_swigregister(ModelLinRegDouble)


def ModelLinRegDoubleDeserialize(ptr: 'ModelLinRegDouble', hex: 'std::string const &') -> "void":
    r"""ModelLinRegDoubleDeserialize(ModelLinRegDouble ptr, std::string const & hex)"""
    return _robust.ModelLinRegDoubleDeserialize(ptr, hex)

def ModelLinRegDoubleSerialize(ptr: 'ModelLinRegDouble') -> "std::string":
    r"""ModelLinRegDoubleSerialize(ModelLinRegDouble ptr) -> std::string"""
    return _robust.ModelLinRegDoubleSerialize(ptr)
class ModelLinRegFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelLinRegFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLinRegFloat self) -> ModelLinRegFloat
        __init__(ModelLinRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegFloat
        """
        _robust.ModelLinRegFloat_swiginit(self, _robust.new_ModelLinRegFloat(*args))

    def compare(self, that: 'ModelLinRegFloat') -> "bool":
        r"""compare(ModelLinRegFloat self, ModelLinRegFloat that) -> bool"""
        return _robust.ModelLinRegFloat_compare(self, that)

    def __getstate__(self): return ModelLinRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLinRegFloat

# Register ModelLinRegFloat in _robust:
_robust.ModelLinRegFloat_swigregister(ModelLinRegFloat)


def ModelLinRegFloatDeserialize(ptr: 'ModelLinRegFloat', hex: 'std::string const &') -> "void":
    r"""ModelLinRegFloatDeserialize(ModelLinRegFloat ptr, std::string const & hex)"""
    return _robust.ModelLinRegFloatDeserialize(ptr, hex)

def ModelLinRegFloatSerialize(ptr: 'ModelLinRegFloat') -> "std::string":
    r"""ModelLinRegFloatSerialize(ModelLinRegFloat ptr) -> std::string"""
    return _robust.ModelLinRegFloatSerialize(ptr)
class ModelLogRegDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelLogRegDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLogRegDouble self) -> ModelLogRegDouble
        __init__(ModelLogRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegDouble
        """
        _robust.ModelLogRegDouble_swiginit(self, _robust.new_ModelLogRegDouble(*args))

    def compare(self, that: 'ModelLogRegDouble') -> "bool":
        r"""compare(ModelLogRegDouble self, ModelLogRegDouble that) -> bool"""
        return _robust.ModelLogRegDouble_compare(self, that)

    @staticmethod
    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogRegDouble_sigmoid(x, out)

    @staticmethod
    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogRegDouble_logistic(x, out)

    def __getstate__(self): return ModelLogRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLogRegDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLogRegDouble

# Register ModelLogRegDouble in _robust:
_robust.ModelLogRegDouble_swigregister(ModelLogRegDouble)

def ModelLogRegDouble_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    r"""ModelLogRegDouble_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogRegDouble_sigmoid(x, out)

def ModelLogRegDouble_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    r"""ModelLogRegDouble_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogRegDouble_logistic(x, out)


def ModelLogRegDoubleDeserialize(ptr: 'ModelLogRegDouble', hex: 'std::string const &') -> "void":
    r"""ModelLogRegDoubleDeserialize(ModelLogRegDouble ptr, std::string const & hex)"""
    return _robust.ModelLogRegDoubleDeserialize(ptr, hex)

def ModelLogRegDoubleSerialize(ptr: 'ModelLogRegDouble') -> "std::string":
    r"""ModelLogRegDoubleSerialize(ModelLogRegDouble ptr) -> std::string"""
    return _robust.ModelLogRegDoubleSerialize(ptr)
class ModelLogRegFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelLogRegFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLogRegFloat self) -> ModelLogRegFloat
        __init__(ModelLogRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLogRegFloat
        """
        _robust.ModelLogRegFloat_swiginit(self, _robust.new_ModelLogRegFloat(*args))

    def compare(self, that: 'ModelLogRegFloat') -> "bool":
        r"""compare(ModelLogRegFloat self, ModelLogRegFloat that) -> bool"""
        return _robust.ModelLogRegFloat_compare(self, that)

    @staticmethod
    def sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        r"""sigmoid(Array< float > const & x, Array< float > & out)"""
        return _robust.ModelLogRegFloat_sigmoid(x, out)

    @staticmethod
    def logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        r"""logistic(Array< float > const & x, Array< float > & out)"""
        return _robust.ModelLogRegFloat_logistic(x, out)

    def __getstate__(self): return ModelLogRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLogRegFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLogRegFloat

# Register ModelLogRegFloat in _robust:
_robust.ModelLogRegFloat_swigregister(ModelLogRegFloat)

def ModelLogRegFloat_sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    r"""ModelLogRegFloat_sigmoid(Array< float > const & x, Array< float > & out)"""
    return _robust.ModelLogRegFloat_sigmoid(x, out)

def ModelLogRegFloat_logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    r"""ModelLogRegFloat_logistic(Array< float > const & x, Array< float > & out)"""
    return _robust.ModelLogRegFloat_logistic(x, out)


def ModelLogRegFloatDeserialize(ptr: 'ModelLogRegFloat', hex: 'std::string const &') -> "void":
    r"""ModelLogRegFloatDeserialize(ModelLogRegFloat ptr, std::string const & hex)"""
    return _robust.ModelLogRegFloatDeserialize(ptr, hex)

def ModelLogRegFloatSerialize(ptr: 'ModelLogRegFloat') -> "std::string":
    r"""ModelLogRegFloatSerialize(ModelLogRegFloat ptr) -> std::string"""
    return _robust.ModelLogRegFloatSerialize(ptr)
class ModelLogRegAtomicDouble(ModelGeneralizedLinearAtomicDouble, ModelLipschitzAtomicDouble):
    r"""Proxy of C++ ModelLogRegAtomicDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLogRegAtomicDouble self) -> ModelLogRegAtomicDouble
        __init__(ModelLogRegAtomicDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegAtomicDouble
        """
        _robust.ModelLogRegAtomicDouble_swiginit(self, _robust.new_ModelLogRegAtomicDouble(*args))

    def compare(self, that: 'TModelLogReg< double,std::atomic< double > > const &') -> "bool":
        r"""compare(ModelLogRegAtomicDouble self, TModelLogReg< double,std::atomic< double > > const & that) -> bool"""
        return _robust.ModelLogRegAtomicDouble_compare(self, that)

    @staticmethod
    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogRegAtomicDouble_sigmoid(x, out)

    @staticmethod
    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogRegAtomicDouble_logistic(x, out)
    __swig_destroy__ = _robust.delete_ModelLogRegAtomicDouble

# Register ModelLogRegAtomicDouble in _robust:
_robust.ModelLogRegAtomicDouble_swigregister(ModelLogRegAtomicDouble)

def ModelLogRegAtomicDouble_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    r"""ModelLogRegAtomicDouble_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogRegAtomicDouble_sigmoid(x, out)

def ModelLogRegAtomicDouble_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    r"""ModelLogRegAtomicDouble_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogRegAtomicDouble_logistic(x, out)

class ModelLogRegAtomicFloat(ModelGeneralizedLinearAtomicFloat, ModelLipschitzAtomicFloat):
    r"""Proxy of C++ TModelLogReg< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLogRegAtomicFloat self) -> ModelLogRegAtomicFloat
        __init__(ModelLogRegAtomicFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegAtomicFloat
        """
        _robust.ModelLogRegAtomicFloat_swiginit(self, _robust.new_ModelLogRegAtomicFloat(*args))

    def compare(self, that: 'ModelLogRegAtomicFloat') -> "bool":
        r"""compare(ModelLogRegAtomicFloat self, ModelLogRegAtomicFloat that) -> bool"""
        return _robust.ModelLogRegAtomicFloat_compare(self, that)

    @staticmethod
    def sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        r"""sigmoid(Array< float > const & x, Array< float > & out)"""
        return _robust.ModelLogRegAtomicFloat_sigmoid(x, out)

    @staticmethod
    def logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        r"""logistic(Array< float > const & x, Array< float > & out)"""
        return _robust.ModelLogRegAtomicFloat_logistic(x, out)
    __swig_destroy__ = _robust.delete_ModelLogRegAtomicFloat

# Register ModelLogRegAtomicFloat in _robust:
_robust.ModelLogRegAtomicFloat_swigregister(ModelLogRegAtomicFloat)

def ModelLogRegAtomicFloat_sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    r"""ModelLogRegAtomicFloat_sigmoid(Array< float > const & x, Array< float > & out)"""
    return _robust.ModelLogRegAtomicFloat_sigmoid(x, out)

def ModelLogRegAtomicFloat_logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    r"""ModelLogRegAtomicFloat_logistic(Array< float > const & x, Array< float > & out)"""
    return _robust.ModelLogRegAtomicFloat_logistic(x, out)

LinkType_identity = _robust.LinkType_identity

LinkType_exponential = _robust.LinkType_exponential

class ModelPoisRegDouble(ModelGeneralizedLinearDouble):
    r"""Proxy of C++ ModelPoisRegDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelPoisRegDouble self) -> ModelPoisRegDouble
        __init__(ModelPoisRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads=1) -> ModelPoisRegDouble
        """
        _robust.ModelPoisRegDouble_swiginit(self, _robust.new_ModelPoisRegDouble(*args))

    def compare(self, that: 'ModelPoisRegDouble') -> "bool":
        r"""compare(ModelPoisRegDouble self, ModelPoisRegDouble that) -> bool"""
        return _robust.ModelPoisRegDouble_compare(self, that)

    def __getstate__(self): return ModelPoisRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelPoisRegDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelPoisRegDouble

# Register ModelPoisRegDouble in _robust:
_robust.ModelPoisRegDouble_swigregister(ModelPoisRegDouble)


def ModelPoisRegDoubleDeserialize(ptr: 'ModelPoisRegDouble', hex: 'std::string const &') -> "void":
    r"""ModelPoisRegDoubleDeserialize(ModelPoisRegDouble ptr, std::string const & hex)"""
    return _robust.ModelPoisRegDoubleDeserialize(ptr, hex)

def ModelPoisRegDoubleSerialize(ptr: 'ModelPoisRegDouble') -> "std::string":
    r"""ModelPoisRegDoubleSerialize(ModelPoisRegDouble ptr) -> std::string"""
    return _robust.ModelPoisRegDoubleSerialize(ptr)
class ModelPoisRegFloat(ModelGeneralizedLinearFloat):
    r"""Proxy of C++ ModelPoisRegFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelPoisRegFloat self) -> ModelPoisRegFloat
        __init__(ModelPoisRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads=1) -> ModelPoisRegFloat
        """
        _robust.ModelPoisRegFloat_swiginit(self, _robust.new_ModelPoisRegFloat(*args))

    def compare(self, that: 'ModelPoisRegFloat') -> "bool":
        r"""compare(ModelPoisRegFloat self, ModelPoisRegFloat that) -> bool"""
        return _robust.ModelPoisRegFloat_compare(self, that)

    def __getstate__(self): return ModelPoisRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelPoisRegFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelPoisRegFloat

# Register ModelPoisRegFloat in _robust:
_robust.ModelPoisRegFloat_swigregister(ModelPoisRegFloat)


def ModelPoisRegFloatDeserialize(ptr: 'ModelPoisRegFloat', hex: 'std::string const &') -> "void":
    r"""ModelPoisRegFloatDeserialize(ModelPoisRegFloat ptr, std::string const & hex)"""
    return _robust.ModelPoisRegFloatDeserialize(ptr, hex)

def ModelPoisRegFloatSerialize(ptr: 'ModelPoisRegFloat') -> "std::string":
    r"""ModelPoisRegFloatSerialize(ModelPoisRegFloat ptr) -> std::string"""
    return _robust.ModelPoisRegFloatSerialize(ptr)
class ModelEpsilonInsensitiveDouble(ModelGeneralizedLinearDouble):
    r"""Proxy of C++ ModelEpsilonInsensitiveDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelEpsilonInsensitiveDouble self) -> ModelEpsilonInsensitiveDouble
        __init__(ModelEpsilonInsensitiveDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads=1) -> ModelEpsilonInsensitiveDouble
        """
        _robust.ModelEpsilonInsensitiveDouble_swiginit(self, _robust.new_ModelEpsilonInsensitiveDouble(*args))

    def get_threshold(self) -> "double":
        r"""get_threshold(ModelEpsilonInsensitiveDouble self) -> double"""
        return _robust.ModelEpsilonInsensitiveDouble_get_threshold(self)

    def set_threshold(self, threshold: 'double const') -> "void":
        r"""set_threshold(ModelEpsilonInsensitiveDouble self, double const threshold)"""
        return _robust.ModelEpsilonInsensitiveDouble_set_threshold(self, threshold)

    def compare(self, that: 'ModelEpsilonInsensitiveDouble') -> "bool":
        r"""compare(ModelEpsilonInsensitiveDouble self, ModelEpsilonInsensitiveDouble that) -> bool"""
        return _robust.ModelEpsilonInsensitiveDouble_compare(self, that)

    def __getstate__(self): return ModelEpsilonInsensitiveDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelEpsilonInsensitiveDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelEpsilonInsensitiveDouble

# Register ModelEpsilonInsensitiveDouble in _robust:
_robust.ModelEpsilonInsensitiveDouble_swigregister(ModelEpsilonInsensitiveDouble)


def ModelEpsilonInsensitiveDoubleDeserialize(ptr: 'ModelEpsilonInsensitiveDouble', hex: 'std::string const &') -> "void":
    r"""ModelEpsilonInsensitiveDoubleDeserialize(ModelEpsilonInsensitiveDouble ptr, std::string const & hex)"""
    return _robust.ModelEpsilonInsensitiveDoubleDeserialize(ptr, hex)

def ModelEpsilonInsensitiveDoubleSerialize(ptr: 'ModelEpsilonInsensitiveDouble') -> "std::string":
    r"""ModelEpsilonInsensitiveDoubleSerialize(ModelEpsilonInsensitiveDouble ptr) -> std::string"""
    return _robust.ModelEpsilonInsensitiveDoubleSerialize(ptr)
class ModelEpsilonInsensitiveFloat(ModelGeneralizedLinearFloat):
    r"""Proxy of C++ ModelEpsilonInsensitiveFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelEpsilonInsensitiveFloat self) -> ModelEpsilonInsensitiveFloat
        __init__(ModelEpsilonInsensitiveFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const threshold, int const n_threads=1) -> ModelEpsilonInsensitiveFloat
        """
        _robust.ModelEpsilonInsensitiveFloat_swiginit(self, _robust.new_ModelEpsilonInsensitiveFloat(*args))

    def get_threshold(self) -> "float":
        r"""get_threshold(ModelEpsilonInsensitiveFloat self) -> float"""
        return _robust.ModelEpsilonInsensitiveFloat_get_threshold(self)

    def set_threshold(self, threshold: 'float const') -> "void":
        r"""set_threshold(ModelEpsilonInsensitiveFloat self, float const threshold)"""
        return _robust.ModelEpsilonInsensitiveFloat_set_threshold(self, threshold)

    def compare(self, that: 'ModelEpsilonInsensitiveFloat') -> "bool":
        r"""compare(ModelEpsilonInsensitiveFloat self, ModelEpsilonInsensitiveFloat that) -> bool"""
        return _robust.ModelEpsilonInsensitiveFloat_compare(self, that)

    def __getstate__(self): return ModelEpsilonInsensitiveFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelEpsilonInsensitiveFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelEpsilonInsensitiveFloat

# Register ModelEpsilonInsensitiveFloat in _robust:
_robust.ModelEpsilonInsensitiveFloat_swigregister(ModelEpsilonInsensitiveFloat)


def ModelEpsilonInsensitiveFloatDeserialize(ptr: 'ModelEpsilonInsensitiveFloat', hex: 'std::string const &') -> "void":
    r"""ModelEpsilonInsensitiveFloatDeserialize(ModelEpsilonInsensitiveFloat ptr, std::string const & hex)"""
    return _robust.ModelEpsilonInsensitiveFloatDeserialize(ptr, hex)

def ModelEpsilonInsensitiveFloatSerialize(ptr: 'ModelEpsilonInsensitiveFloat') -> "std::string":
    r"""ModelEpsilonInsensitiveFloatSerialize(ModelEpsilonInsensitiveFloat ptr) -> std::string"""
    return _robust.ModelEpsilonInsensitiveFloatSerialize(ptr)
class ModelHuberDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelHuberDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelHuberDouble self) -> ModelHuberDouble
        __init__(ModelHuberDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads=1) -> ModelHuberDouble
        """
        _robust.ModelHuberDouble_swiginit(self, _robust.new_ModelHuberDouble(*args))

    def get_threshold(self) -> "double":
        r"""get_threshold(ModelHuberDouble self) -> double"""
        return _robust.ModelHuberDouble_get_threshold(self)

    def set_threshold(self, threshold: 'double const') -> "void":
        r"""set_threshold(ModelHuberDouble self, double const threshold)"""
        return _robust.ModelHuberDouble_set_threshold(self, threshold)

    def compare(self, that: 'ModelHuberDouble') -> "bool":
        r"""compare(ModelHuberDouble self, ModelHuberDouble that) -> bool"""
        return _robust.ModelHuberDouble_compare(self, that)

    def __getstate__(self): return ModelHuberDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHuberDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelHuberDouble

# Register ModelHuberDouble in _robust:
_robust.ModelHuberDouble_swigregister(ModelHuberDouble)


def ModelHuberDoubleDeserialize(ptr: 'ModelHuberDouble', hex: 'std::string const &') -> "void":
    r"""ModelHuberDoubleDeserialize(ModelHuberDouble ptr, std::string const & hex)"""
    return _robust.ModelHuberDoubleDeserialize(ptr, hex)

def ModelHuberDoubleSerialize(ptr: 'ModelHuberDouble') -> "std::string":
    r"""ModelHuberDoubleSerialize(ModelHuberDouble ptr) -> std::string"""
    return _robust.ModelHuberDoubleSerialize(ptr)
class ModelHuberFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelHuberFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelHuberFloat self) -> ModelHuberFloat
        __init__(ModelHuberFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const threshold, int const n_threads=1) -> ModelHuberFloat
        """
        _robust.ModelHuberFloat_swiginit(self, _robust.new_ModelHuberFloat(*args))

    def get_threshold(self) -> "float":
        r"""get_threshold(ModelHuberFloat self) -> float"""
        return _robust.ModelHuberFloat_get_threshold(self)

    def set_threshold(self, threshold: 'float const') -> "void":
        r"""set_threshold(ModelHuberFloat self, float const threshold)"""
        return _robust.ModelHuberFloat_set_threshold(self, threshold)

    def compare(self, that: 'ModelHuberFloat') -> "bool":
        r"""compare(ModelHuberFloat self, ModelHuberFloat that) -> bool"""
        return _robust.ModelHuberFloat_compare(self, that)

    def __getstate__(self): return ModelHuberFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHuberFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelHuberFloat

# Register ModelHuberFloat in _robust:
_robust.ModelHuberFloat_swigregister(ModelHuberFloat)


def ModelHuberFloatDeserialize(ptr: 'ModelHuberFloat', hex: 'std::string const &') -> "void":
    r"""ModelHuberFloatDeserialize(ModelHuberFloat ptr, std::string const & hex)"""
    return _robust.ModelHuberFloatDeserialize(ptr, hex)

def ModelHuberFloatSerialize(ptr: 'ModelHuberFloat') -> "std::string":
    r"""ModelHuberFloatSerialize(ModelHuberFloat ptr) -> std::string"""
    return _robust.ModelHuberFloatSerialize(ptr)
class ModelModifiedHuberDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelModifiedHuberDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelModifiedHuberDouble self) -> ModelModifiedHuberDouble
        __init__(ModelModifiedHuberDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelModifiedHuberDouble
        """
        _robust.ModelModifiedHuberDouble_swiginit(self, _robust.new_ModelModifiedHuberDouble(*args))

    def compare(self, that: 'ModelModifiedHuberDouble') -> "bool":
        r"""compare(ModelModifiedHuberDouble self, ModelModifiedHuberDouble that) -> bool"""
        return _robust.ModelModifiedHuberDouble_compare(self, that)

    def __getstate__(self): return ModelModifiedHuberDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelModifiedHuberDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelModifiedHuberDouble

# Register ModelModifiedHuberDouble in _robust:
_robust.ModelModifiedHuberDouble_swigregister(ModelModifiedHuberDouble)


def ModelModifiedHuberDoubleDeserialize(ptr: 'ModelModifiedHuberDouble', hex: 'std::string const &') -> "void":
    r"""ModelModifiedHuberDoubleDeserialize(ModelModifiedHuberDouble ptr, std::string const & hex)"""
    return _robust.ModelModifiedHuberDoubleDeserialize(ptr, hex)

def ModelModifiedHuberDoubleSerialize(ptr: 'ModelModifiedHuberDouble') -> "std::string":
    r"""ModelModifiedHuberDoubleSerialize(ModelModifiedHuberDouble ptr) -> std::string"""
    return _robust.ModelModifiedHuberDoubleSerialize(ptr)
class ModelModifiedHuberFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelModifiedHuberFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelModifiedHuberFloat self) -> ModelModifiedHuberFloat
        __init__(ModelModifiedHuberFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelModifiedHuberFloat
        """
        _robust.ModelModifiedHuberFloat_swiginit(self, _robust.new_ModelModifiedHuberFloat(*args))

    def compare(self, that: 'ModelModifiedHuberFloat') -> "bool":
        r"""compare(ModelModifiedHuberFloat self, ModelModifiedHuberFloat that) -> bool"""
        return _robust.ModelModifiedHuberFloat_compare(self, that)

    def __getstate__(self): return ModelModifiedHuberFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelModifiedHuberFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelModifiedHuberFloat

# Register ModelModifiedHuberFloat in _robust:
_robust.ModelModifiedHuberFloat_swigregister(ModelModifiedHuberFloat)


def ModelModifiedHuberFloatDeserialize(ptr: 'ModelModifiedHuberFloat', hex: 'std::string const &') -> "void":
    r"""ModelModifiedHuberFloatDeserialize(ModelModifiedHuberFloat ptr, std::string const & hex)"""
    return _robust.ModelModifiedHuberFloatDeserialize(ptr, hex)

def ModelModifiedHuberFloatSerialize(ptr: 'ModelModifiedHuberFloat') -> "std::string":
    r"""ModelModifiedHuberFloatSerialize(ModelModifiedHuberFloat ptr) -> std::string"""
    return _robust.ModelModifiedHuberFloatSerialize(ptr)
class ModelAbsoluteRegressionDouble(ModelGeneralizedLinearDouble):
    r"""Proxy of C++ ModelAbsoluteRegressionDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelAbsoluteRegressionDouble self) -> ModelAbsoluteRegressionDouble
        __init__(ModelAbsoluteRegressionDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelAbsoluteRegressionDouble
        """
        _robust.ModelAbsoluteRegressionDouble_swiginit(self, _robust.new_ModelAbsoluteRegressionDouble(*args))

    def compare(self, that: 'ModelAbsoluteRegressionDouble') -> "bool":
        r"""compare(ModelAbsoluteRegressionDouble self, ModelAbsoluteRegressionDouble that) -> bool"""
        return _robust.ModelAbsoluteRegressionDouble_compare(self, that)

    def __getstate__(self): return ModelAbsoluteRegressionDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelAbsoluteRegressionDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelAbsoluteRegressionDouble

# Register ModelAbsoluteRegressionDouble in _robust:
_robust.ModelAbsoluteRegressionDouble_swigregister(ModelAbsoluteRegressionDouble)


def ModelAbsoluteRegressionDoubleDeserialize(ptr: 'ModelAbsoluteRegressionDouble', hex: 'std::string const &') -> "void":
    r"""ModelAbsoluteRegressionDoubleDeserialize(ModelAbsoluteRegressionDouble ptr, std::string const & hex)"""
    return _robust.ModelAbsoluteRegressionDoubleDeserialize(ptr, hex)

def ModelAbsoluteRegressionDoubleSerialize(ptr: 'ModelAbsoluteRegressionDouble') -> "std::string":
    r"""ModelAbsoluteRegressionDoubleSerialize(ModelAbsoluteRegressionDouble ptr) -> std::string"""
    return _robust.ModelAbsoluteRegressionDoubleSerialize(ptr)
class ModelAbsoluteRegressionFloat(ModelGeneralizedLinearFloat):
    r"""Proxy of C++ ModelAbsoluteRegressionFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelAbsoluteRegressionFloat self) -> ModelAbsoluteRegressionFloat
        __init__(ModelAbsoluteRegressionFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelAbsoluteRegressionFloat
        """
        _robust.ModelAbsoluteRegressionFloat_swiginit(self, _robust.new_ModelAbsoluteRegressionFloat(*args))

    def compare(self, that: 'ModelAbsoluteRegressionFloat') -> "bool":
        r"""compare(ModelAbsoluteRegressionFloat self, ModelAbsoluteRegressionFloat that) -> bool"""
        return _robust.ModelAbsoluteRegressionFloat_compare(self, that)

    def __getstate__(self): return ModelAbsoluteRegressionFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelAbsoluteRegressionFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelAbsoluteRegressionFloat

# Register ModelAbsoluteRegressionFloat in _robust:
_robust.ModelAbsoluteRegressionFloat_swigregister(ModelAbsoluteRegressionFloat)


def ModelAbsoluteRegressionFloatDeserialize(ptr: 'ModelAbsoluteRegressionFloat', hex: 'std::string const &') -> "void":
    r"""ModelAbsoluteRegressionFloatDeserialize(ModelAbsoluteRegressionFloat ptr, std::string const & hex)"""
    return _robust.ModelAbsoluteRegressionFloatDeserialize(ptr, hex)

def ModelAbsoluteRegressionFloatSerialize(ptr: 'ModelAbsoluteRegressionFloat') -> "std::string":
    r"""ModelAbsoluteRegressionFloatSerialize(ModelAbsoluteRegressionFloat ptr) -> std::string"""
    return _robust.ModelAbsoluteRegressionFloatSerialize(ptr)
class ModelGeneralizedLinearWithInterceptsDouble(ModelGeneralizedLinearDouble):
    r"""Proxy of C++ ModelGeneralizedLinearWithInterceptsDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelGeneralizedLinearWithInterceptsDouble self) -> ModelGeneralizedLinearWithInterceptsDouble
        __init__(ModelGeneralizedLinearWithInterceptsDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearWithInterceptsDouble
        """
        _robust.ModelGeneralizedLinearWithInterceptsDouble_swiginit(self, _robust.new_ModelGeneralizedLinearWithInterceptsDouble(*args))

    def compare(self, that: 'ModelGeneralizedLinearWithInterceptsDouble') -> "bool":
        r"""compare(ModelGeneralizedLinearWithInterceptsDouble self, ModelGeneralizedLinearWithInterceptsDouble that) -> bool"""
        return _robust.ModelGeneralizedLinearWithInterceptsDouble_compare(self, that)

    def __getstate__(self): return ModelGeneralizedLinearWithInterceptsDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelGeneralizedLinearWithInterceptsDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearWithInterceptsDouble

# Register ModelGeneralizedLinearWithInterceptsDouble in _robust:
_robust.ModelGeneralizedLinearWithInterceptsDouble_swigregister(ModelGeneralizedLinearWithInterceptsDouble)


def ModelGeneralizedLinearWithInterceptsDoubleDeserialize(ptr: 'ModelGeneralizedLinearWithInterceptsDouble', hex: 'std::string const &') -> "void":
    r"""ModelGeneralizedLinearWithInterceptsDoubleDeserialize(ModelGeneralizedLinearWithInterceptsDouble ptr, std::string const & hex)"""
    return _robust.ModelGeneralizedLinearWithInterceptsDoubleDeserialize(ptr, hex)

def ModelGeneralizedLinearWithInterceptsDoubleSerialize(ptr: 'ModelGeneralizedLinearWithInterceptsDouble') -> "std::string":
    r"""ModelGeneralizedLinearWithInterceptsDoubleSerialize(ModelGeneralizedLinearWithInterceptsDouble ptr) -> std::string"""
    return _robust.ModelGeneralizedLinearWithInterceptsDoubleSerialize(ptr)
class ModelGeneralizedLinearWithInterceptsFloat(ModelGeneralizedLinearFloat):
    r"""Proxy of C++ ModelGeneralizedLinearWithInterceptsFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelGeneralizedLinearWithInterceptsFloat self) -> ModelGeneralizedLinearWithInterceptsFloat
        __init__(ModelGeneralizedLinearWithInterceptsFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearWithInterceptsFloat
        """
        _robust.ModelGeneralizedLinearWithInterceptsFloat_swiginit(self, _robust.new_ModelGeneralizedLinearWithInterceptsFloat(*args))

    def compare(self, that: 'ModelGeneralizedLinearWithInterceptsFloat') -> "bool":
        r"""compare(ModelGeneralizedLinearWithInterceptsFloat self, ModelGeneralizedLinearWithInterceptsFloat that) -> bool"""
        return _robust.ModelGeneralizedLinearWithInterceptsFloat_compare(self, that)

    def __getstate__(self): return ModelGeneralizedLinearWithInterceptsFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelGeneralizedLinearWithInterceptsFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearWithInterceptsFloat

# Register ModelGeneralizedLinearWithInterceptsFloat in _robust:
_robust.ModelGeneralizedLinearWithInterceptsFloat_swigregister(ModelGeneralizedLinearWithInterceptsFloat)


def ModelGeneralizedLinearWithInterceptsFloatDeserialize(ptr: 'ModelGeneralizedLinearWithInterceptsFloat', hex: 'std::string const &') -> "void":
    r"""ModelGeneralizedLinearWithInterceptsFloatDeserialize(ModelGeneralizedLinearWithInterceptsFloat ptr, std::string const & hex)"""
    return _robust.ModelGeneralizedLinearWithInterceptsFloatDeserialize(ptr, hex)

def ModelGeneralizedLinearWithInterceptsFloatSerialize(ptr: 'ModelGeneralizedLinearWithInterceptsFloat') -> "std::string":
    r"""ModelGeneralizedLinearWithInterceptsFloatSerialize(ModelGeneralizedLinearWithInterceptsFloat ptr) -> std::string"""
    return _robust.ModelGeneralizedLinearWithInterceptsFloatSerialize(ptr)
class ModelLinRegWithInterceptsDouble(ModelGeneralizedLinearWithInterceptsDouble, ModelLinRegDouble):
    r"""Proxy of C++ ModelLinRegWithInterceptsDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLinRegWithInterceptsDouble self) -> ModelLinRegWithInterceptsDouble
        __init__(ModelLinRegWithInterceptsDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegWithInterceptsDouble
        """
        _robust.ModelLinRegWithInterceptsDouble_swiginit(self, _robust.new_ModelLinRegWithInterceptsDouble(*args))

    def compare(self, that: 'ModelLinRegWithInterceptsDouble') -> "bool":
        r"""compare(ModelLinRegWithInterceptsDouble self, ModelLinRegWithInterceptsDouble that) -> bool"""
        return _robust.ModelLinRegWithInterceptsDouble_compare(self, that)

    def __getstate__(self): return ModelLinRegWithInterceptsDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegWithInterceptsDoubleDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLinRegWithInterceptsDouble

# Register ModelLinRegWithInterceptsDouble in _robust:
_robust.ModelLinRegWithInterceptsDouble_swigregister(ModelLinRegWithInterceptsDouble)


def ModelLinRegWithInterceptsDoubleDeserialize(ptr: 'ModelLinRegWithInterceptsDouble', hex: 'std::string const &') -> "void":
    r"""ModelLinRegWithInterceptsDoubleDeserialize(ModelLinRegWithInterceptsDouble ptr, std::string const & hex)"""
    return _robust.ModelLinRegWithInterceptsDoubleDeserialize(ptr, hex)

def ModelLinRegWithInterceptsDoubleSerialize(ptr: 'ModelLinRegWithInterceptsDouble') -> "std::string":
    r"""ModelLinRegWithInterceptsDoubleSerialize(ModelLinRegWithInterceptsDouble ptr) -> std::string"""
    return _robust.ModelLinRegWithInterceptsDoubleSerialize(ptr)
class ModelLinRegWithInterceptsFloat(ModelGeneralizedLinearWithInterceptsFloat, ModelLinRegFloat):
    r"""Proxy of C++ ModelLinRegWithInterceptsFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLinRegWithInterceptsFloat self) -> ModelLinRegWithInterceptsFloat
        __init__(ModelLinRegWithInterceptsFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegWithInterceptsFloat
        """
        _robust.ModelLinRegWithInterceptsFloat_swiginit(self, _robust.new_ModelLinRegWithInterceptsFloat(*args))

    def compare(self, that: 'ModelLinRegWithInterceptsFloat') -> "bool":
        r"""compare(ModelLinRegWithInterceptsFloat self, ModelLinRegWithInterceptsFloat that) -> bool"""
        return _robust.ModelLinRegWithInterceptsFloat_compare(self, that)

    def __getstate__(self): return ModelLinRegWithInterceptsFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegWithInterceptsFloatDeserialize(self, s)

    __swig_destroy__ = _robust.delete_ModelLinRegWithInterceptsFloat

# Register ModelLinRegWithInterceptsFloat in _robust:
_robust.ModelLinRegWithInterceptsFloat_swigregister(ModelLinRegWithInterceptsFloat)


def ModelLinRegWithInterceptsFloatDeserialize(ptr: 'ModelLinRegWithInterceptsFloat', hex: 'std::string const &') -> "void":
    r"""ModelLinRegWithInterceptsFloatDeserialize(ModelLinRegWithInterceptsFloat ptr, std::string const & hex)"""
    return _robust.ModelLinRegWithInterceptsFloatDeserialize(ptr, hex)

def ModelLinRegWithInterceptsFloatSerialize(ptr: 'ModelLinRegWithInterceptsFloat') -> "std::string":
    r"""ModelLinRegWithInterceptsFloatSerialize(ModelLinRegWithInterceptsFloat ptr) -> std::string"""
    return _robust.ModelLinRegWithInterceptsFloatSerialize(ptr)


