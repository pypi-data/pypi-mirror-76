# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _solver
else:
    import _solver

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _solver.SHARED_PTR_DISOWN

import tick.base
import tick.array.build.array
class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _solver.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _solver.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _solver.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _solver.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _solver.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _solver.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _solver.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _solver.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _solver.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _solver.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _solver.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _solver.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _solver.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _solver.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _solver.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _solver.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _solver.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _solver:
_solver.SwigPyIterator_swigregister(SwigPyIterator)

class Model(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Model self) -> Model"""
        _solver.Model_swiginit(self, _solver.new_Model())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _solver.Model_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _solver.Model_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(Model self) -> unsigned long"""
        return _solver.Model_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(Model self) -> bool"""
        return _solver.Model_is_sparse(self)
    __swig_destroy__ = _solver.delete_Model

# Register Model in _solver:
_solver.Model_swigregister(Model)

class ModelDouble(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelDouble self) -> ModelDouble"""
        _solver.ModelDouble_swiginit(self, _solver.new_ModelDouble())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _solver.ModelDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _solver.ModelDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelDouble self) -> unsigned long"""
        return _solver.ModelDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelDouble self) -> bool"""
        return _solver.ModelDouble_is_sparse(self)
    __swig_destroy__ = _solver.delete_ModelDouble

# Register ModelDouble in _solver:
_solver.ModelDouble_swigregister(ModelDouble)

class ModelFloat(object):
    r"""Proxy of C++ TModel< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelFloat self) -> ModelFloat"""
        _solver.ModelFloat_swiginit(self, _solver.new_ModelFloat())

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _solver.ModelFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        r"""loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _solver.ModelFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelFloat self) -> unsigned long"""
        return _solver.ModelFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelFloat self) -> bool"""
        return _solver.ModelFloat_is_sparse(self)
    __swig_destroy__ = _solver.delete_ModelFloat

# Register ModelFloat in _solver:
_solver.ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(object):
    r"""Proxy of C++ TModel< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicDouble self) -> ModelAtomicDouble"""
        _solver.ModelAtomicDouble_swiginit(self, _solver.new_ModelAtomicDouble())

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _solver.ModelAtomicDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        r"""loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _solver.ModelAtomicDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _solver.ModelAtomicDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicDouble self) -> bool"""
        return _solver.ModelAtomicDouble_is_sparse(self)
    __swig_destroy__ = _solver.delete_ModelAtomicDouble

# Register ModelAtomicDouble in _solver:
_solver.ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(object):
    r"""Proxy of C++ TModel< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicFloat self) -> ModelAtomicFloat"""
        _solver.ModelAtomicFloat_swiginit(self, _solver.new_ModelAtomicFloat())

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _solver.ModelAtomicFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        r"""loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _solver.ModelAtomicFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _solver.ModelAtomicFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicFloat self) -> bool"""
        return _solver.ModelAtomicFloat_is_sparse(self)
    __swig_destroy__ = _solver.delete_ModelAtomicFloat

# Register ModelAtomicFloat in _solver:
_solver.ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    r"""Proxy of C++ TModelLabelsFeatures< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        _solver.ModelLabelsFeaturesDouble_swiginit(self, _solver.new_ModelLabelsFeaturesDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _solver.ModelLabelsFeaturesDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _solver.ModelLabelsFeaturesDouble_get_n_features(self)
    __swig_destroy__ = _solver.delete_ModelLabelsFeaturesDouble

# Register ModelLabelsFeaturesDouble in _solver:
_solver.ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        _solver.ModelLabelsFeaturesFloat_swiginit(self, _solver.new_ModelLabelsFeaturesFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _solver.ModelLabelsFeaturesFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _solver.ModelLabelsFeaturesFloat_get_n_features(self)
    __swig_destroy__ = _solver.delete_ModelLabelsFeaturesFloat

# Register ModelLabelsFeaturesFloat in _solver:
_solver.ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLabelsFeatures< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        _solver.ModelLabelsFeaturesAtomicDouble_swiginit(self, _solver.new_ModelLabelsFeaturesAtomicDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _solver.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _solver.ModelLabelsFeaturesAtomicDouble_get_n_features(self)
    __swig_destroy__ = _solver.delete_ModelLabelsFeaturesAtomicDouble

# Register ModelLabelsFeaturesAtomicDouble in _solver:
_solver.ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        _solver.ModelLabelsFeaturesAtomicFloat_swiginit(self, _solver.new_ModelLabelsFeaturesAtomicFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _solver.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _solver.ModelLabelsFeaturesAtomicFloat_get_n_features(self)
    __swig_destroy__ = _solver.delete_ModelLabelsFeaturesAtomicFloat

# Register ModelLabelsFeaturesAtomicFloat in _solver:
_solver.ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitz self) -> ModelLipschitz"""
        _solver.ModelLipschitz_swiginit(self, _solver.new_ModelLipschitz())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitz self) -> double"""
        return _solver.ModelLipschitz_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitz self) -> double"""
        return _solver.ModelLipschitz_get_lip_mean(self)
    __swig_destroy__ = _solver.delete_ModelLipschitz

# Register ModelLipschitz in _solver:
_solver.ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzDouble self) -> ModelLipschitzDouble"""
        _solver.ModelLipschitzDouble_swiginit(self, _solver.new_ModelLipschitzDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzDouble self) -> double"""
        return _solver.ModelLipschitzDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _solver.ModelLipschitzDouble_get_lip_mean(self)
    __swig_destroy__ = _solver.delete_ModelLipschitzDouble

# Register ModelLipschitzDouble in _solver:
_solver.ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    r"""Proxy of C++ TModelLipschitz< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzFloat self) -> ModelLipschitzFloat"""
        _solver.ModelLipschitzFloat_swiginit(self, _solver.new_ModelLipschitzFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzFloat self) -> float"""
        return _solver.ModelLipschitzFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _solver.ModelLipschitzFloat_get_lip_mean(self)
    __swig_destroy__ = _solver.delete_ModelLipschitzFloat

# Register ModelLipschitzFloat in _solver:
_solver.ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLipschitz< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicDouble self) -> ModelLipschitzAtomicDouble"""
        _solver.ModelLipschitzAtomicDouble_swiginit(self, _solver.new_ModelLipschitzAtomicDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _solver.ModelLipschitzAtomicDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _solver.ModelLipschitzAtomicDouble_get_lip_mean(self)
    __swig_destroy__ = _solver.delete_ModelLipschitzAtomicDouble

# Register ModelLipschitzAtomicDouble in _solver:
_solver.ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLipschitz< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicFloat self) -> ModelLipschitzAtomicFloat"""
        _solver.ModelLipschitzAtomicFloat_swiginit(self, _solver.new_ModelLipschitzAtomicFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _solver.ModelLipschitzAtomicFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _solver.ModelLipschitzAtomicFloat_get_lip_mean(self)
    __swig_destroy__ = _solver.delete_ModelLipschitzAtomicFloat

# Register ModelLipschitzAtomicFloat in _solver:
_solver.ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble"""
        _solver.ModelGeneralizedLinearDouble_swiginit(self, _solver.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _solver.ModelGeneralizedLinearDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _solver.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _solver.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _solver.delete_ModelGeneralizedLinearDouble

# Register ModelGeneralizedLinearDouble in _solver:
_solver.ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat"""
        _solver.ModelGeneralizedLinearFloat_swiginit(self, _solver.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _solver.ModelGeneralizedLinearFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _solver.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _solver.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _solver.delete_ModelGeneralizedLinearFloat

# Register ModelGeneralizedLinearFloat in _solver:
_solver.ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble"""
        _solver.ModelGeneralizedLinearAtomicDouble_swiginit(self, _solver.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _solver.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _solver.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _solver.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _solver.delete_ModelGeneralizedLinearAtomicDouble

# Register ModelGeneralizedLinearAtomicDouble in _solver:
_solver.ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat"""
        _solver.ModelGeneralizedLinearAtomicFloat_swiginit(self, _solver.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _solver.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _solver.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _solver.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _solver.delete_ModelGeneralizedLinearAtomicFloat

# Register ModelGeneralizedLinearAtomicFloat in _solver:
_solver.ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

class Prox(object):
    r"""Proxy of C++ TProx< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Prox self, double strength, bool positive) -> Prox
        __init__(Prox self, double strength, unsigned long start, unsigned long end, bool positive) -> Prox
        """
        _solver.Prox_swiginit(self, _solver.new_Prox(*args))

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        r"""call(Prox self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _solver.Prox_call(self, coeffs, step, out)

    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""value(Prox self, ArrayDouble const & coeffs) -> double"""
        return _solver.Prox_value(self, coeffs)

    def get_strength(self) -> "double":
        r"""get_strength(Prox self) -> double"""
        return _solver.Prox_get_strength(self)

    def set_strength(self, strength: 'double') -> "void":
        r"""set_strength(Prox self, double strength)"""
        return _solver.Prox_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(Prox self) -> ulong"""
        return _solver.Prox_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(Prox self) -> ulong"""
        return _solver.Prox_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(Prox self, ulong start, ulong end)"""
        return _solver.Prox_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(Prox self) -> bool"""
        return _solver.Prox_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(Prox self, bool positive)"""
        return _solver.Prox_set_positive(self, positive)
    __swig_destroy__ = _solver.delete_Prox

# Register Prox in _solver:
_solver.Prox_swigregister(Prox)

class ProxDouble(object):
    r"""Proxy of C++ TProx< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxDouble self, double strength, bool positive) -> ProxDouble
        __init__(ProxDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxDouble
        """
        _solver.ProxDouble_swiginit(self, _solver.new_ProxDouble(*args))

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        r"""call(ProxDouble self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _solver.ProxDouble_call(self, coeffs, step, out)

    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""value(ProxDouble self, ArrayDouble const & coeffs) -> double"""
        return _solver.ProxDouble_value(self, coeffs)

    def get_strength(self) -> "double":
        r"""get_strength(ProxDouble self) -> double"""
        return _solver.ProxDouble_get_strength(self)

    def set_strength(self, strength: 'double') -> "void":
        r"""set_strength(ProxDouble self, double strength)"""
        return _solver.ProxDouble_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(ProxDouble self) -> ulong"""
        return _solver.ProxDouble_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(ProxDouble self) -> ulong"""
        return _solver.ProxDouble_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(ProxDouble self, ulong start, ulong end)"""
        return _solver.ProxDouble_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(ProxDouble self) -> bool"""
        return _solver.ProxDouble_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxDouble self, bool positive)"""
        return _solver.ProxDouble_set_positive(self, positive)
    __swig_destroy__ = _solver.delete_ProxDouble

# Register ProxDouble in _solver:
_solver.ProxDouble_swigregister(ProxDouble)

class ProxFloat(object):
    r"""Proxy of C++ TProx< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxFloat self, float strength, bool positive) -> ProxFloat
        __init__(ProxFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxFloat
        """
        _solver.ProxFloat_swiginit(self, _solver.new_ProxFloat(*args))

    def call(self, coeffs: 'ArrayFloat const &', step: 'float', out: 'ArrayFloat &') -> "void":
        r"""call(ProxFloat self, ArrayFloat const & coeffs, float step, ArrayFloat & out)"""
        return _solver.ProxFloat_call(self, coeffs, step, out)

    def value(self, coeffs: 'ArrayFloat const &') -> "float":
        r"""value(ProxFloat self, ArrayFloat const & coeffs) -> float"""
        return _solver.ProxFloat_value(self, coeffs)

    def get_strength(self) -> "float":
        r"""get_strength(ProxFloat self) -> float"""
        return _solver.ProxFloat_get_strength(self)

    def set_strength(self, strength: 'float') -> "void":
        r"""set_strength(ProxFloat self, float strength)"""
        return _solver.ProxFloat_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(ProxFloat self) -> ulong"""
        return _solver.ProxFloat_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(ProxFloat self) -> ulong"""
        return _solver.ProxFloat_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(ProxFloat self, ulong start, ulong end)"""
        return _solver.ProxFloat_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(ProxFloat self) -> bool"""
        return _solver.ProxFloat_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxFloat self, bool positive)"""
        return _solver.ProxFloat_set_positive(self, positive)
    __swig_destroy__ = _solver.delete_ProxFloat

# Register ProxFloat in _solver:
_solver.ProxFloat_swigregister(ProxFloat)

class ProxAtomicDouble(object):
    r"""Proxy of C++ TProx< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxAtomicDouble self, double strength, bool positive) -> ProxAtomicDouble
        __init__(ProxAtomicDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxAtomicDouble
        """
        _solver.ProxAtomicDouble_swiginit(self, _solver.new_ProxAtomicDouble(*args))

    def call(self, coeffs: 'Array< std::atomic< double > > const &', step: 'double', out: 'Array< std::atomic< double > > &') -> "void":
        r"""call(ProxAtomicDouble self, Array< std::atomic< double > > const & coeffs, double step, Array< std::atomic< double > > & out)"""
        return _solver.ProxAtomicDouble_call(self, coeffs, step, out)

    def value(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        r"""value(ProxAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _solver.ProxAtomicDouble_value(self, coeffs)

    def get_strength(self) -> "double":
        r"""get_strength(ProxAtomicDouble self) -> double"""
        return _solver.ProxAtomicDouble_get_strength(self)

    def set_strength(self, strength: 'double') -> "void":
        r"""set_strength(ProxAtomicDouble self, double strength)"""
        return _solver.ProxAtomicDouble_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(ProxAtomicDouble self) -> ulong"""
        return _solver.ProxAtomicDouble_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(ProxAtomicDouble self) -> ulong"""
        return _solver.ProxAtomicDouble_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(ProxAtomicDouble self, ulong start, ulong end)"""
        return _solver.ProxAtomicDouble_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(ProxAtomicDouble self) -> bool"""
        return _solver.ProxAtomicDouble_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxAtomicDouble self, bool positive)"""
        return _solver.ProxAtomicDouble_set_positive(self, positive)
    __swig_destroy__ = _solver.delete_ProxAtomicDouble

# Register ProxAtomicDouble in _solver:
_solver.ProxAtomicDouble_swigregister(ProxAtomicDouble)

class TProxAtomicFloat(object):
    r"""Proxy of C++ TProx< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TProxAtomicFloat self, float strength, bool positive) -> TProxAtomicFloat
        __init__(TProxAtomicFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxAtomicFloat
        """
        _solver.TProxAtomicFloat_swiginit(self, _solver.new_TProxAtomicFloat(*args))

    def call(self, coeffs: 'Array< std::atomic< float > > const &', step: 'float', out: 'Array< std::atomic< float > > &') -> "void":
        r"""call(TProxAtomicFloat self, Array< std::atomic< float > > const & coeffs, float step, Array< std::atomic< float > > & out)"""
        return _solver.TProxAtomicFloat_call(self, coeffs, step, out)

    def value(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        r"""value(TProxAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _solver.TProxAtomicFloat_value(self, coeffs)

    def get_strength(self) -> "float":
        r"""get_strength(TProxAtomicFloat self) -> float"""
        return _solver.TProxAtomicFloat_get_strength(self)

    def set_strength(self, strength: 'float') -> "void":
        r"""set_strength(TProxAtomicFloat self, float strength)"""
        return _solver.TProxAtomicFloat_set_strength(self, strength)

    def get_start(self) -> "ulong":
        r"""get_start(TProxAtomicFloat self) -> ulong"""
        return _solver.TProxAtomicFloat_get_start(self)

    def get_end(self) -> "ulong":
        r"""get_end(TProxAtomicFloat self) -> ulong"""
        return _solver.TProxAtomicFloat_get_end(self)

    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        r"""set_start_end(TProxAtomicFloat self, ulong start, ulong end)"""
        return _solver.TProxAtomicFloat_set_start_end(self, start, end)

    def get_positive(self) -> "bool":
        r"""get_positive(TProxAtomicFloat self) -> bool"""
        return _solver.TProxAtomicFloat_get_positive(self)

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(TProxAtomicFloat self, bool positive)"""
        return _solver.TProxAtomicFloat_set_positive(self, positive)
    __swig_destroy__ = _solver.delete_TProxAtomicFloat

# Register TProxAtomicFloat in _solver:
_solver.TProxAtomicFloat_swigregister(TProxAtomicFloat)

class TProxSeparableDouble(Prox):
    r"""Proxy of C++ TProxSeparable< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TProxSeparableDouble self, double strength, bool positive) -> TProxSeparableDouble
        __init__(TProxSeparableDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableDouble
        """
        _solver.TProxSeparableDouble_swiginit(self, _solver.new_TProxSeparableDouble(*args))

    def call(self, *args) -> "void":
        r"""
        call(TProxSeparableDouble self, ArrayDouble const & coeffs, double step, ArrayDouble & out)
        call(TProxSeparableDouble self, ArrayDouble const & coeffs, ArrayDouble const & step, ArrayDouble & out)
        """
        return _solver.TProxSeparableDouble_call(self, *args)
    __swig_destroy__ = _solver.delete_TProxSeparableDouble

# Register TProxSeparableDouble in _solver:
_solver.TProxSeparableDouble_swigregister(TProxSeparableDouble)

class TProxSeparableFloat(ProxFloat):
    r"""Proxy of C++ TProxSeparable< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        TProxSeparable(float strength, bool positive) -> TProxSeparableFloat
        __init__(TProxSeparableFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableFloat
        """
        _solver.TProxSeparableFloat_swiginit(self, _solver.new_TProxSeparableFloat(*args))

    def call(self, *args) -> "void":
        r"""
        call(TProxSeparableFloat self, ArrayFloat const & coeffs, float step, ArrayFloat & out)
        call(TProxSeparableFloat self, ArrayFloat const & coeffs, ArrayFloat const & step, ArrayFloat & out)
        """
        return _solver.TProxSeparableFloat_call(self, *args)
    __swig_destroy__ = _solver.delete_TProxSeparableFloat

# Register TProxSeparableFloat in _solver:
_solver.TProxSeparableFloat_swigregister(TProxSeparableFloat)

class TProxSeparableAtomicDouble(ProxAtomicDouble):
    r"""Proxy of C++ TProxSeparable< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TProxSeparableAtomicDouble self, double strength, bool positive) -> TProxSeparableAtomicDouble
        __init__(TProxSeparableAtomicDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableAtomicDouble
        """
        _solver.TProxSeparableAtomicDouble_swiginit(self, _solver.new_TProxSeparableAtomicDouble(*args))

    def call(self, *args) -> "void":
        r"""
        call(TProxSeparableAtomicDouble self, Array< std::atomic< double > > const & coeffs, double step, Array< std::atomic< double > > & out)
        call(TProxSeparableAtomicDouble self, Array< std::atomic< double > > const & coeffs, Array< double > const & step, Array< std::atomic< double > > & out)
        """
        return _solver.TProxSeparableAtomicDouble_call(self, *args)
    __swig_destroy__ = _solver.delete_TProxSeparableAtomicDouble

# Register TProxSeparableAtomicDouble in _solver:
_solver.TProxSeparableAtomicDouble_swigregister(TProxSeparableAtomicDouble)

class TProxSeparableAtomicFloat(TProxAtomicFloat):
    r"""Proxy of C++ TProxSeparable< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TProxSeparableAtomicFloat self, float strength, bool positive) -> TProxSeparableAtomicFloat
        __init__(TProxSeparableAtomicFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableAtomicFloat
        """
        _solver.TProxSeparableAtomicFloat_swiginit(self, _solver.new_TProxSeparableAtomicFloat(*args))

    def call(self, *args) -> "void":
        r"""
        call(TProxSeparableAtomicFloat self, Array< std::atomic< float > > const & coeffs, float step, Array< std::atomic< float > > & out)
        call(TProxSeparableAtomicFloat self, Array< std::atomic< float > > const & coeffs, Array< float > const & step, Array< std::atomic< float > > & out)
        """
        return _solver.TProxSeparableAtomicFloat_call(self, *args)
    __swig_destroy__ = _solver.delete_TProxSeparableAtomicFloat

# Register TProxSeparableAtomicFloat in _solver:
_solver.TProxSeparableAtomicFloat_swigregister(TProxSeparableAtomicFloat)

class ProxZeroDouble(Prox):
    r"""Proxy of C++ TProxZero< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxZeroDouble self) -> ProxZeroDouble
        __init__(ProxZeroDouble self, double strength) -> ProxZeroDouble
        __init__(ProxZeroDouble self, double strength, unsigned long start, unsigned long end) -> ProxZeroDouble
        """
        _solver.ProxZeroDouble_swiginit(self, _solver.new_ProxZeroDouble(*args))

    def compare(self, that: 'ProxZeroDouble') -> "bool":
        r"""compare(ProxZeroDouble self, ProxZeroDouble that) -> bool"""
        return _solver.ProxZeroDouble_compare(self, that)

    def __getstate__(self): return ProxZeroDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxZeroDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxZeroDouble

# Register ProxZeroDouble in _solver:
_solver.ProxZeroDouble_swigregister(ProxZeroDouble)


def ProxZeroDoubleDeserialize(ptr: 'ProxZeroDouble', hex: 'std::string const &') -> "void":
    r"""ProxZeroDoubleDeserialize(ProxZeroDouble ptr, std::string const & hex)"""
    return _solver.ProxZeroDoubleDeserialize(ptr, hex)

def ProxZeroDoubleSerialize(ptr: 'ProxZeroDouble') -> "std::string":
    r"""ProxZeroDoubleSerialize(ProxZeroDouble ptr) -> std::string"""
    return _solver.ProxZeroDoubleSerialize(ptr)
class ProxZeroFloat(ProxFloat):
    r"""Proxy of C++ TProxZero< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxZeroFloat self) -> ProxZeroFloat
        __init__(ProxZeroFloat self, float strength) -> ProxZeroFloat
        __init__(ProxZeroFloat self, float strength, unsigned long start, unsigned long end) -> ProxZeroFloat
        """
        _solver.ProxZeroFloat_swiginit(self, _solver.new_ProxZeroFloat(*args))

    def compare(self, that: 'ProxZeroFloat') -> "bool":
        r"""compare(ProxZeroFloat self, ProxZeroFloat that) -> bool"""
        return _solver.ProxZeroFloat_compare(self, that)

    def __getstate__(self): return ProxZeroFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxZeroFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxZeroFloat

# Register ProxZeroFloat in _solver:
_solver.ProxZeroFloat_swigregister(ProxZeroFloat)


def ProxZeroFloatDeserialize(ptr: 'ProxZeroFloat', hex: 'std::string const &') -> "void":
    r"""ProxZeroFloatDeserialize(ProxZeroFloat ptr, std::string const & hex)"""
    return _solver.ProxZeroFloatDeserialize(ptr, hex)

def ProxZeroFloatSerialize(ptr: 'ProxZeroFloat') -> "std::string":
    r"""ProxZeroFloatSerialize(ProxZeroFloat ptr) -> std::string"""
    return _solver.ProxZeroFloatSerialize(ptr)
class ProxPositiveDouble(Prox):
    r"""Proxy of C++ TProxPositive< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxPositiveDouble self) -> ProxPositiveDouble
        __init__(ProxPositiveDouble self, double strength) -> ProxPositiveDouble
        __init__(ProxPositiveDouble self, double strength, unsigned long start, unsigned long end) -> ProxPositiveDouble
        """
        _solver.ProxPositiveDouble_swiginit(self, _solver.new_ProxPositiveDouble(*args))

    def compare(self, that: 'ProxPositiveDouble') -> "bool":
        r"""compare(ProxPositiveDouble self, ProxPositiveDouble that) -> bool"""
        return _solver.ProxPositiveDouble_compare(self, that)

    def __getstate__(self): return ProxPositiveDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxPositiveDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxPositiveDouble

# Register ProxPositiveDouble in _solver:
_solver.ProxPositiveDouble_swigregister(ProxPositiveDouble)


def ProxPositiveDoubleDeserialize(ptr: 'ProxPositiveDouble', hex: 'std::string const &') -> "void":
    r"""ProxPositiveDoubleDeserialize(ProxPositiveDouble ptr, std::string const & hex)"""
    return _solver.ProxPositiveDoubleDeserialize(ptr, hex)

def ProxPositiveDoubleSerialize(ptr: 'ProxPositiveDouble') -> "std::string":
    r"""ProxPositiveDoubleSerialize(ProxPositiveDouble ptr) -> std::string"""
    return _solver.ProxPositiveDoubleSerialize(ptr)
class ProxPositiveFloat(ProxFloat):
    r"""Proxy of C++ TProxPositive< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxPositiveFloat self) -> ProxPositiveFloat
        __init__(ProxPositiveFloat self, float strength) -> ProxPositiveFloat
        __init__(ProxPositiveFloat self, float strength, unsigned long start, unsigned long end) -> ProxPositiveFloat
        """
        _solver.ProxPositiveFloat_swiginit(self, _solver.new_ProxPositiveFloat(*args))

    def compare(self, that: 'ProxPositiveFloat') -> "bool":
        r"""compare(ProxPositiveFloat self, ProxPositiveFloat that) -> bool"""
        return _solver.ProxPositiveFloat_compare(self, that)

    def __getstate__(self): return ProxPositiveFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxPositiveFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxPositiveFloat

# Register ProxPositiveFloat in _solver:
_solver.ProxPositiveFloat_swigregister(ProxPositiveFloat)


def ProxPositiveFloatDeserialize(ptr: 'ProxPositiveFloat', hex: 'std::string const &') -> "void":
    r"""ProxPositiveFloatDeserialize(ProxPositiveFloat ptr, std::string const & hex)"""
    return _solver.ProxPositiveFloatDeserialize(ptr, hex)

def ProxPositiveFloatSerialize(ptr: 'ProxPositiveFloat') -> "std::string":
    r"""ProxPositiveFloatSerialize(ProxPositiveFloat ptr) -> std::string"""
    return _solver.ProxPositiveFloatSerialize(ptr)
class ProxL2SqDouble(TProxSeparableDouble):
    r"""Proxy of C++ TProxL2Sq< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL2SqDouble self) -> ProxL2SqDouble
        __init__(ProxL2SqDouble self, double strength, bool positive) -> ProxL2SqDouble
        __init__(ProxL2SqDouble self, double strength, ulong start, ulong end, bool positive) -> ProxL2SqDouble
        """
        _solver.ProxL2SqDouble_swiginit(self, _solver.new_ProxL2SqDouble(*args))

    def compare(self, that: 'ProxL2SqDouble') -> "bool":
        r"""compare(ProxL2SqDouble self, ProxL2SqDouble that) -> bool"""
        return _solver.ProxL2SqDouble_compare(self, that)

    def __getstate__(self): return ProxL2SqDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2SqDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL2SqDouble

# Register ProxL2SqDouble in _solver:
_solver.ProxL2SqDouble_swigregister(ProxL2SqDouble)


def ProxL2SqDoubleDeserialize(ptr: 'ProxL2SqDouble', hex: 'std::string const &') -> "void":
    r"""ProxL2SqDoubleDeserialize(ProxL2SqDouble ptr, std::string const & hex)"""
    return _solver.ProxL2SqDoubleDeserialize(ptr, hex)

def ProxL2SqDoubleSerialize(ptr: 'ProxL2SqDouble') -> "std::string":
    r"""ProxL2SqDoubleSerialize(ProxL2SqDouble ptr) -> std::string"""
    return _solver.ProxL2SqDoubleSerialize(ptr)
class ProxL2SqFloat(TProxSeparableFloat):
    r"""Proxy of C++ TProxL2Sq< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL2SqFloat self) -> ProxL2SqFloat
        __init__(ProxL2SqFloat self, float strength, bool positive) -> ProxL2SqFloat
        __init__(ProxL2SqFloat self, float strength, ulong start, ulong end, bool positive) -> ProxL2SqFloat
        """
        _solver.ProxL2SqFloat_swiginit(self, _solver.new_ProxL2SqFloat(*args))

    def compare(self, that: 'ProxL2SqFloat') -> "bool":
        r"""compare(ProxL2SqFloat self, ProxL2SqFloat that) -> bool"""
        return _solver.ProxL2SqFloat_compare(self, that)

    def __getstate__(self): return ProxL2SqFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2SqFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL2SqFloat

# Register ProxL2SqFloat in _solver:
_solver.ProxL2SqFloat_swigregister(ProxL2SqFloat)


def ProxL2SqFloatDeserialize(ptr: 'ProxL2SqFloat', hex: 'std::string const &') -> "void":
    r"""ProxL2SqFloatDeserialize(ProxL2SqFloat ptr, std::string const & hex)"""
    return _solver.ProxL2SqFloatDeserialize(ptr, hex)

def ProxL2SqFloatSerialize(ptr: 'ProxL2SqFloat') -> "std::string":
    r"""ProxL2SqFloatSerialize(ProxL2SqFloat ptr) -> std::string"""
    return _solver.ProxL2SqFloatSerialize(ptr)
class ProxL2Double(Prox):
    r"""Proxy of C++ TProxL2< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL2Double self) -> ProxL2Double
        __init__(ProxL2Double self, double strength, bool positive) -> ProxL2Double
        __init__(ProxL2Double self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxL2Double
        """
        _solver.ProxL2Double_swiginit(self, _solver.new_ProxL2Double(*args))

    def compare(self, that: 'ProxL2Double') -> "bool":
        r"""compare(ProxL2Double self, ProxL2Double that) -> bool"""
        return _solver.ProxL2Double_compare(self, that)

    def __getstate__(self): return ProxL2DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2DoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL2Double

# Register ProxL2Double in _solver:
_solver.ProxL2Double_swigregister(ProxL2Double)


def ProxL2DoubleDeserialize(ptr: 'ProxL2Double', hex: 'std::string const &') -> "void":
    r"""ProxL2DoubleDeserialize(ProxL2Double ptr, std::string const & hex)"""
    return _solver.ProxL2DoubleDeserialize(ptr, hex)

def ProxL2DoubleSerialize(ptr: 'ProxL2Double') -> "std::string":
    r"""ProxL2DoubleSerialize(ProxL2Double ptr) -> std::string"""
    return _solver.ProxL2DoubleSerialize(ptr)
class ProxL2Float(ProxFloat):
    r"""Proxy of C++ TProxL2< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL2Float self) -> ProxL2Float
        __init__(ProxL2Float self, float strength, bool positive) -> ProxL2Float
        __init__(ProxL2Float self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxL2Float
        """
        _solver.ProxL2Float_swiginit(self, _solver.new_ProxL2Float(*args))

    def compare(self, that: 'ProxL2Float') -> "bool":
        r"""compare(ProxL2Float self, ProxL2Float that) -> bool"""
        return _solver.ProxL2Float_compare(self, that)

    def __getstate__(self): return ProxL2FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL2FloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL2Float

# Register ProxL2Float in _solver:
_solver.ProxL2Float_swigregister(ProxL2Float)


def ProxL2FloatDeserialize(ptr: 'ProxL2Float', hex: 'std::string const &') -> "void":
    r"""ProxL2FloatDeserialize(ProxL2Float ptr, std::string const & hex)"""
    return _solver.ProxL2FloatDeserialize(ptr, hex)

def ProxL2FloatSerialize(ptr: 'ProxL2Float') -> "std::string":
    r"""ProxL2FloatSerialize(ProxL2Float ptr) -> std::string"""
    return _solver.ProxL2FloatSerialize(ptr)
class ProxL1Double(TProxSeparableDouble):
    r"""Proxy of C++ ProxL1Double class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL1Double self) -> ProxL1Double
        __init__(ProxL1Double self, double strength, bool positive) -> ProxL1Double
        __init__(ProxL1Double self, double strength, ulong start, ulong end, bool positive) -> ProxL1Double
        """
        _solver.ProxL1Double_swiginit(self, _solver.new_ProxL1Double(*args))

    def compare(self, that: 'ProxL1Double') -> "bool":
        r"""compare(ProxL1Double self, ProxL1Double that) -> bool"""
        return _solver.ProxL1Double_compare(self, that)

    def __getstate__(self): return ProxL1DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1DoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL1Double

# Register ProxL1Double in _solver:
_solver.ProxL1Double_swigregister(ProxL1Double)


def ProxL1DoubleDeserialize(ptr: 'ProxL1Double', hex: 'std::string const &') -> "void":
    r"""ProxL1DoubleDeserialize(ProxL1Double ptr, std::string const & hex)"""
    return _solver.ProxL1DoubleDeserialize(ptr, hex)

def ProxL1DoubleSerialize(ptr: 'ProxL1Double') -> "std::string":
    r"""ProxL1DoubleSerialize(ProxL1Double ptr) -> std::string"""
    return _solver.ProxL1DoubleSerialize(ptr)
class ProxL1Float(TProxSeparableFloat):
    r"""Proxy of C++ ProxL1Float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL1Float self) -> ProxL1Float
        __init__(ProxL1Float self, float strength, bool positive) -> ProxL1Float
        __init__(ProxL1Float self, float strength, ulong start, ulong end, bool positive) -> ProxL1Float
        """
        _solver.ProxL1Float_swiginit(self, _solver.new_ProxL1Float(*args))

    def compare(self, that: 'ProxL1Float') -> "bool":
        r"""compare(ProxL1Float self, ProxL1Float that) -> bool"""
        return _solver.ProxL1Float_compare(self, that)

    def __getstate__(self): return ProxL1FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1FloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL1Float

# Register ProxL1Float in _solver:
_solver.ProxL1Float_swigregister(ProxL1Float)


def ProxL1FloatDeserialize(ptr: 'ProxL1Float', hex: 'std::string const &') -> "void":
    r"""ProxL1FloatDeserialize(ProxL1Float ptr, std::string const & hex)"""
    return _solver.ProxL1FloatDeserialize(ptr, hex)

def ProxL1FloatSerialize(ptr: 'ProxL1Float') -> "std::string":
    r"""ProxL1FloatSerialize(ProxL1Float ptr) -> std::string"""
    return _solver.ProxL1FloatSerialize(ptr)
class ProxL1wDouble(TProxSeparableDouble):
    r"""Proxy of C++ ProxL1wDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL1wDouble self) -> ProxL1wDouble
        __init__(ProxL1wDouble self, double strength, SArrayDoublePtr weights, bool positive) -> ProxL1wDouble
        __init__(ProxL1wDouble self, double strength, SArrayDoublePtr weights, ulong start, ulong end, bool positive) -> ProxL1wDouble
        """
        _solver.ProxL1wDouble_swiginit(self, _solver.new_ProxL1wDouble(*args))

    def set_weights(self, weights: 'SArrayDoublePtr') -> "void":
        r"""set_weights(ProxL1wDouble self, SArrayDoublePtr weights)"""
        return _solver.ProxL1wDouble_set_weights(self, weights)

    def compare(self, that: 'ProxL1wDouble') -> "bool":
        r"""compare(ProxL1wDouble self, ProxL1wDouble that) -> bool"""
        return _solver.ProxL1wDouble_compare(self, that)

    def __getstate__(self): return ProxL1wDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1wDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL1wDouble

# Register ProxL1wDouble in _solver:
_solver.ProxL1wDouble_swigregister(ProxL1wDouble)


def ProxL1wDoubleDeserialize(ptr: 'ProxL1wDouble', hex: 'std::string const &') -> "void":
    r"""ProxL1wDoubleDeserialize(ProxL1wDouble ptr, std::string const & hex)"""
    return _solver.ProxL1wDoubleDeserialize(ptr, hex)

def ProxL1wDoubleSerialize(ptr: 'ProxL1wDouble') -> "std::string":
    r"""ProxL1wDoubleSerialize(ProxL1wDouble ptr) -> std::string"""
    return _solver.ProxL1wDoubleSerialize(ptr)
class ProxL1wFloat(TProxSeparableFloat):
    r"""Proxy of C++ ProxL1wFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxL1wFloat self) -> ProxL1wFloat
        __init__(ProxL1wFloat self, float strength, SArrayFloatPtr weights, bool positive) -> ProxL1wFloat
        __init__(ProxL1wFloat self, float strength, SArrayFloatPtr weights, ulong start, ulong end, bool positive) -> ProxL1wFloat
        """
        _solver.ProxL1wFloat_swiginit(self, _solver.new_ProxL1wFloat(*args))

    def set_weights(self, weights: 'SArrayFloatPtr') -> "void":
        r"""set_weights(ProxL1wFloat self, SArrayFloatPtr weights)"""
        return _solver.ProxL1wFloat_set_weights(self, weights)

    def compare(self, that: 'ProxL1wFloat') -> "bool":
        r"""compare(ProxL1wFloat self, ProxL1wFloat that) -> bool"""
        return _solver.ProxL1wFloat_compare(self, that)

    def __getstate__(self): return ProxL1wFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1wFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL1wFloat

# Register ProxL1wFloat in _solver:
_solver.ProxL1wFloat_swigregister(ProxL1wFloat)


def ProxL1wFloatDeserialize(ptr: 'ProxL1wFloat', hex: 'std::string const &') -> "void":
    r"""ProxL1wFloatDeserialize(ProxL1wFloat ptr, std::string const & hex)"""
    return _solver.ProxL1wFloatDeserialize(ptr, hex)

def ProxL1wFloatSerialize(ptr: 'ProxL1wFloat') -> "std::string":
    r"""ProxL1wFloatSerialize(ProxL1wFloat ptr) -> std::string"""
    return _solver.ProxL1wFloatSerialize(ptr)
class ProxTVDouble(Prox):
    r"""Proxy of C++ TProxTV< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxTVDouble self) -> ProxTVDouble
        __init__(ProxTVDouble self, double strength, bool positive) -> ProxTVDouble
        __init__(ProxTVDouble self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxTVDouble
        """
        _solver.ProxTVDouble_swiginit(self, _solver.new_ProxTVDouble(*args))

    def compare(self, that: 'ProxTVDouble') -> "bool":
        r"""compare(ProxTVDouble self, ProxTVDouble that) -> bool"""
        return _solver.ProxTVDouble_compare(self, that)

    def __getstate__(self): return ProxTVDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxTVDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxTVDouble

# Register ProxTVDouble in _solver:
_solver.ProxTVDouble_swigregister(ProxTVDouble)


def ProxTVDoubleDeserialize(ptr: 'ProxTVDouble', hex: 'std::string const &') -> "void":
    r"""ProxTVDoubleDeserialize(ProxTVDouble ptr, std::string const & hex)"""
    return _solver.ProxTVDoubleDeserialize(ptr, hex)

def ProxTVDoubleSerialize(ptr: 'ProxTVDouble') -> "std::string":
    r"""ProxTVDoubleSerialize(ProxTVDouble ptr) -> std::string"""
    return _solver.ProxTVDoubleSerialize(ptr)
class ProxTVFloat(ProxFloat):
    r"""Proxy of C++ TProxTV< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxTVFloat self) -> ProxTVFloat
        __init__(ProxTVFloat self, float strength, bool positive) -> ProxTVFloat
        __init__(ProxTVFloat self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxTVFloat
        """
        _solver.ProxTVFloat_swiginit(self, _solver.new_ProxTVFloat(*args))

    def compare(self, that: 'ProxTVFloat') -> "bool":
        r"""compare(ProxTVFloat self, ProxTVFloat that) -> bool"""
        return _solver.ProxTVFloat_compare(self, that)

    def __getstate__(self): return ProxTVFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxTVFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxTVFloat

# Register ProxTVFloat in _solver:
_solver.ProxTVFloat_swigregister(ProxTVFloat)


def ProxTVFloatDeserialize(ptr: 'ProxTVFloat', hex: 'std::string const &') -> "void":
    r"""ProxTVFloatDeserialize(ProxTVFloat ptr, std::string const & hex)"""
    return _solver.ProxTVFloatDeserialize(ptr, hex)

def ProxTVFloatSerialize(ptr: 'ProxTVFloat') -> "std::string":
    r"""ProxTVFloatSerialize(ProxTVFloat ptr) -> std::string"""
    return _solver.ProxTVFloatSerialize(ptr)
class ProxElasticNetDouble(TProxSeparableDouble):
    r"""Proxy of C++ TProxElasticNet< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxElasticNetDouble self) -> ProxElasticNetDouble
        __init__(ProxElasticNetDouble self, double strength, double ratio, bool positive) -> ProxElasticNetDouble
        __init__(ProxElasticNetDouble self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNetDouble
        """
        _solver.ProxElasticNetDouble_swiginit(self, _solver.new_ProxElasticNetDouble(*args))

    def get_ratio(self) -> "double":
        r"""get_ratio(ProxElasticNetDouble self) -> double"""
        return _solver.ProxElasticNetDouble_get_ratio(self)

    def set_ratio(self, ratio: 'double') -> "void":
        r"""set_ratio(ProxElasticNetDouble self, double ratio)"""
        return _solver.ProxElasticNetDouble_set_ratio(self, ratio)

    def compare(self, that: 'ProxElasticNetDouble') -> "bool":
        r"""compare(ProxElasticNetDouble self, ProxElasticNetDouble that) -> bool"""
        return _solver.ProxElasticNetDouble_compare(self, that)

    def __getstate__(self): return ProxElasticNetDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxElasticNetDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxElasticNetDouble

# Register ProxElasticNetDouble in _solver:
_solver.ProxElasticNetDouble_swigregister(ProxElasticNetDouble)


def ProxElasticNetDoubleDeserialize(ptr: 'ProxElasticNetDouble', hex: 'std::string const &') -> "void":
    r"""ProxElasticNetDoubleDeserialize(ProxElasticNetDouble ptr, std::string const & hex)"""
    return _solver.ProxElasticNetDoubleDeserialize(ptr, hex)

def ProxElasticNetDoubleSerialize(ptr: 'ProxElasticNetDouble') -> "std::string":
    r"""ProxElasticNetDoubleSerialize(ProxElasticNetDouble ptr) -> std::string"""
    return _solver.ProxElasticNetDoubleSerialize(ptr)
class ProxElasticNetFloat(TProxSeparableFloat):
    r"""Proxy of C++ TProxElasticNet< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxElasticNetFloat self) -> ProxElasticNetFloat
        __init__(ProxElasticNetFloat self, float strength, float ratio, bool positive) -> ProxElasticNetFloat
        __init__(ProxElasticNetFloat self, float strength, float ratio, ulong start, ulong end, bool positive) -> ProxElasticNetFloat
        """
        _solver.ProxElasticNetFloat_swiginit(self, _solver.new_ProxElasticNetFloat(*args))

    def get_ratio(self) -> "float":
        r"""get_ratio(ProxElasticNetFloat self) -> float"""
        return _solver.ProxElasticNetFloat_get_ratio(self)

    def set_ratio(self, ratio: 'float') -> "void":
        r"""set_ratio(ProxElasticNetFloat self, float ratio)"""
        return _solver.ProxElasticNetFloat_set_ratio(self, ratio)

    def compare(self, that: 'ProxElasticNetFloat') -> "bool":
        r"""compare(ProxElasticNetFloat self, ProxElasticNetFloat that) -> bool"""
        return _solver.ProxElasticNetFloat_compare(self, that)

    def __getstate__(self): return ProxElasticNetFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxElasticNetFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxElasticNetFloat

# Register ProxElasticNetFloat in _solver:
_solver.ProxElasticNetFloat_swigregister(ProxElasticNetFloat)


def ProxElasticNetFloatDeserialize(ptr: 'ProxElasticNetFloat', hex: 'std::string const &') -> "void":
    r"""ProxElasticNetFloatDeserialize(ProxElasticNetFloat ptr, std::string const & hex)"""
    return _solver.ProxElasticNetFloatDeserialize(ptr, hex)

def ProxElasticNetFloatSerialize(ptr: 'ProxElasticNetFloat') -> "std::string":
    r"""ProxElasticNetFloatSerialize(ProxElasticNetFloat ptr) -> std::string"""
    return _solver.ProxElasticNetFloatSerialize(ptr)
class ProxElasticNetAtomicDouble(TProxSeparableAtomicDouble):
    r"""Proxy of C++ TProxElasticNet< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxElasticNetAtomicDouble self) -> ProxElasticNetAtomicDouble
        __init__(ProxElasticNetAtomicDouble self, double strength, double ratio, bool positive) -> ProxElasticNetAtomicDouble
        __init__(ProxElasticNetAtomicDouble self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNetAtomicDouble
        """
        _solver.ProxElasticNetAtomicDouble_swiginit(self, _solver.new_ProxElasticNetAtomicDouble(*args))

    def get_ratio(self) -> "double":
        r"""get_ratio(ProxElasticNetAtomicDouble self) -> double"""
        return _solver.ProxElasticNetAtomicDouble_get_ratio(self)

    def set_ratio(self, ratio: 'double') -> "void":
        r"""set_ratio(ProxElasticNetAtomicDouble self, double ratio)"""
        return _solver.ProxElasticNetAtomicDouble_set_ratio(self, ratio)

    def compare(self, that: 'ProxElasticNetAtomicDouble') -> "bool":
        r"""compare(ProxElasticNetAtomicDouble self, ProxElasticNetAtomicDouble that) -> bool"""
        return _solver.ProxElasticNetAtomicDouble_compare(self, that)
    __swig_destroy__ = _solver.delete_ProxElasticNetAtomicDouble

# Register ProxElasticNetAtomicDouble in _solver:
_solver.ProxElasticNetAtomicDouble_swigregister(ProxElasticNetAtomicDouble)

class ProxElasticNetAtomicFloat(TProxSeparableAtomicFloat):
    r"""Proxy of C++ TProxElasticNet< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxElasticNetAtomicFloat self) -> ProxElasticNetAtomicFloat
        __init__(ProxElasticNetAtomicFloat self, float strength, float ratio, bool positive) -> ProxElasticNetAtomicFloat
        __init__(ProxElasticNetAtomicFloat self, float strength, float ratio, ulong start, ulong end, bool positive) -> ProxElasticNetAtomicFloat
        """
        _solver.ProxElasticNetAtomicFloat_swiginit(self, _solver.new_ProxElasticNetAtomicFloat(*args))

    def get_ratio(self) -> "float":
        r"""get_ratio(ProxElasticNetAtomicFloat self) -> float"""
        return _solver.ProxElasticNetAtomicFloat_get_ratio(self)

    def set_ratio(self, ratio: 'float') -> "void":
        r"""set_ratio(ProxElasticNetAtomicFloat self, float ratio)"""
        return _solver.ProxElasticNetAtomicFloat_set_ratio(self, ratio)

    def compare(self, that: 'ProxElasticNetAtomicFloat') -> "bool":
        r"""compare(ProxElasticNetAtomicFloat self, ProxElasticNetAtomicFloat that) -> bool"""
        return _solver.ProxElasticNetAtomicFloat_compare(self, that)
    __swig_destroy__ = _solver.delete_ProxElasticNetAtomicFloat

# Register ProxElasticNetAtomicFloat in _solver:
_solver.ProxElasticNetAtomicFloat_swigregister(ProxElasticNetAtomicFloat)

class ProxSlopeDouble(Prox):
    r"""Proxy of C++ TProxSlope< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxSlopeDouble self) -> ProxSlopeDouble
        __init__(ProxSlopeDouble self, double _lambda, double fdr, bool positive) -> ProxSlopeDouble
        __init__(ProxSlopeDouble self, double _lambda, double fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlopeDouble
        """
        _solver.ProxSlopeDouble_swiginit(self, _solver.new_ProxSlopeDouble(*args))

    def get_false_discovery_rate(self) -> "double":
        r"""get_false_discovery_rate(ProxSlopeDouble self) -> double"""
        return _solver.ProxSlopeDouble_get_false_discovery_rate(self)

    def set_false_discovery_rate(self, fdr: 'double') -> "void":
        r"""set_false_discovery_rate(ProxSlopeDouble self, double fdr)"""
        return _solver.ProxSlopeDouble_set_false_discovery_rate(self, fdr)

    def get_weight_i(self, i: 'unsigned long') -> "double":
        r"""get_weight_i(ProxSlopeDouble self, unsigned long i) -> double"""
        return _solver.ProxSlopeDouble_get_weight_i(self, i)

    def compare(self, that: 'ProxSlopeDouble') -> "bool":
        r"""compare(ProxSlopeDouble self, ProxSlopeDouble that) -> bool"""
        return _solver.ProxSlopeDouble_compare(self, that)

    def __getstate__(self): return ProxSlopeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxSlopeDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxSlopeDouble

# Register ProxSlopeDouble in _solver:
_solver.ProxSlopeDouble_swigregister(ProxSlopeDouble)


def ProxSlopeDoubleDeserialize(ptr: 'ProxSlopeDouble', hex: 'std::string const &') -> "void":
    r"""ProxSlopeDoubleDeserialize(ProxSlopeDouble ptr, std::string const & hex)"""
    return _solver.ProxSlopeDoubleDeserialize(ptr, hex)

def ProxSlopeDoubleSerialize(ptr: 'ProxSlopeDouble') -> "std::string":
    r"""ProxSlopeDoubleSerialize(ProxSlopeDouble ptr) -> std::string"""
    return _solver.ProxSlopeDoubleSerialize(ptr)
class ProxSlopeFloat(ProxFloat):
    r"""Proxy of C++ TProxSlope< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxSlopeFloat self) -> ProxSlopeFloat
        __init__(ProxSlopeFloat self, float _lambda, float fdr, bool positive) -> ProxSlopeFloat
        __init__(ProxSlopeFloat self, float _lambda, float fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlopeFloat
        """
        _solver.ProxSlopeFloat_swiginit(self, _solver.new_ProxSlopeFloat(*args))

    def get_false_discovery_rate(self) -> "float":
        r"""get_false_discovery_rate(ProxSlopeFloat self) -> float"""
        return _solver.ProxSlopeFloat_get_false_discovery_rate(self)

    def set_false_discovery_rate(self, fdr: 'float') -> "void":
        r"""set_false_discovery_rate(ProxSlopeFloat self, float fdr)"""
        return _solver.ProxSlopeFloat_set_false_discovery_rate(self, fdr)

    def get_weight_i(self, i: 'unsigned long') -> "float":
        r"""get_weight_i(ProxSlopeFloat self, unsigned long i) -> float"""
        return _solver.ProxSlopeFloat_get_weight_i(self, i)

    def compare(self, that: 'ProxSlopeFloat') -> "bool":
        r"""compare(ProxSlopeFloat self, ProxSlopeFloat that) -> bool"""
        return _solver.ProxSlopeFloat_compare(self, that)

    def __getstate__(self): return ProxSlopeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxSlopeFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxSlopeFloat

# Register ProxSlopeFloat in _solver:
_solver.ProxSlopeFloat_swigregister(ProxSlopeFloat)


def ProxSlopeFloatDeserialize(ptr: 'ProxSlopeFloat', hex: 'std::string const &') -> "void":
    r"""ProxSlopeFloatDeserialize(ProxSlopeFloat ptr, std::string const & hex)"""
    return _solver.ProxSlopeFloatDeserialize(ptr, hex)

def ProxSlopeFloatSerialize(ptr: 'ProxSlopeFloat') -> "std::string":
    r"""ProxSlopeFloatSerialize(ProxSlopeFloat ptr) -> std::string"""
    return _solver.ProxSlopeFloatSerialize(ptr)
class ProxDoublePtrVector(object):
    r"""Proxy of C++ std::vector< ProxDoublePtr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(ProxDoublePtrVector self) -> SwigPyIterator"""
        return _solver.ProxDoublePtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(ProxDoublePtrVector self) -> bool"""
        return _solver.ProxDoublePtrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(ProxDoublePtrVector self) -> bool"""
        return _solver.ProxDoublePtrVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        r"""__len__(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _solver.ProxDoublePtrVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type') -> "std::vector< std::shared_ptr< TProx< double,double > >,std::allocator< std::shared_ptr< TProx< double,double > > > > *":
        r"""__getslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j) -> ProxDoublePtrVector"""
        return _solver.ProxDoublePtrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j)
        __setslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j, ProxDoublePtrVector v)
        """
        return _solver.ProxDoublePtrVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type') -> "void":
        r"""__delslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j)"""
        return _solver.ProxDoublePtrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i)
        __delitem__(ProxDoublePtrVector self, PySliceObject * slice)
        """
        return _solver.ProxDoublePtrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        r"""
        __getitem__(ProxDoublePtrVector self, PySliceObject * slice) -> ProxDoublePtrVector
        __getitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &
        """
        return _solver.ProxDoublePtrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(ProxDoublePtrVector self, PySliceObject * slice, ProxDoublePtrVector v)
        __setitem__(ProxDoublePtrVector self, PySliceObject * slice)
        __setitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _solver.ProxDoublePtrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type":
        r"""pop(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type"""
        return _solver.ProxDoublePtrVector_pop(self)

    def append(self, x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        r"""append(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _solver.ProxDoublePtrVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(ProxDoublePtrVector self) -> bool"""
        return _solver.ProxDoublePtrVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        r"""size(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _solver.ProxDoublePtrVector_size(self)

    def swap(self, v: 'ProxDoublePtrVector') -> "void":
        r"""swap(ProxDoublePtrVector self, ProxDoublePtrVector v)"""
        return _solver.ProxDoublePtrVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        r"""begin(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator"""
        return _solver.ProxDoublePtrVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        r"""end(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator"""
        return _solver.ProxDoublePtrVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator":
        r"""rbegin(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator"""
        return _solver.ProxDoublePtrVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator":
        r"""rend(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator"""
        return _solver.ProxDoublePtrVector_rend(self)

    def clear(self) -> "void":
        r"""clear(ProxDoublePtrVector self)"""
        return _solver.ProxDoublePtrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::allocator_type":
        r"""get_allocator(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::allocator_type"""
        return _solver.ProxDoublePtrVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(ProxDoublePtrVector self)"""
        return _solver.ProxDoublePtrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        r"""
        erase(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        erase(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator first, std::vector< std::shared_ptr< TProx< double,double > > >::iterator last) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        """
        return _solver.ProxDoublePtrVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ProxDoublePtrVector self) -> ProxDoublePtrVector
        __init__(ProxDoublePtrVector self, ProxDoublePtrVector other) -> ProxDoublePtrVector
        __init__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type size) -> ProxDoublePtrVector
        __init__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type size, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & value) -> ProxDoublePtrVector
        """
        _solver.ProxDoublePtrVector_swiginit(self, _solver.new_ProxDoublePtrVector(*args))

    def push_back(self, x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        r"""push_back(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _solver.ProxDoublePtrVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        r"""front(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &"""
        return _solver.ProxDoublePtrVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        r"""back(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &"""
        return _solver.ProxDoublePtrVector_back(self)

    def assign(self, n: 'std::vector< std::shared_ptr< TProx< double,double > > >::size_type', x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        r"""assign(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _solver.ProxDoublePtrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type new_size)
        resize(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type new_size, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _solver.ProxDoublePtrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        insert(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _solver.ProxDoublePtrVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::shared_ptr< TProx< double,double > > >::size_type') -> "void":
        r"""reserve(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n)"""
        return _solver.ProxDoublePtrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        r"""capacity(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _solver.ProxDoublePtrVector_capacity(self)
    __swig_destroy__ = _solver.delete_ProxDoublePtrVector

# Register ProxDoublePtrVector in _solver:
_solver.ProxDoublePtrVector_swigregister(ProxDoublePtrVector)

class ProxFloatPtrVector(object):
    r"""Proxy of C++ std::vector< ProxFloatPtr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(ProxFloatPtrVector self) -> SwigPyIterator"""
        return _solver.ProxFloatPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(ProxFloatPtrVector self) -> bool"""
        return _solver.ProxFloatPtrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(ProxFloatPtrVector self) -> bool"""
        return _solver.ProxFloatPtrVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        r"""__len__(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _solver.ProxFloatPtrVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type') -> "std::vector< std::shared_ptr< TProx< float,float > >,std::allocator< std::shared_ptr< TProx< float,float > > > > *":
        r"""__getslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j) -> ProxFloatPtrVector"""
        return _solver.ProxFloatPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j)
        __setslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j, ProxFloatPtrVector v)
        """
        return _solver.ProxFloatPtrVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type') -> "void":
        r"""__delslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j)"""
        return _solver.ProxFloatPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i)
        __delitem__(ProxFloatPtrVector self, PySliceObject * slice)
        """
        return _solver.ProxFloatPtrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        r"""
        __getitem__(ProxFloatPtrVector self, PySliceObject * slice) -> ProxFloatPtrVector
        __getitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &
        """
        return _solver.ProxFloatPtrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(ProxFloatPtrVector self, PySliceObject * slice, ProxFloatPtrVector v)
        __setitem__(ProxFloatPtrVector self, PySliceObject * slice)
        __setitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _solver.ProxFloatPtrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type":
        r"""pop(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type"""
        return _solver.ProxFloatPtrVector_pop(self)

    def append(self, x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        r"""append(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _solver.ProxFloatPtrVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(ProxFloatPtrVector self) -> bool"""
        return _solver.ProxFloatPtrVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        r"""size(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _solver.ProxFloatPtrVector_size(self)

    def swap(self, v: 'ProxFloatPtrVector') -> "void":
        r"""swap(ProxFloatPtrVector self, ProxFloatPtrVector v)"""
        return _solver.ProxFloatPtrVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        r"""begin(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator"""
        return _solver.ProxFloatPtrVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        r"""end(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator"""
        return _solver.ProxFloatPtrVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator":
        r"""rbegin(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator"""
        return _solver.ProxFloatPtrVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator":
        r"""rend(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator"""
        return _solver.ProxFloatPtrVector_rend(self)

    def clear(self) -> "void":
        r"""clear(ProxFloatPtrVector self)"""
        return _solver.ProxFloatPtrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::allocator_type":
        r"""get_allocator(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::allocator_type"""
        return _solver.ProxFloatPtrVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(ProxFloatPtrVector self)"""
        return _solver.ProxFloatPtrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        r"""
        erase(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        erase(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator first, std::vector< std::shared_ptr< TProx< float,float > > >::iterator last) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        """
        return _solver.ProxFloatPtrVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ProxFloatPtrVector self) -> ProxFloatPtrVector
        __init__(ProxFloatPtrVector self, ProxFloatPtrVector other) -> ProxFloatPtrVector
        __init__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type size) -> ProxFloatPtrVector
        __init__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type size, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & value) -> ProxFloatPtrVector
        """
        _solver.ProxFloatPtrVector_swiginit(self, _solver.new_ProxFloatPtrVector(*args))

    def push_back(self, x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        r"""push_back(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _solver.ProxFloatPtrVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        r"""front(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &"""
        return _solver.ProxFloatPtrVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        r"""back(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &"""
        return _solver.ProxFloatPtrVector_back(self)

    def assign(self, n: 'std::vector< std::shared_ptr< TProx< float,float > > >::size_type', x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        r"""assign(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _solver.ProxFloatPtrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type new_size)
        resize(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type new_size, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _solver.ProxFloatPtrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        insert(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _solver.ProxFloatPtrVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::shared_ptr< TProx< float,float > > >::size_type') -> "void":
        r"""reserve(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n)"""
        return _solver.ProxFloatPtrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        r"""capacity(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _solver.ProxFloatPtrVector_capacity(self)
    __swig_destroy__ = _solver.delete_ProxFloatPtrVector

# Register ProxFloatPtrVector in _solver:
_solver.ProxFloatPtrVector_swigregister(ProxFloatPtrVector)

class ProxMultiDouble(Prox):
    r"""Proxy of C++ TProxMulti< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxDoublePtrVector'):
        r"""__init__(ProxMultiDouble self, ProxDoublePtrVector proxs) -> ProxMultiDouble"""
        _solver.ProxMultiDouble_swiginit(self, _solver.new_ProxMultiDouble(proxs))
    __swig_destroy__ = _solver.delete_ProxMultiDouble

# Register ProxMultiDouble in _solver:
_solver.ProxMultiDouble_swigregister(ProxMultiDouble)

class ProxMultiFloat(ProxFloat):
    r"""Proxy of C++ TProxMulti< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxFloatPtrVector'):
        r"""__init__(ProxMultiFloat self, ProxFloatPtrVector proxs) -> ProxMultiFloat"""
        _solver.ProxMultiFloat_swiginit(self, _solver.new_ProxMultiFloat(proxs))
    __swig_destroy__ = _solver.delete_ProxMultiFloat

# Register ProxMultiFloat in _solver:
_solver.ProxMultiFloat_swigregister(ProxMultiFloat)

class ProxEqualityDouble(Prox):
    r"""Proxy of C++ TProxEquality< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxEqualityDouble self) -> ProxEqualityDouble
        __init__(ProxEqualityDouble self, double strength, bool positive) -> ProxEqualityDouble
        __init__(ProxEqualityDouble self, double strength, ulong start, ulong end, bool positive) -> ProxEqualityDouble
        """
        _solver.ProxEqualityDouble_swiginit(self, _solver.new_ProxEqualityDouble(*args))

    def compare(self, that: 'ProxEqualityDouble') -> "bool":
        r"""compare(ProxEqualityDouble self, ProxEqualityDouble that) -> bool"""
        return _solver.ProxEqualityDouble_compare(self, that)

    def __getstate__(self): return ProxEqualityDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxEqualityDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxEqualityDouble

# Register ProxEqualityDouble in _solver:
_solver.ProxEqualityDouble_swigregister(ProxEqualityDouble)


def ProxEqualityDoubleDeserialize(ptr: 'ProxEqualityDouble', hex: 'std::string const &') -> "void":
    r"""ProxEqualityDoubleDeserialize(ProxEqualityDouble ptr, std::string const & hex)"""
    return _solver.ProxEqualityDoubleDeserialize(ptr, hex)

def ProxEqualityDoubleSerialize(ptr: 'ProxEqualityDouble') -> "std::string":
    r"""ProxEqualityDoubleSerialize(ProxEqualityDouble ptr) -> std::string"""
    return _solver.ProxEqualityDoubleSerialize(ptr)
class ProxEqualityFloat(ProxFloat):
    r"""Proxy of C++ TProxEquality< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxEqualityFloat self) -> ProxEqualityFloat
        __init__(ProxEqualityFloat self, float strength, bool positive) -> ProxEqualityFloat
        __init__(ProxEqualityFloat self, float strength, ulong start, ulong end, bool positive) -> ProxEqualityFloat
        """
        _solver.ProxEqualityFloat_swiginit(self, _solver.new_ProxEqualityFloat(*args))

    def compare(self, that: 'ProxEqualityFloat') -> "bool":
        r"""compare(ProxEqualityFloat self, ProxEqualityFloat that) -> bool"""
        return _solver.ProxEqualityFloat_compare(self, that)

    def __getstate__(self): return ProxEqualityFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxEqualityFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxEqualityFloat

# Register ProxEqualityFloat in _solver:
_solver.ProxEqualityFloat_swigregister(ProxEqualityFloat)


def ProxEqualityFloatDeserialize(ptr: 'ProxEqualityFloat', hex: 'std::string const &') -> "void":
    r"""ProxEqualityFloatDeserialize(ProxEqualityFloat ptr, std::string const & hex)"""
    return _solver.ProxEqualityFloatDeserialize(ptr, hex)

def ProxEqualityFloatSerialize(ptr: 'ProxEqualityFloat') -> "std::string":
    r"""ProxEqualityFloatSerialize(ProxEqualityFloat ptr) -> std::string"""
    return _solver.ProxEqualityFloatSerialize(ptr)
class ProxWithGroupsDouble(Prox):
    r"""Proxy of C++ TProxWithGroups< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxWithGroupsDouble self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxWithGroupsDouble
        __init__(ProxWithGroupsDouble self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxWithGroupsDouble
        """
        _solver.ProxWithGroupsDouble_swiginit(self, _solver.new_ProxWithGroupsDouble(*args))
    __swig_destroy__ = _solver.delete_ProxWithGroupsDouble

# Register ProxWithGroupsDouble in _solver:
_solver.ProxWithGroupsDouble_swigregister(ProxWithGroupsDouble)

class ProxWithGroupsFloat(ProxFloat):
    r"""Proxy of C++ TProxWithGroups< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxWithGroupsFloat self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxWithGroupsFloat
        __init__(ProxWithGroupsFloat self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxWithGroupsFloat
        """
        _solver.ProxWithGroupsFloat_swiginit(self, _solver.new_ProxWithGroupsFloat(*args))
    __swig_destroy__ = _solver.delete_ProxWithGroupsFloat

# Register ProxWithGroupsFloat in _solver:
_solver.ProxWithGroupsFloat_swigregister(ProxWithGroupsFloat)

class ProxBinarsityDouble(ProxWithGroupsDouble):
    r"""Proxy of C++ TProxBinarsity< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxBinarsityDouble self) -> ProxBinarsityDouble
        __init__(ProxBinarsityDouble self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsityDouble
        __init__(ProxBinarsityDouble self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsityDouble
        """
        _solver.ProxBinarsityDouble_swiginit(self, _solver.new_ProxBinarsityDouble(*args))

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxBinarsityDouble self, bool positive)"""
        return _solver.ProxBinarsityDouble_set_positive(self, positive)

    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        r"""set_blocks_start(ProxBinarsityDouble self, SArrayULongPtr blocks_start)"""
        return _solver.ProxBinarsityDouble_set_blocks_start(self, blocks_start)

    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        r"""set_blocks_length(ProxBinarsityDouble self, SArrayULongPtr blocks_length)"""
        return _solver.ProxBinarsityDouble_set_blocks_length(self, blocks_length)

    def compare(self, that: 'ProxBinarsityDouble') -> "bool":
        r"""compare(ProxBinarsityDouble self, ProxBinarsityDouble that) -> bool"""
        return _solver.ProxBinarsityDouble_compare(self, that)

    def __getstate__(self): return ProxBinarsityDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxBinarsityDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxBinarsityDouble

# Register ProxBinarsityDouble in _solver:
_solver.ProxBinarsityDouble_swigregister(ProxBinarsityDouble)


def ProxBinarsityDoubleDeserialize(ptr: 'ProxBinarsityDouble', hex: 'std::string const &') -> "void":
    r"""ProxBinarsityDoubleDeserialize(ProxBinarsityDouble ptr, std::string const & hex)"""
    return _solver.ProxBinarsityDoubleDeserialize(ptr, hex)

def ProxBinarsityDoubleSerialize(ptr: 'ProxBinarsityDouble') -> "std::string":
    r"""ProxBinarsityDoubleSerialize(ProxBinarsityDouble ptr) -> std::string"""
    return _solver.ProxBinarsityDoubleSerialize(ptr)
class ProxBinarsityFloat(ProxWithGroupsFloat):
    r"""Proxy of C++ TProxBinarsity< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxBinarsityFloat self) -> ProxBinarsityFloat
        __init__(ProxBinarsityFloat self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsityFloat
        __init__(ProxBinarsityFloat self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsityFloat
        """
        _solver.ProxBinarsityFloat_swiginit(self, _solver.new_ProxBinarsityFloat(*args))

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxBinarsityFloat self, bool positive)"""
        return _solver.ProxBinarsityFloat_set_positive(self, positive)

    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        r"""set_blocks_start(ProxBinarsityFloat self, SArrayULongPtr blocks_start)"""
        return _solver.ProxBinarsityFloat_set_blocks_start(self, blocks_start)

    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        r"""set_blocks_length(ProxBinarsityFloat self, SArrayULongPtr blocks_length)"""
        return _solver.ProxBinarsityFloat_set_blocks_length(self, blocks_length)

    def compare(self, that: 'ProxBinarsityFloat') -> "bool":
        r"""compare(ProxBinarsityFloat self, ProxBinarsityFloat that) -> bool"""
        return _solver.ProxBinarsityFloat_compare(self, that)

    def __getstate__(self): return ProxBinarsityFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxBinarsityFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxBinarsityFloat

# Register ProxBinarsityFloat in _solver:
_solver.ProxBinarsityFloat_swigregister(ProxBinarsityFloat)


def ProxBinarsityFloatDeserialize(ptr: 'ProxBinarsityFloat', hex: 'std::string const &') -> "void":
    r"""ProxBinarsityFloatDeserialize(ProxBinarsityFloat ptr, std::string const & hex)"""
    return _solver.ProxBinarsityFloatDeserialize(ptr, hex)

def ProxBinarsityFloatSerialize(ptr: 'ProxBinarsityFloat') -> "std::string":
    r"""ProxBinarsityFloatSerialize(ProxBinarsityFloat ptr) -> std::string"""
    return _solver.ProxBinarsityFloatSerialize(ptr)
class ProxGroupL1Double(ProxWithGroupsDouble):
    r"""Proxy of C++ TProxGroupL1< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxGroupL1Double self) -> ProxGroupL1Double
        __init__(ProxGroupL1Double self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1Double
        __init__(ProxGroupL1Double self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1Double
        """
        _solver.ProxGroupL1Double_swiginit(self, _solver.new_ProxGroupL1Double(*args))

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxGroupL1Double self, bool positive)"""
        return _solver.ProxGroupL1Double_set_positive(self, positive)

    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        r"""set_blocks_start(ProxGroupL1Double self, SArrayULongPtr blocks_start)"""
        return _solver.ProxGroupL1Double_set_blocks_start(self, blocks_start)

    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        r"""set_blocks_length(ProxGroupL1Double self, SArrayULongPtr blocks_length)"""
        return _solver.ProxGroupL1Double_set_blocks_length(self, blocks_length)

    def compare(self, that: 'ProxGroupL1Double') -> "bool":
        r"""compare(ProxGroupL1Double self, ProxGroupL1Double that) -> bool"""
        return _solver.ProxGroupL1Double_compare(self, that)

    def __getstate__(self): return ProxGroupL1DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxGroupL1DoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxGroupL1Double

# Register ProxGroupL1Double in _solver:
_solver.ProxGroupL1Double_swigregister(ProxGroupL1Double)


def ProxGroupL1DoubleDeserialize(ptr: 'ProxGroupL1Double', hex: 'std::string const &') -> "void":
    r"""ProxGroupL1DoubleDeserialize(ProxGroupL1Double ptr, std::string const & hex)"""
    return _solver.ProxGroupL1DoubleDeserialize(ptr, hex)

def ProxGroupL1DoubleSerialize(ptr: 'ProxGroupL1Double') -> "std::string":
    r"""ProxGroupL1DoubleSerialize(ProxGroupL1Double ptr) -> std::string"""
    return _solver.ProxGroupL1DoubleSerialize(ptr)
class ProxGroupL1Float(ProxWithGroupsFloat):
    r"""Proxy of C++ TProxGroupL1< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProxGroupL1Float self) -> ProxGroupL1Float
        __init__(ProxGroupL1Float self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1Float
        __init__(ProxGroupL1Float self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1Float
        """
        _solver.ProxGroupL1Float_swiginit(self, _solver.new_ProxGroupL1Float(*args))

    def set_positive(self, positive: 'bool') -> "void":
        r"""set_positive(ProxGroupL1Float self, bool positive)"""
        return _solver.ProxGroupL1Float_set_positive(self, positive)

    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        r"""set_blocks_start(ProxGroupL1Float self, SArrayULongPtr blocks_start)"""
        return _solver.ProxGroupL1Float_set_blocks_start(self, blocks_start)

    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        r"""set_blocks_length(ProxGroupL1Float self, SArrayULongPtr blocks_length)"""
        return _solver.ProxGroupL1Float_set_blocks_length(self, blocks_length)

    def compare(self, that: 'ProxGroupL1Float') -> "bool":
        r"""compare(ProxGroupL1Float self, ProxGroupL1Float that) -> bool"""
        return _solver.ProxGroupL1Float_compare(self, that)

    def __getstate__(self): return ProxGroupL1FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxGroupL1FloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxGroupL1Float

# Register ProxGroupL1Float in _solver:
_solver.ProxGroupL1Float_swigregister(ProxGroupL1Float)


def ProxGroupL1FloatDeserialize(ptr: 'ProxGroupL1Float', hex: 'std::string const &') -> "void":
    r"""ProxGroupL1FloatDeserialize(ProxGroupL1Float ptr, std::string const & hex)"""
    return _solver.ProxGroupL1FloatDeserialize(ptr, hex)

def ProxGroupL1FloatSerialize(ptr: 'ProxGroupL1Float') -> "std::string":
    r"""ProxGroupL1FloatSerialize(ProxGroupL1Float ptr) -> std::string"""
    return _solver.ProxGroupL1FloatSerialize(ptr)
class IntVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _solver.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(IntVector self) -> bool"""
        return _solver.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(IntVector self) -> bool"""
        return _solver.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        r"""__len__(IntVector self) -> std::vector< int >::size_type"""
        return _solver.IntVector___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        r"""__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _solver.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)
        """
        return _solver.IntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        r"""__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _solver.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _solver.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        r"""
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _solver.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _solver.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        r"""pop(IntVector self) -> std::vector< int >::value_type"""
        return _solver.IntVector_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        r"""append(IntVector self, std::vector< int >::value_type const & x)"""
        return _solver.IntVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(IntVector self) -> bool"""
        return _solver.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        r"""size(IntVector self) -> std::vector< int >::size_type"""
        return _solver.IntVector_size(self)

    def swap(self, v: 'IntVector') -> "void":
        r"""swap(IntVector self, IntVector v)"""
        return _solver.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        r"""begin(IntVector self) -> std::vector< int >::iterator"""
        return _solver.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        r"""end(IntVector self) -> std::vector< int >::iterator"""
        return _solver.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        r"""rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _solver.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        r"""rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _solver.IntVector_rend(self)

    def clear(self) -> "void":
        r"""clear(IntVector self)"""
        return _solver.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        r"""get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _solver.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(IntVector self)"""
        return _solver.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        r"""
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _solver.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        _solver.IntVector_swiginit(self, _solver.new_IntVector(*args))

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        r"""push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _solver.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        r"""front(IntVector self) -> std::vector< int >::value_type const &"""
        return _solver.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        r"""back(IntVector self) -> std::vector< int >::value_type const &"""
        return _solver.IntVector_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        r"""assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _solver.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _solver.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _solver.IntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        r"""reserve(IntVector self, std::vector< int >::size_type n)"""
        return _solver.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        r"""capacity(IntVector self) -> std::vector< int >::size_type"""
        return _solver.IntVector_capacity(self)
    __swig_destroy__ = _solver.delete_IntVector

# Register IntVector in _solver:
_solver.IntVector_swigregister(IntVector)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(DoubleVector self) -> SwigPyIterator"""
        return _solver.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(DoubleVector self) -> bool"""
        return _solver.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(DoubleVector self) -> bool"""
        return _solver.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        r"""__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _solver.DoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        r"""__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _solver.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)
        """
        return _solver.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        r"""__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _solver.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _solver.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        r"""
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _solver.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _solver.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        r"""pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _solver.DoubleVector_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        r"""append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _solver.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(DoubleVector self) -> bool"""
        return _solver.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        r"""size(DoubleVector self) -> std::vector< double >::size_type"""
        return _solver.DoubleVector_size(self)

    def swap(self, v: 'DoubleVector') -> "void":
        r"""swap(DoubleVector self, DoubleVector v)"""
        return _solver.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        r"""begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _solver.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        r"""end(DoubleVector self) -> std::vector< double >::iterator"""
        return _solver.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        r"""rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _solver.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        r"""rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _solver.DoubleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(DoubleVector self)"""
        return _solver.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        r"""get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _solver.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(DoubleVector self)"""
        return _solver.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        r"""
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _solver.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVector self) -> DoubleVector
        __init__(DoubleVector self, DoubleVector other) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        _solver.DoubleVector_swiginit(self, _solver.new_DoubleVector(*args))

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        r"""push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _solver.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        r"""front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _solver.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        r"""back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _solver.DoubleVector_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        r"""assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _solver.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _solver.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _solver.DoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        r"""reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _solver.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        r"""capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _solver.DoubleVector_capacity(self)
    __swig_destroy__ = _solver.delete_DoubleVector

# Register DoubleVector in _solver:
_solver.DoubleVector_swigregister(DoubleVector)

class SArrayDoubleVector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< SArray< double > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(SArrayDoubleVector self) -> SwigPyIterator"""
        return _solver.SArrayDoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(SArrayDoubleVector self) -> bool"""
        return _solver.SArrayDoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(SArrayDoubleVector self) -> bool"""
        return _solver.SArrayDoubleVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< SArray< double > > >::size_type":
        r"""__len__(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::size_type"""
        return _solver.SArrayDoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::shared_ptr< SArray< double > > >::difference_type', j: 'std::vector< std::shared_ptr< SArray< double > > >::difference_type') -> "std::vector< std::shared_ptr< SArray< double > >,std::allocator< std::shared_ptr< SArray< double > > > > *":
        r"""__getslice__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::difference_type j) -> SArrayDoubleVector"""
        return _solver.SArrayDoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::difference_type j)
        __setslice__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::difference_type j, SArrayDoubleVector v)
        """
        return _solver.SArrayDoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::shared_ptr< SArray< double > > >::difference_type', j: 'std::vector< std::shared_ptr< SArray< double > > >::difference_type') -> "void":
        r"""__delslice__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::difference_type j)"""
        return _solver.SArrayDoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i)
        __delitem__(SArrayDoubleVector self, PySliceObject * slice)
        """
        return _solver.SArrayDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< SArray< double > > >::value_type const &":
        r"""
        __getitem__(SArrayDoubleVector self, PySliceObject * slice) -> SArrayDoubleVector
        __getitem__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i) -> std::vector< std::shared_ptr< SArray< double > > >::value_type const &
        """
        return _solver.SArrayDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(SArrayDoubleVector self, PySliceObject * slice, SArrayDoubleVector v)
        __setitem__(SArrayDoubleVector self, PySliceObject * slice)
        __setitem__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)
        """
        return _solver.SArrayDoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< SArray< double > > >::value_type":
        r"""pop(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::value_type"""
        return _solver.SArrayDoubleVector_pop(self)

    def append(self, x: 'std::vector< std::shared_ptr< SArray< double > > >::value_type const &') -> "void":
        r"""append(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)"""
        return _solver.SArrayDoubleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(SArrayDoubleVector self) -> bool"""
        return _solver.SArrayDoubleVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< SArray< double > > >::size_type":
        r"""size(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::size_type"""
        return _solver.SArrayDoubleVector_size(self)

    def swap(self, v: 'SArrayDoubleVector') -> "void":
        r"""swap(SArrayDoubleVector self, SArrayDoubleVector v)"""
        return _solver.SArrayDoubleVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< SArray< double > > >::iterator":
        r"""begin(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::iterator"""
        return _solver.SArrayDoubleVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< SArray< double > > >::iterator":
        r"""end(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::iterator"""
        return _solver.SArrayDoubleVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< SArray< double > > >::reverse_iterator":
        r"""rbegin(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::reverse_iterator"""
        return _solver.SArrayDoubleVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< SArray< double > > >::reverse_iterator":
        r"""rend(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::reverse_iterator"""
        return _solver.SArrayDoubleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(SArrayDoubleVector self)"""
        return _solver.SArrayDoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< SArray< double > > >::allocator_type":
        r"""get_allocator(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::allocator_type"""
        return _solver.SArrayDoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(SArrayDoubleVector self)"""
        return _solver.SArrayDoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< SArray< double > > >::iterator":
        r"""
        erase(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::iterator pos) -> std::vector< std::shared_ptr< SArray< double > > >::iterator
        erase(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::iterator first, std::vector< std::shared_ptr< SArray< double > > >::iterator last) -> std::vector< std::shared_ptr< SArray< double > > >::iterator
        """
        return _solver.SArrayDoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SArrayDoubleVector self) -> SArrayDoubleVector
        __init__(SArrayDoubleVector self, SArrayDoubleVector other) -> SArrayDoubleVector
        __init__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type size) -> SArrayDoubleVector
        __init__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type size, std::vector< std::shared_ptr< SArray< double > > >::value_type const & value) -> SArrayDoubleVector
        """
        _solver.SArrayDoubleVector_swiginit(self, _solver.new_SArrayDoubleVector(*args))

    def push_back(self, x: 'std::vector< std::shared_ptr< SArray< double > > >::value_type const &') -> "void":
        r"""push_back(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)"""
        return _solver.SArrayDoubleVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< SArray< double > > >::value_type const &":
        r"""front(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::value_type const &"""
        return _solver.SArrayDoubleVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< SArray< double > > >::value_type const &":
        r"""back(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::value_type const &"""
        return _solver.SArrayDoubleVector_back(self)

    def assign(self, n: 'std::vector< std::shared_ptr< SArray< double > > >::size_type', x: 'std::vector< std::shared_ptr< SArray< double > > >::value_type const &') -> "void":
        r"""assign(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type n, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)"""
        return _solver.SArrayDoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type new_size)
        resize(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type new_size, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)
        """
        return _solver.SArrayDoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::iterator pos, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x) -> std::vector< std::shared_ptr< SArray< double > > >::iterator
        insert(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::iterator pos, std::vector< std::shared_ptr< SArray< double > > >::size_type n, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)
        """
        return _solver.SArrayDoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::shared_ptr< SArray< double > > >::size_type') -> "void":
        r"""reserve(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type n)"""
        return _solver.SArrayDoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< SArray< double > > >::size_type":
        r"""capacity(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::size_type"""
        return _solver.SArrayDoubleVector_capacity(self)
    __swig_destroy__ = _solver.delete_SArrayDoubleVector

# Register SArrayDoubleVector in _solver:
_solver.SArrayDoubleVector_swigregister(SArrayDoubleVector)

class SArrayFloatVector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< SArray< float > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(SArrayFloatVector self) -> SwigPyIterator"""
        return _solver.SArrayFloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(SArrayFloatVector self) -> bool"""
        return _solver.SArrayFloatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(SArrayFloatVector self) -> bool"""
        return _solver.SArrayFloatVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< SArray< float > > >::size_type":
        r"""__len__(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::size_type"""
        return _solver.SArrayFloatVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::shared_ptr< SArray< float > > >::difference_type', j: 'std::vector< std::shared_ptr< SArray< float > > >::difference_type') -> "std::vector< std::shared_ptr< SArray< float > >,std::allocator< std::shared_ptr< SArray< float > > > > *":
        r"""__getslice__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::difference_type j) -> SArrayFloatVector"""
        return _solver.SArrayFloatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::difference_type j)
        __setslice__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::difference_type j, SArrayFloatVector v)
        """
        return _solver.SArrayFloatVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::shared_ptr< SArray< float > > >::difference_type', j: 'std::vector< std::shared_ptr< SArray< float > > >::difference_type') -> "void":
        r"""__delslice__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::difference_type j)"""
        return _solver.SArrayFloatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i)
        __delitem__(SArrayFloatVector self, PySliceObject * slice)
        """
        return _solver.SArrayFloatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< SArray< float > > >::value_type const &":
        r"""
        __getitem__(SArrayFloatVector self, PySliceObject * slice) -> SArrayFloatVector
        __getitem__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i) -> std::vector< std::shared_ptr< SArray< float > > >::value_type const &
        """
        return _solver.SArrayFloatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(SArrayFloatVector self, PySliceObject * slice, SArrayFloatVector v)
        __setitem__(SArrayFloatVector self, PySliceObject * slice)
        __setitem__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)
        """
        return _solver.SArrayFloatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< SArray< float > > >::value_type":
        r"""pop(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::value_type"""
        return _solver.SArrayFloatVector_pop(self)

    def append(self, x: 'std::vector< std::shared_ptr< SArray< float > > >::value_type const &') -> "void":
        r"""append(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)"""
        return _solver.SArrayFloatVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(SArrayFloatVector self) -> bool"""
        return _solver.SArrayFloatVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< SArray< float > > >::size_type":
        r"""size(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::size_type"""
        return _solver.SArrayFloatVector_size(self)

    def swap(self, v: 'SArrayFloatVector') -> "void":
        r"""swap(SArrayFloatVector self, SArrayFloatVector v)"""
        return _solver.SArrayFloatVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< SArray< float > > >::iterator":
        r"""begin(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::iterator"""
        return _solver.SArrayFloatVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< SArray< float > > >::iterator":
        r"""end(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::iterator"""
        return _solver.SArrayFloatVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< SArray< float > > >::reverse_iterator":
        r"""rbegin(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::reverse_iterator"""
        return _solver.SArrayFloatVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< SArray< float > > >::reverse_iterator":
        r"""rend(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::reverse_iterator"""
        return _solver.SArrayFloatVector_rend(self)

    def clear(self) -> "void":
        r"""clear(SArrayFloatVector self)"""
        return _solver.SArrayFloatVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< SArray< float > > >::allocator_type":
        r"""get_allocator(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::allocator_type"""
        return _solver.SArrayFloatVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(SArrayFloatVector self)"""
        return _solver.SArrayFloatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< SArray< float > > >::iterator":
        r"""
        erase(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::iterator pos) -> std::vector< std::shared_ptr< SArray< float > > >::iterator
        erase(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::iterator first, std::vector< std::shared_ptr< SArray< float > > >::iterator last) -> std::vector< std::shared_ptr< SArray< float > > >::iterator
        """
        return _solver.SArrayFloatVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SArrayFloatVector self) -> SArrayFloatVector
        __init__(SArrayFloatVector self, SArrayFloatVector other) -> SArrayFloatVector
        __init__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type size) -> SArrayFloatVector
        __init__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type size, std::vector< std::shared_ptr< SArray< float > > >::value_type const & value) -> SArrayFloatVector
        """
        _solver.SArrayFloatVector_swiginit(self, _solver.new_SArrayFloatVector(*args))

    def push_back(self, x: 'std::vector< std::shared_ptr< SArray< float > > >::value_type const &') -> "void":
        r"""push_back(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)"""
        return _solver.SArrayFloatVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< SArray< float > > >::value_type const &":
        r"""front(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::value_type const &"""
        return _solver.SArrayFloatVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< SArray< float > > >::value_type const &":
        r"""back(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::value_type const &"""
        return _solver.SArrayFloatVector_back(self)

    def assign(self, n: 'std::vector< std::shared_ptr< SArray< float > > >::size_type', x: 'std::vector< std::shared_ptr< SArray< float > > >::value_type const &') -> "void":
        r"""assign(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type n, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)"""
        return _solver.SArrayFloatVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type new_size)
        resize(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type new_size, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)
        """
        return _solver.SArrayFloatVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::iterator pos, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x) -> std::vector< std::shared_ptr< SArray< float > > >::iterator
        insert(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::iterator pos, std::vector< std::shared_ptr< SArray< float > > >::size_type n, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)
        """
        return _solver.SArrayFloatVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::shared_ptr< SArray< float > > >::size_type') -> "void":
        r"""reserve(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type n)"""
        return _solver.SArrayFloatVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< SArray< float > > >::size_type":
        r"""capacity(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::size_type"""
        return _solver.SArrayFloatVector_capacity(self)
    __swig_destroy__ = _solver.delete_SArrayFloatVector

# Register SArrayFloatVector in _solver:
_solver.SArrayFloatVector_swigregister(SArrayFloatVector)

RandType_unif = _solver.RandType_unif

RandType_perm = _solver.RandType_perm

class StoSolverDouble(object):
    r"""Proxy of C++ TStoSolver< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, epoch_size: 'unsigned long', tol: 'double', rand_type: 'RandType'):
        r"""__init__(StoSolverDouble self, unsigned long epoch_size, double tol, RandType rand_type) -> StoSolverDouble"""
        _solver.StoSolverDouble_swiginit(self, _solver.new_StoSolverDouble(epoch_size, tol, rand_type))

    def solve(self, n_epochs: 'int'=1) -> "void":
        r"""solve(StoSolverDouble self, int n_epochs=1)"""
        return _solver.StoSolverDouble_solve(self, n_epochs)

    def get_minimizer(self, out: 'ArrayDouble &') -> "void":
        r"""get_minimizer(StoSolverDouble self, ArrayDouble & out)"""
        return _solver.StoSolverDouble_get_minimizer(self, out)

    def get_iterate(self, out: 'ArrayDouble &') -> "void":
        r"""get_iterate(StoSolverDouble self, ArrayDouble & out)"""
        return _solver.StoSolverDouble_get_iterate(self, out)

    def set_starting_iterate(self, new_iterate: 'ArrayDouble &') -> "void":
        r"""set_starting_iterate(StoSolverDouble self, ArrayDouble & new_iterate)"""
        return _solver.StoSolverDouble_set_starting_iterate(self, new_iterate)

    def set_tol(self, tol: 'double') -> "void":
        r"""set_tol(StoSolverDouble self, double tol)"""
        return _solver.StoSolverDouble_set_tol(self, tol)

    def get_tol(self) -> "double":
        r"""get_tol(StoSolverDouble self) -> double"""
        return _solver.StoSolverDouble_get_tol(self)

    def set_epoch_size(self, epoch_size: 'unsigned long') -> "void":
        r"""set_epoch_size(StoSolverDouble self, unsigned long epoch_size)"""
        return _solver.StoSolverDouble_set_epoch_size(self, epoch_size)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(StoSolverDouble self) -> unsigned long"""
        return _solver.StoSolverDouble_get_epoch_size(self)

    def set_rand_type(self, rand_type: 'RandType') -> "void":
        r"""set_rand_type(StoSolverDouble self, RandType rand_type)"""
        return _solver.StoSolverDouble_set_rand_type(self, rand_type)

    def get_rand_type(self) -> "RandType":
        r"""get_rand_type(StoSolverDouble self) -> RandType"""
        return _solver.StoSolverDouble_get_rand_type(self)

    def set_rand_max(self, rand_max: 'unsigned long') -> "void":
        r"""set_rand_max(StoSolverDouble self, unsigned long rand_max)"""
        return _solver.StoSolverDouble_set_rand_max(self, rand_max)

    def get_rand_max(self) -> "unsigned long":
        r"""get_rand_max(StoSolverDouble self) -> unsigned long"""
        return _solver.StoSolverDouble_get_rand_max(self)

    def get_record_every(self) -> "int":
        r"""get_record_every(StoSolverDouble self) -> int"""
        return _solver.StoSolverDouble_get_record_every(self)

    def set_record_every(self, record_every: 'int') -> "void":
        r"""set_record_every(StoSolverDouble self, int record_every)"""
        return _solver.StoSolverDouble_set_record_every(self, record_every)

    def get_time_history(self) -> "std::vector< double,std::allocator< double > >":
        r"""get_time_history(StoSolverDouble self) -> DoubleVector"""
        return _solver.StoSolverDouble_get_time_history(self)

    def get_epoch_history(self) -> "std::vector< int,std::allocator< int > >":
        r"""get_epoch_history(StoSolverDouble self) -> IntVector"""
        return _solver.StoSolverDouble_get_epoch_history(self)

    def get_objectives(self) -> "std::vector< double,std::allocator< double > >":
        r"""get_objectives(StoSolverDouble self) -> DoubleVector"""
        return _solver.StoSolverDouble_get_objectives(self)

    def set_prev_obj(self, obj: 'double const') -> "void":
        r"""set_prev_obj(StoSolverDouble self, double const obj)"""
        return _solver.StoSolverDouble_set_prev_obj(self, obj)

    def set_first_obj(self, obj: 'double const') -> "void":
        r"""set_first_obj(StoSolverDouble self, double const obj)"""
        return _solver.StoSolverDouble_set_first_obj(self, obj)

    def get_first_obj(self) -> "double":
        r"""get_first_obj(StoSolverDouble self) -> double"""
        return _solver.StoSolverDouble_get_first_obj(self)

    def get_iterate_history(self) -> "SArrayDoublePtrList1D":
        r"""get_iterate_history(StoSolverDouble self) -> SArrayDoublePtrList1D"""
        return _solver.StoSolverDouble_get_iterate_history(self)

    def set_model(self, model: 'ModelDoublePtr') -> "void":
        r"""set_model(StoSolverDouble self, ModelDoublePtr model)"""
        return _solver.StoSolverDouble_set_model(self, model)

    def set_prox(self, prox: 'ProxDoublePtr') -> "void":
        r"""set_prox(StoSolverDouble self, ProxDoublePtr prox)"""
        return _solver.StoSolverDouble_set_prox(self, prox)

    def set_seed(self, seed: 'int') -> "void":
        r"""set_seed(StoSolverDouble self, int seed)"""
        return _solver.StoSolverDouble_set_seed(self, seed)

    def reset(self) -> "void":
        r"""reset(StoSolverDouble self)"""
        return _solver.StoSolverDouble_reset(self)
    __swig_destroy__ = _solver.delete_StoSolverDouble

# Register StoSolverDouble in _solver:
_solver.StoSolverDouble_swigregister(StoSolverDouble)

class StoSolverFloat(object):
    r"""Proxy of C++ TStoSolver< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, epoch_size: 'unsigned long', tol: 'float', rand_type: 'RandType'):
        r"""__init__(StoSolverFloat self, unsigned long epoch_size, float tol, RandType rand_type) -> StoSolverFloat"""
        _solver.StoSolverFloat_swiginit(self, _solver.new_StoSolverFloat(epoch_size, tol, rand_type))

    def solve(self, n_epochs: 'int'=1) -> "void":
        r"""solve(StoSolverFloat self, int n_epochs=1)"""
        return _solver.StoSolverFloat_solve(self, n_epochs)

    def get_minimizer(self, out: 'ArrayFloat &') -> "void":
        r"""get_minimizer(StoSolverFloat self, ArrayFloat & out)"""
        return _solver.StoSolverFloat_get_minimizer(self, out)

    def get_iterate(self, out: 'ArrayFloat &') -> "void":
        r"""get_iterate(StoSolverFloat self, ArrayFloat & out)"""
        return _solver.StoSolverFloat_get_iterate(self, out)

    def set_starting_iterate(self, new_iterate: 'ArrayFloat &') -> "void":
        r"""set_starting_iterate(StoSolverFloat self, ArrayFloat & new_iterate)"""
        return _solver.StoSolverFloat_set_starting_iterate(self, new_iterate)

    def set_tol(self, tol: 'float') -> "void":
        r"""set_tol(StoSolverFloat self, float tol)"""
        return _solver.StoSolverFloat_set_tol(self, tol)

    def get_tol(self) -> "float":
        r"""get_tol(StoSolverFloat self) -> float"""
        return _solver.StoSolverFloat_get_tol(self)

    def set_epoch_size(self, epoch_size: 'unsigned long') -> "void":
        r"""set_epoch_size(StoSolverFloat self, unsigned long epoch_size)"""
        return _solver.StoSolverFloat_set_epoch_size(self, epoch_size)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(StoSolverFloat self) -> unsigned long"""
        return _solver.StoSolverFloat_get_epoch_size(self)

    def set_rand_type(self, rand_type: 'RandType') -> "void":
        r"""set_rand_type(StoSolverFloat self, RandType rand_type)"""
        return _solver.StoSolverFloat_set_rand_type(self, rand_type)

    def get_rand_type(self) -> "RandType":
        r"""get_rand_type(StoSolverFloat self) -> RandType"""
        return _solver.StoSolverFloat_get_rand_type(self)

    def set_rand_max(self, rand_max: 'unsigned long') -> "void":
        r"""set_rand_max(StoSolverFloat self, unsigned long rand_max)"""
        return _solver.StoSolverFloat_set_rand_max(self, rand_max)

    def get_rand_max(self) -> "unsigned long":
        r"""get_rand_max(StoSolverFloat self) -> unsigned long"""
        return _solver.StoSolverFloat_get_rand_max(self)

    def get_record_every(self) -> "int":
        r"""get_record_every(StoSolverFloat self) -> int"""
        return _solver.StoSolverFloat_get_record_every(self)

    def set_record_every(self, record_every: 'int') -> "void":
        r"""set_record_every(StoSolverFloat self, int record_every)"""
        return _solver.StoSolverFloat_set_record_every(self, record_every)

    def get_time_history(self) -> "std::vector< double,std::allocator< double > >":
        r"""get_time_history(StoSolverFloat self) -> DoubleVector"""
        return _solver.StoSolverFloat_get_time_history(self)

    def get_epoch_history(self) -> "std::vector< int,std::allocator< int > >":
        r"""get_epoch_history(StoSolverFloat self) -> IntVector"""
        return _solver.StoSolverFloat_get_epoch_history(self)

    def get_objectives(self) -> "std::vector< double,std::allocator< double > >":
        r"""get_objectives(StoSolverFloat self) -> DoubleVector"""
        return _solver.StoSolverFloat_get_objectives(self)

    def set_prev_obj(self, obj: 'double const') -> "void":
        r"""set_prev_obj(StoSolverFloat self, double const obj)"""
        return _solver.StoSolverFloat_set_prev_obj(self, obj)

    def set_first_obj(self, obj: 'double const') -> "void":
        r"""set_first_obj(StoSolverFloat self, double const obj)"""
        return _solver.StoSolverFloat_set_first_obj(self, obj)

    def get_first_obj(self) -> "double":
        r"""get_first_obj(StoSolverFloat self) -> double"""
        return _solver.StoSolverFloat_get_first_obj(self)

    def get_iterate_history(self) -> "SArrayFloatPtrList1D":
        r"""get_iterate_history(StoSolverFloat self) -> SArrayFloatPtrList1D"""
        return _solver.StoSolverFloat_get_iterate_history(self)

    def set_model(self, model: 'ModelFloatPtr') -> "void":
        r"""set_model(StoSolverFloat self, ModelFloatPtr model)"""
        return _solver.StoSolverFloat_set_model(self, model)

    def set_prox(self, prox: 'ProxFloatPtr') -> "void":
        r"""set_prox(StoSolverFloat self, ProxFloatPtr prox)"""
        return _solver.StoSolverFloat_set_prox(self, prox)

    def set_seed(self, seed: 'int') -> "void":
        r"""set_seed(StoSolverFloat self, int seed)"""
        return _solver.StoSolverFloat_set_seed(self, seed)

    def reset(self) -> "void":
        r"""reset(StoSolverFloat self)"""
        return _solver.StoSolverFloat_reset(self)
    __swig_destroy__ = _solver.delete_StoSolverFloat

# Register StoSolverFloat in _solver:
_solver.StoSolverFloat_swigregister(StoSolverFloat)

class AdaGradDouble(StoSolverDouble):
    r"""Proxy of C++ TAdaGrad< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AdaGradDouble self) -> AdaGradDouble
        __init__(AdaGradDouble self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1) -> AdaGradDouble
        """
        _solver.AdaGradDouble_swiginit(self, _solver.new_AdaGradDouble(*args))

    def compare(self, that: 'AdaGradDouble') -> "bool":
        r"""compare(AdaGradDouble self, AdaGradDouble that) -> bool"""
        return _solver.AdaGradDouble_compare(self, that)

    def __getstate__(self): return AdaGradDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return AdaGradDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_AdaGradDouble

# Register AdaGradDouble in _solver:
_solver.AdaGradDouble_swigregister(AdaGradDouble)


def AdaGradDoubleDeserialize(ptr: 'AdaGradDouble', hex: 'std::string const &') -> "void":
    r"""AdaGradDoubleDeserialize(AdaGradDouble ptr, std::string const & hex)"""
    return _solver.AdaGradDoubleDeserialize(ptr, hex)

def AdaGradDoubleSerialize(ptr: 'AdaGradDouble') -> "std::string":
    r"""AdaGradDoubleSerialize(AdaGradDouble ptr) -> std::string"""
    return _solver.AdaGradDoubleSerialize(ptr)
class AdaGradFloat(StoSolverFloat):
    r"""Proxy of C++ TAdaGrad< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AdaGradFloat self) -> AdaGradFloat
        __init__(AdaGradFloat self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1) -> AdaGradFloat
        """
        _solver.AdaGradFloat_swiginit(self, _solver.new_AdaGradFloat(*args))

    def compare(self, that: 'AdaGradFloat') -> "bool":
        r"""compare(AdaGradFloat self, AdaGradFloat that) -> bool"""
        return _solver.AdaGradFloat_compare(self, that)

    def __getstate__(self): return AdaGradFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return AdaGradFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_AdaGradFloat

# Register AdaGradFloat in _solver:
_solver.AdaGradFloat_swigregister(AdaGradFloat)


def AdaGradFloatDeserialize(ptr: 'AdaGradFloat', hex: 'std::string const &') -> "void":
    r"""AdaGradFloatDeserialize(AdaGradFloat ptr, std::string const & hex)"""
    return _solver.AdaGradFloatDeserialize(ptr, hex)

def AdaGradFloatSerialize(ptr: 'AdaGradFloat') -> "std::string":
    r"""AdaGradFloatSerialize(AdaGradFloat ptr) -> std::string"""
    return _solver.AdaGradFloatSerialize(ptr)
class SDCADouble(StoSolverDouble):
    r"""Proxy of C++ SDCADouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SDCADouble self) -> SDCADouble
        __init__(SDCADouble self, double l_l2sq, unsigned long epoch_size=0, double tol=0., RandType rand_type=unif, int record_every=1, int seed=-1) -> SDCADouble
        """
        _solver.SDCADouble_swiginit(self, _solver.new_SDCADouble(*args))

    def set_model(self, model: 'ModelDoublePtr') -> "void":
        r"""set_model(SDCADouble self, ModelDoublePtr model)"""
        return _solver.SDCADouble_set_model(self, model)

    def reset(self) -> "void":
        r"""reset(SDCADouble self)"""
        return _solver.SDCADouble_reset(self)

    def set_starting_iterate(self, *args) -> "void":
        r"""
        set_starting_iterate(SDCADouble self)
        set_starting_iterate(SDCADouble self, ArrayDouble & dual_vector)
        """
        return _solver.SDCADouble_set_starting_iterate(self, *args)

    def get_l_l2sq(self) -> "double":
        r"""get_l_l2sq(SDCADouble self) -> double"""
        return _solver.SDCADouble_get_l_l2sq(self)

    def set_l_l2sq(self, l_l2sq: 'double') -> "void":
        r"""set_l_l2sq(SDCADouble self, double l_l2sq)"""
        return _solver.SDCADouble_set_l_l2sq(self, l_l2sq)

    def get_primal_vector(self) -> "SArrayDoublePtr":
        r"""get_primal_vector(SDCADouble self) -> SArrayDoublePtr"""
        return _solver.SDCADouble_get_primal_vector(self)

    def get_dual_vector(self) -> "SArrayDoublePtr":
        r"""get_dual_vector(SDCADouble self) -> SArrayDoublePtr"""
        return _solver.SDCADouble_get_dual_vector(self)

    def compare(self, that: 'SDCADouble') -> "bool":
        r"""compare(SDCADouble self, SDCADouble that) -> bool"""
        return _solver.SDCADouble_compare(self, that)

    def __getstate__(self): return SDCADoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SDCADoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SDCADouble

# Register SDCADouble in _solver:
_solver.SDCADouble_swigregister(SDCADouble)


def SDCADoubleDeserialize(ptr: 'SDCADouble', hex: 'std::string const &') -> "void":
    r"""SDCADoubleDeserialize(SDCADouble ptr, std::string const & hex)"""
    return _solver.SDCADoubleDeserialize(ptr, hex)

def SDCADoubleSerialize(ptr: 'SDCADouble') -> "std::string":
    r"""SDCADoubleSerialize(SDCADouble ptr) -> std::string"""
    return _solver.SDCADoubleSerialize(ptr)
class SDCAFloat(StoSolverFloat):
    r"""Proxy of C++ SDCAFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SDCAFloat self) -> SDCAFloat
        __init__(SDCAFloat self, float l_l2sq, unsigned long epoch_size=0, float tol=0., RandType rand_type=unif, int record_every=1, int seed=-1) -> SDCAFloat
        """
        _solver.SDCAFloat_swiginit(self, _solver.new_SDCAFloat(*args))

    def set_model(self, model: 'ModelFloatPtr') -> "void":
        r"""set_model(SDCAFloat self, ModelFloatPtr model)"""
        return _solver.SDCAFloat_set_model(self, model)

    def reset(self) -> "void":
        r"""reset(SDCAFloat self)"""
        return _solver.SDCAFloat_reset(self)

    def set_starting_iterate(self, *args) -> "void":
        r"""
        set_starting_iterate(SDCAFloat self)
        set_starting_iterate(SDCAFloat self, ArrayFloat & dual_vector)
        """
        return _solver.SDCAFloat_set_starting_iterate(self, *args)

    def get_l_l2sq(self) -> "float":
        r"""get_l_l2sq(SDCAFloat self) -> float"""
        return _solver.SDCAFloat_get_l_l2sq(self)

    def set_l_l2sq(self, l_l2sq: 'float') -> "void":
        r"""set_l_l2sq(SDCAFloat self, float l_l2sq)"""
        return _solver.SDCAFloat_set_l_l2sq(self, l_l2sq)

    def get_primal_vector(self) -> "SArrayFloatPtr":
        r"""get_primal_vector(SDCAFloat self) -> SArrayFloatPtr"""
        return _solver.SDCAFloat_get_primal_vector(self)

    def get_dual_vector(self) -> "SArrayFloatPtr":
        r"""get_dual_vector(SDCAFloat self) -> SArrayFloatPtr"""
        return _solver.SDCAFloat_get_dual_vector(self)

    def compare(self, that: 'SDCAFloat') -> "bool":
        r"""compare(SDCAFloat self, SDCAFloat that) -> bool"""
        return _solver.SDCAFloat_compare(self, that)

    def __getstate__(self): return SDCAFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SDCAFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SDCAFloat

# Register SDCAFloat in _solver:
_solver.SDCAFloat_swigregister(SDCAFloat)


def SDCAFloatDeserialize(ptr: 'SDCAFloat', hex: 'std::string const &') -> "void":
    r"""SDCAFloatDeserialize(SDCAFloat ptr, std::string const & hex)"""
    return _solver.SDCAFloatDeserialize(ptr, hex)

def SDCAFloatSerialize(ptr: 'SDCAFloat') -> "std::string":
    r"""SDCAFloatSerialize(SDCAFloat ptr) -> std::string"""
    return _solver.SDCAFloatSerialize(ptr)
class SGDDouble(StoSolverDouble):
    r"""Proxy of C++ TSGD< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SGDDouble self) -> SGDDouble
        __init__(SGDDouble self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1) -> SGDDouble
        """
        _solver.SGDDouble_swiginit(self, _solver.new_SGDDouble(*args))

    def set_step(self, step: 'double') -> "void":
        r"""set_step(SGDDouble self, double step)"""
        return _solver.SGDDouble_set_step(self, step)

    def get_step(self) -> "double":
        r"""get_step(SGDDouble self) -> double"""
        return _solver.SGDDouble_get_step(self)

    def compare(self, that: 'SGDDouble') -> "bool":
        r"""compare(SGDDouble self, SGDDouble that) -> bool"""
        return _solver.SGDDouble_compare(self, that)

    def __getstate__(self): return SGDDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SGDDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SGDDouble

# Register SGDDouble in _solver:
_solver.SGDDouble_swigregister(SGDDouble)


def SGDDoubleDeserialize(ptr: 'SGDDouble', hex: 'std::string const &') -> "void":
    r"""SGDDoubleDeserialize(SGDDouble ptr, std::string const & hex)"""
    return _solver.SGDDoubleDeserialize(ptr, hex)

def SGDDoubleSerialize(ptr: 'SGDDouble') -> "std::string":
    r"""SGDDoubleSerialize(SGDDouble ptr) -> std::string"""
    return _solver.SGDDoubleSerialize(ptr)
class SGDFloat(StoSolverFloat):
    r"""Proxy of C++ TSGD< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SGDFloat self) -> SGDFloat
        __init__(SGDFloat self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1) -> SGDFloat
        """
        _solver.SGDFloat_swiginit(self, _solver.new_SGDFloat(*args))

    def set_step(self, step: 'float') -> "void":
        r"""set_step(SGDFloat self, float step)"""
        return _solver.SGDFloat_set_step(self, step)

    def get_step(self) -> "float":
        r"""get_step(SGDFloat self) -> float"""
        return _solver.SGDFloat_get_step(self)

    def compare(self, that: 'SGDFloat') -> "bool":
        r"""compare(SGDFloat self, SGDFloat that) -> bool"""
        return _solver.SGDFloat_compare(self, that)

    def __getstate__(self): return SGDFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SGDFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SGDFloat

# Register SGDFloat in _solver:
_solver.SGDFloat_swigregister(SGDFloat)


def SGDFloatDeserialize(ptr: 'SGDFloat', hex: 'std::string const &') -> "void":
    r"""SGDFloatDeserialize(SGDFloat ptr, std::string const & hex)"""
    return _solver.SGDFloatDeserialize(ptr, hex)

def SGDFloatSerialize(ptr: 'SGDFloat') -> "std::string":
    r"""SGDFloatSerialize(SGDFloat ptr) -> std::string"""
    return _solver.SGDFloatSerialize(ptr)
class SAGADouble(StoSolverDouble):
    r"""Proxy of C++ TSAGA< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SAGADouble self) -> SAGADouble
        __init__(SAGADouble self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1) -> SAGADouble
        """
        _solver.SAGADouble_swiginit(self, _solver.new_SAGADouble(*args))

    def set_step(self, step: 'double') -> "void":
        r"""set_step(SAGADouble self, double step)"""
        return _solver.SAGADouble_set_step(self, step)

    def set_model(self, model: 'std::shared_ptr< TModel< double,double > >') -> "void":
        r"""set_model(SAGADouble self, std::shared_ptr< TModel< double,double > > model)"""
        return _solver.SAGADouble_set_model(self, model)

    def compare(self, that: 'SAGADouble') -> "bool":
        r"""compare(SAGADouble self, SAGADouble that) -> bool"""
        return _solver.SAGADouble_compare(self, that)

    def __getstate__(self): return SAGADoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SAGADoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SAGADouble

# Register SAGADouble in _solver:
_solver.SAGADouble_swigregister(SAGADouble)


def SAGADoubleDeserialize(ptr: 'SAGADouble', hex: 'std::string const &') -> "void":
    r"""SAGADoubleDeserialize(SAGADouble ptr, std::string const & hex)"""
    return _solver.SAGADoubleDeserialize(ptr, hex)

def SAGADoubleSerialize(ptr: 'SAGADouble') -> "std::string":
    r"""SAGADoubleSerialize(SAGADouble ptr) -> std::string"""
    return _solver.SAGADoubleSerialize(ptr)
class SAGAFloat(StoSolverFloat):
    r"""Proxy of C++ TSAGA< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SAGAFloat self) -> SAGAFloat
        __init__(SAGAFloat self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1) -> SAGAFloat
        """
        _solver.SAGAFloat_swiginit(self, _solver.new_SAGAFloat(*args))

    def set_step(self, step: 'float') -> "void":
        r"""set_step(SAGAFloat self, float step)"""
        return _solver.SAGAFloat_set_step(self, step)

    def set_model(self, model: 'std::shared_ptr< TModel< float,float > >') -> "void":
        r"""set_model(SAGAFloat self, std::shared_ptr< TModel< float,float > > model)"""
        return _solver.SAGAFloat_set_model(self, model)

    def compare(self, that: 'SAGAFloat') -> "bool":
        r"""compare(SAGAFloat self, SAGAFloat that) -> bool"""
        return _solver.SAGAFloat_compare(self, that)

    def __getstate__(self): return SAGAFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SAGAFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SAGAFloat

# Register SAGAFloat in _solver:
_solver.SAGAFloat_swigregister(SAGAFloat)


def SAGAFloatDeserialize(ptr: 'SAGAFloat', hex: 'std::string const &') -> "void":
    r"""SAGAFloatDeserialize(SAGAFloat ptr, std::string const & hex)"""
    return _solver.SAGAFloatDeserialize(ptr, hex)

def SAGAFloatSerialize(ptr: 'SAGAFloat') -> "std::string":
    r"""SAGAFloatSerialize(SAGAFloat ptr) -> std::string"""
    return _solver.SAGAFloatSerialize(ptr)
class AtomicSAGADouble(StoSolverDouble):
    r"""Proxy of C++ AtomicSAGA< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AtomicSAGADouble self) -> AtomicSAGADouble
        __init__(AtomicSAGADouble self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1, int n_threads=2) -> AtomicSAGADouble
        """
        _solver.AtomicSAGADouble_swiginit(self, _solver.new_AtomicSAGADouble(*args))

    def solve(self, n_epochs: 'int'=1) -> "void":
        r"""solve(AtomicSAGADouble self, int n_epochs=1)"""
        return _solver.AtomicSAGADouble_solve(self, n_epochs)

    def __getstate__(self): return AtomicSAGADoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return AtomicSAGADoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_AtomicSAGADouble

# Register AtomicSAGADouble in _solver:
_solver.AtomicSAGADouble_swigregister(AtomicSAGADouble)


def AtomicSAGADoubleDeserialize(ptr: 'AtomicSAGADouble', hex: 'std::string const &') -> "void":
    r"""AtomicSAGADoubleDeserialize(AtomicSAGADouble ptr, std::string const & hex)"""
    return _solver.AtomicSAGADoubleDeserialize(ptr, hex)

def AtomicSAGADoubleSerialize(ptr: 'AtomicSAGADouble') -> "std::string":
    r"""AtomicSAGADoubleSerialize(AtomicSAGADouble ptr) -> std::string"""
    return _solver.AtomicSAGADoubleSerialize(ptr)
class AtomicSAGAFloat(StoSolverFloat):
    r"""Proxy of C++ AtomicSAGA< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AtomicSAGAFloat self) -> AtomicSAGAFloat
        __init__(AtomicSAGAFloat self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1, int n_threads=2) -> AtomicSAGAFloat
        """
        _solver.AtomicSAGAFloat_swiginit(self, _solver.new_AtomicSAGAFloat(*args))

    def solve(self, n_epochs: 'int'=1) -> "void":
        r"""solve(AtomicSAGAFloat self, int n_epochs=1)"""
        return _solver.AtomicSAGAFloat_solve(self, n_epochs)

    def __getstate__(self): return AtomicSAGAFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return AtomicSAGAFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_AtomicSAGAFloat

# Register AtomicSAGAFloat in _solver:
_solver.AtomicSAGAFloat_swigregister(AtomicSAGAFloat)


def AtomicSAGAFloatDeserialize(ptr: 'AtomicSAGAFloat', hex: 'std::string const &') -> "void":
    r"""AtomicSAGAFloatDeserialize(AtomicSAGAFloat ptr, std::string const & hex)"""
    return _solver.AtomicSAGAFloatDeserialize(ptr, hex)

def AtomicSAGAFloatSerialize(ptr: 'AtomicSAGAFloat') -> "std::string":
    r"""AtomicSAGAFloatSerialize(AtomicSAGAFloat ptr) -> std::string"""
    return _solver.AtomicSAGAFloatSerialize(ptr)
SVRG_VarianceReductionMethod_Last = _solver.SVRG_VarianceReductionMethod_Last

SVRG_VarianceReductionMethod_Average = _solver.SVRG_VarianceReductionMethod_Average

SVRG_VarianceReductionMethod_Random = _solver.SVRG_VarianceReductionMethod_Random

SVRG_StepType_Fixed = _solver.SVRG_StepType_Fixed

SVRG_StepType_BarzilaiBorwein = _solver.SVRG_StepType_BarzilaiBorwein

class SVRGDouble(StoSolverDouble):
    r"""Proxy of C++ TSVRG< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SVRGDouble self) -> SVRGDouble
        __init__(SVRGDouble self, size_t epoch_size, double tol, RandType rand_type, double step, size_t record_every=1, int seed=-1, size_t n_threads=1, SVRG_VarianceReductionMethod variance_reduction=Last, SVRG_StepType step_method=Fixed) -> SVRGDouble
        """
        _solver.SVRGDouble_swiginit(self, _solver.new_SVRGDouble(*args))

    def solve(self, n_epochs: 'size_t'=1) -> "void":
        r"""solve(SVRGDouble self, size_t n_epochs=1)"""
        return _solver.SVRGDouble_solve(self, n_epochs)

    def get_step(self) -> "double":
        r"""get_step(SVRGDouble self) -> double"""
        return _solver.SVRGDouble_get_step(self)

    def set_step(self, step: 'double') -> "void":
        r"""set_step(SVRGDouble self, double step)"""
        return _solver.SVRGDouble_set_step(self, step)

    def get_variance_reduction(self) -> "SVRG_VarianceReductionMethod":
        r"""get_variance_reduction(SVRGDouble self) -> SVRG_VarianceReductionMethod"""
        return _solver.SVRGDouble_get_variance_reduction(self)

    def set_variance_reduction(self, variance_reduction: 'SVRG_VarianceReductionMethod') -> "void":
        r"""set_variance_reduction(SVRGDouble self, SVRG_VarianceReductionMethod variance_reduction)"""
        return _solver.SVRGDouble_set_variance_reduction(self, variance_reduction)

    def get_step_type(self) -> "SVRG_StepType":
        r"""get_step_type(SVRGDouble self) -> SVRG_StepType"""
        return _solver.SVRGDouble_get_step_type(self)

    def set_step_type(self, step_type: 'SVRG_StepType') -> "void":
        r"""set_step_type(SVRGDouble self, SVRG_StepType step_type)"""
        return _solver.SVRGDouble_set_step_type(self, step_type)

    def compare(self, that: 'SVRGDouble') -> "bool":
        r"""compare(SVRGDouble self, SVRGDouble that) -> bool"""
        return _solver.SVRGDouble_compare(self, that)

    def get_first_obj(self) -> "double":
        r"""get_first_obj(SVRGDouble self) -> double"""
        return _solver.SVRGDouble_get_first_obj(self)

    def __getstate__(self): return SVRGDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SVRGDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SVRGDouble

# Register SVRGDouble in _solver:
_solver.SVRGDouble_swigregister(SVRGDouble)


def SVRGDoubleDeserialize(ptr: 'SVRGDouble', hex: 'std::string const &') -> "void":
    r"""SVRGDoubleDeserialize(SVRGDouble ptr, std::string const & hex)"""
    return _solver.SVRGDoubleDeserialize(ptr, hex)

def SVRGDoubleSerialize(ptr: 'SVRGDouble') -> "std::string":
    r"""SVRGDoubleSerialize(SVRGDouble ptr) -> std::string"""
    return _solver.SVRGDoubleSerialize(ptr)
class SVRGFloat(StoSolverFloat):
    r"""Proxy of C++ TSVRG< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SVRGFloat self) -> SVRGFloat
        __init__(SVRGFloat self, size_t epoch_size, float tol, RandType rand_type, float step, size_t record_every=1, int seed=-1, size_t n_threads=1, SVRG_VarianceReductionMethod variance_reduction=Last, SVRG_StepType step_method=Fixed) -> SVRGFloat
        """
        _solver.SVRGFloat_swiginit(self, _solver.new_SVRGFloat(*args))

    def solve(self, n_epochs: 'size_t'=1) -> "void":
        r"""solve(SVRGFloat self, size_t n_epochs=1)"""
        return _solver.SVRGFloat_solve(self, n_epochs)

    def get_step(self) -> "float":
        r"""get_step(SVRGFloat self) -> float"""
        return _solver.SVRGFloat_get_step(self)

    def set_step(self, step: 'float') -> "void":
        r"""set_step(SVRGFloat self, float step)"""
        return _solver.SVRGFloat_set_step(self, step)

    def get_variance_reduction(self) -> "SVRG_VarianceReductionMethod":
        r"""get_variance_reduction(SVRGFloat self) -> SVRG_VarianceReductionMethod"""
        return _solver.SVRGFloat_get_variance_reduction(self)

    def set_variance_reduction(self, variance_reduction: 'SVRG_VarianceReductionMethod') -> "void":
        r"""set_variance_reduction(SVRGFloat self, SVRG_VarianceReductionMethod variance_reduction)"""
        return _solver.SVRGFloat_set_variance_reduction(self, variance_reduction)

    def get_step_type(self) -> "SVRG_StepType":
        r"""get_step_type(SVRGFloat self) -> SVRG_StepType"""
        return _solver.SVRGFloat_get_step_type(self)

    def set_step_type(self, step_type: 'SVRG_StepType') -> "void":
        r"""set_step_type(SVRGFloat self, SVRG_StepType step_type)"""
        return _solver.SVRGFloat_set_step_type(self, step_type)

    def compare(self, that: 'SVRGFloat') -> "bool":
        r"""compare(SVRGFloat self, SVRGFloat that) -> bool"""
        return _solver.SVRGFloat_compare(self, that)

    def get_first_obj(self) -> "double":
        r"""get_first_obj(SVRGFloat self) -> double"""
        return _solver.SVRGFloat_get_first_obj(self)

    def __getstate__(self): return SVRGFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SVRGFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SVRGFloat

# Register SVRGFloat in _solver:
_solver.SVRGFloat_swigregister(SVRGFloat)


def SVRGFloatDeserialize(ptr: 'SVRGFloat', hex: 'std::string const &') -> "void":
    r"""SVRGFloatDeserialize(SVRGFloat ptr, std::string const & hex)"""
    return _solver.SVRGFloatDeserialize(ptr, hex)

def SVRGFloatSerialize(ptr: 'SVRGFloat') -> "std::string":
    r"""SVRGFloatSerialize(SVRGFloat ptr) -> std::string"""
    return _solver.SVRGFloatSerialize(ptr)
class SVRGDoublePtrVector(object):
    r"""Proxy of C++ std::vector< SVRGDouble * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(SVRGDoublePtrVector self) -> SwigPyIterator"""
        return _solver.SVRGDoublePtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(SVRGDoublePtrVector self) -> bool"""
        return _solver.SVRGDoublePtrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(SVRGDoublePtrVector self) -> bool"""
        return _solver.SVRGDoublePtrVector___bool__(self)

    def __len__(self) -> "std::vector< TSVRG< double,double > * >::size_type":
        r"""__len__(SVRGDoublePtrVector self) -> std::vector< TSVRG< double,double > * >::size_type"""
        return _solver.SVRGDoublePtrVector___len__(self)

    def __getslice__(self, i: 'std::vector< TSVRG< double,double > * >::difference_type', j: 'std::vector< TSVRG< double,double > * >::difference_type') -> "std::vector< TSVRG< double,double > *,std::allocator< TSVRG< double,double > * > > *":
        r"""__getslice__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::difference_type i, std::vector< TSVRG< double,double > * >::difference_type j) -> SVRGDoublePtrVector"""
        return _solver.SVRGDoublePtrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::difference_type i, std::vector< TSVRG< double,double > * >::difference_type j)
        __setslice__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::difference_type i, std::vector< TSVRG< double,double > * >::difference_type j, SVRGDoublePtrVector v)
        """
        return _solver.SVRGDoublePtrVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< TSVRG< double,double > * >::difference_type', j: 'std::vector< TSVRG< double,double > * >::difference_type') -> "void":
        r"""__delslice__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::difference_type i, std::vector< TSVRG< double,double > * >::difference_type j)"""
        return _solver.SVRGDoublePtrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::difference_type i)
        __delitem__(SVRGDoublePtrVector self, PySliceObject * slice)
        """
        return _solver.SVRGDoublePtrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< TSVRG< double,double > * >::value_type":
        r"""
        __getitem__(SVRGDoublePtrVector self, PySliceObject * slice) -> SVRGDoublePtrVector
        __getitem__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::difference_type i) -> SVRGDouble
        """
        return _solver.SVRGDoublePtrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(SVRGDoublePtrVector self, PySliceObject * slice, SVRGDoublePtrVector v)
        __setitem__(SVRGDoublePtrVector self, PySliceObject * slice)
        __setitem__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::difference_type i, SVRGDouble x)
        """
        return _solver.SVRGDoublePtrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< TSVRG< double,double > * >::value_type":
        r"""pop(SVRGDoublePtrVector self) -> SVRGDouble"""
        return _solver.SVRGDoublePtrVector_pop(self)

    def append(self, x: 'SVRGDouble') -> "void":
        r"""append(SVRGDoublePtrVector self, SVRGDouble x)"""
        return _solver.SVRGDoublePtrVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(SVRGDoublePtrVector self) -> bool"""
        return _solver.SVRGDoublePtrVector_empty(self)

    def size(self) -> "std::vector< TSVRG< double,double > * >::size_type":
        r"""size(SVRGDoublePtrVector self) -> std::vector< TSVRG< double,double > * >::size_type"""
        return _solver.SVRGDoublePtrVector_size(self)

    def swap(self, v: 'SVRGDoublePtrVector') -> "void":
        r"""swap(SVRGDoublePtrVector self, SVRGDoublePtrVector v)"""
        return _solver.SVRGDoublePtrVector_swap(self, v)

    def begin(self) -> "std::vector< TSVRG< double,double > * >::iterator":
        r"""begin(SVRGDoublePtrVector self) -> std::vector< TSVRG< double,double > * >::iterator"""
        return _solver.SVRGDoublePtrVector_begin(self)

    def end(self) -> "std::vector< TSVRG< double,double > * >::iterator":
        r"""end(SVRGDoublePtrVector self) -> std::vector< TSVRG< double,double > * >::iterator"""
        return _solver.SVRGDoublePtrVector_end(self)

    def rbegin(self) -> "std::vector< TSVRG< double,double > * >::reverse_iterator":
        r"""rbegin(SVRGDoublePtrVector self) -> std::vector< TSVRG< double,double > * >::reverse_iterator"""
        return _solver.SVRGDoublePtrVector_rbegin(self)

    def rend(self) -> "std::vector< TSVRG< double,double > * >::reverse_iterator":
        r"""rend(SVRGDoublePtrVector self) -> std::vector< TSVRG< double,double > * >::reverse_iterator"""
        return _solver.SVRGDoublePtrVector_rend(self)

    def clear(self) -> "void":
        r"""clear(SVRGDoublePtrVector self)"""
        return _solver.SVRGDoublePtrVector_clear(self)

    def get_allocator(self) -> "std::vector< TSVRG< double,double > * >::allocator_type":
        r"""get_allocator(SVRGDoublePtrVector self) -> std::vector< TSVRG< double,double > * >::allocator_type"""
        return _solver.SVRGDoublePtrVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(SVRGDoublePtrVector self)"""
        return _solver.SVRGDoublePtrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< TSVRG< double,double > * >::iterator":
        r"""
        erase(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::iterator pos) -> std::vector< TSVRG< double,double > * >::iterator
        erase(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::iterator first, std::vector< TSVRG< double,double > * >::iterator last) -> std::vector< TSVRG< double,double > * >::iterator
        """
        return _solver.SVRGDoublePtrVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SVRGDoublePtrVector self) -> SVRGDoublePtrVector
        __init__(SVRGDoublePtrVector self, SVRGDoublePtrVector other) -> SVRGDoublePtrVector
        __init__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::size_type size) -> SVRGDoublePtrVector
        __init__(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::size_type size, SVRGDouble value) -> SVRGDoublePtrVector
        """
        _solver.SVRGDoublePtrVector_swiginit(self, _solver.new_SVRGDoublePtrVector(*args))

    def push_back(self, x: 'SVRGDouble') -> "void":
        r"""push_back(SVRGDoublePtrVector self, SVRGDouble x)"""
        return _solver.SVRGDoublePtrVector_push_back(self, x)

    def front(self) -> "std::vector< TSVRG< double,double > * >::value_type":
        r"""front(SVRGDoublePtrVector self) -> SVRGDouble"""
        return _solver.SVRGDoublePtrVector_front(self)

    def back(self) -> "std::vector< TSVRG< double,double > * >::value_type":
        r"""back(SVRGDoublePtrVector self) -> SVRGDouble"""
        return _solver.SVRGDoublePtrVector_back(self)

    def assign(self, n: 'std::vector< TSVRG< double,double > * >::size_type', x: 'SVRGDouble') -> "void":
        r"""assign(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::size_type n, SVRGDouble x)"""
        return _solver.SVRGDoublePtrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::size_type new_size)
        resize(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::size_type new_size, SVRGDouble x)
        """
        return _solver.SVRGDoublePtrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::iterator pos, SVRGDouble x) -> std::vector< TSVRG< double,double > * >::iterator
        insert(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::iterator pos, std::vector< TSVRG< double,double > * >::size_type n, SVRGDouble x)
        """
        return _solver.SVRGDoublePtrVector_insert(self, *args)

    def reserve(self, n: 'std::vector< TSVRG< double,double > * >::size_type') -> "void":
        r"""reserve(SVRGDoublePtrVector self, std::vector< TSVRG< double,double > * >::size_type n)"""
        return _solver.SVRGDoublePtrVector_reserve(self, n)

    def capacity(self) -> "std::vector< TSVRG< double,double > * >::size_type":
        r"""capacity(SVRGDoublePtrVector self) -> std::vector< TSVRG< double,double > * >::size_type"""
        return _solver.SVRGDoublePtrVector_capacity(self)
    __swig_destroy__ = _solver.delete_SVRGDoublePtrVector

# Register SVRGDoublePtrVector in _solver:
_solver.SVRGDoublePtrVector_swigregister(SVRGDoublePtrVector)

class MultiSVRGDouble(object):
    r"""Proxy of C++ MultiSVRGDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def multi_solve(*args) -> "void":
        r"""
        multi_solve(SVRGDoublePtrVector solvers, size_t epochs)
        multi_solve(SVRGDoublePtrVector solvers, size_t epochs, size_t threads)
        multi_solve(SVRGDoublePtrVector solvers, SArrayDoublePtrList1D & starters, size_t epochs, size_t threads)
        """
        return _solver.MultiSVRGDouble_multi_solve(*args)

    @staticmethod
    def push_solver(solvers: 'SVRGDoublePtrVector', solver: 'SVRGDouble') -> "void":
        r"""push_solver(SVRGDoublePtrVector solvers, SVRGDouble solver)"""
        return _solver.MultiSVRGDouble_push_solver(solvers, solver)

    def __init__(self):
        r"""__init__(MultiSVRGDouble self) -> MultiSVRGDouble"""
        _solver.MultiSVRGDouble_swiginit(self, _solver.new_MultiSVRGDouble())
    __swig_destroy__ = _solver.delete_MultiSVRGDouble

# Register MultiSVRGDouble in _solver:
_solver.MultiSVRGDouble_swigregister(MultiSVRGDouble)

def MultiSVRGDouble_multi_solve(*args) -> "void":
    r"""
    MultiSVRGDouble_multi_solve(SVRGDoublePtrVector solvers, size_t epochs)
    MultiSVRGDouble_multi_solve(SVRGDoublePtrVector solvers, size_t epochs, size_t threads)
    MultiSVRGDouble_multi_solve(SVRGDoublePtrVector solvers, SArrayDoublePtrList1D & starters, size_t epochs, size_t threads)
    """
    return _solver.MultiSVRGDouble_multi_solve(*args)

def MultiSVRGDouble_push_solver(solvers: 'SVRGDoublePtrVector', solver: 'SVRGDouble') -> "void":
    r"""MultiSVRGDouble_push_solver(SVRGDoublePtrVector solvers, SVRGDouble solver)"""
    return _solver.MultiSVRGDouble_push_solver(solvers, solver)

class MultiSVRGFloat(object):
    r"""Proxy of C++ MultiSVRG< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def multi_solve(*args) -> "void":
        r"""
        multi_solve(std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > & solvers, size_t epochs)
        multi_solve(std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > & solvers, size_t epochs, size_t threads)
        multi_solve(std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > & solvers, SArrayFloatVector starters, size_t epochs, size_t threads)
        """
        return _solver.MultiSVRGFloat_multi_solve(*args)

    @staticmethod
    def push_solver(solvers: 'std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > &', solver: 'SVRGFloat') -> "void":
        r"""push_solver(std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > & solvers, SVRGFloat solver)"""
        return _solver.MultiSVRGFloat_push_solver(solvers, solver)

    def __init__(self):
        r"""__init__(MultiSVRGFloat self) -> MultiSVRGFloat"""
        _solver.MultiSVRGFloat_swiginit(self, _solver.new_MultiSVRGFloat())
    __swig_destroy__ = _solver.delete_MultiSVRGFloat

# Register MultiSVRGFloat in _solver:
_solver.MultiSVRGFloat_swigregister(MultiSVRGFloat)

def MultiSVRGFloat_multi_solve(*args) -> "void":
    r"""
    MultiSVRGFloat_multi_solve(std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > & solvers, size_t epochs)
    MultiSVRGFloat_multi_solve(std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > & solvers, size_t epochs, size_t threads)
    MultiSVRGFloat_multi_solve(std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > & solvers, SArrayFloatVector starters, size_t epochs, size_t threads)
    """
    return _solver.MultiSVRGFloat_multi_solve(*args)

def MultiSVRGFloat_push_solver(solvers: 'std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > &', solver: 'SVRGFloat') -> "void":
    r"""MultiSVRGFloat_push_solver(std::vector< TSVRG< float,float > *,std::allocator< TSVRG< float,float > * > > & solvers, SVRGFloat solver)"""
    return _solver.MultiSVRGFloat_push_solver(solvers, solver)



