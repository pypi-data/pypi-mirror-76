# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _linear_model
else:
    import _linear_model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def to_hex(bytes: 'std::string const &') -> "std::string":
    r"""to_hex(std::string const & bytes) -> std::string"""
    return _linear_model.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    r"""to_bytes(std::string const & hex) -> std::string"""
    return _linear_model.to_bytes(hex)
SHARED_PTR_DISOWN = _linear_model.SHARED_PTR_DISOWN

import tick.base
import tick.array.build.array
class Model(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Model self) -> Model"""
        _linear_model.Model_swiginit(self, _linear_model.new_Model())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _linear_model.Model_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _linear_model.Model_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(Model self) -> unsigned long"""
        return _linear_model.Model_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(Model self) -> bool"""
        return _linear_model.Model_is_sparse(self)
    __swig_destroy__ = _linear_model.delete_Model

# Register Model in _linear_model:
_linear_model.Model_swigregister(Model)

class ModelDouble(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelDouble self) -> ModelDouble"""
        _linear_model.ModelDouble_swiginit(self, _linear_model.new_ModelDouble())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _linear_model.ModelDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _linear_model.ModelDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelDouble self) -> unsigned long"""
        return _linear_model.ModelDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelDouble self) -> bool"""
        return _linear_model.ModelDouble_is_sparse(self)
    __swig_destroy__ = _linear_model.delete_ModelDouble

# Register ModelDouble in _linear_model:
_linear_model.ModelDouble_swigregister(ModelDouble)

class ModelFloat(object):
    r"""Proxy of C++ TModel< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelFloat self) -> ModelFloat"""
        _linear_model.ModelFloat_swiginit(self, _linear_model.new_ModelFloat())

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _linear_model.ModelFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        r"""loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _linear_model.ModelFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelFloat self) -> unsigned long"""
        return _linear_model.ModelFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelFloat self) -> bool"""
        return _linear_model.ModelFloat_is_sparse(self)
    __swig_destroy__ = _linear_model.delete_ModelFloat

# Register ModelFloat in _linear_model:
_linear_model.ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(object):
    r"""Proxy of C++ TModel< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicDouble self) -> ModelAtomicDouble"""
        _linear_model.ModelAtomicDouble_swiginit(self, _linear_model.new_ModelAtomicDouble())

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _linear_model.ModelAtomicDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        r"""loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _linear_model.ModelAtomicDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _linear_model.ModelAtomicDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicDouble self) -> bool"""
        return _linear_model.ModelAtomicDouble_is_sparse(self)
    __swig_destroy__ = _linear_model.delete_ModelAtomicDouble

# Register ModelAtomicDouble in _linear_model:
_linear_model.ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(object):
    r"""Proxy of C++ TModel< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicFloat self) -> ModelAtomicFloat"""
        _linear_model.ModelAtomicFloat_swiginit(self, _linear_model.new_ModelAtomicFloat())

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _linear_model.ModelAtomicFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        r"""loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _linear_model.ModelAtomicFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _linear_model.ModelAtomicFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicFloat self) -> bool"""
        return _linear_model.ModelAtomicFloat_is_sparse(self)
    __swig_destroy__ = _linear_model.delete_ModelAtomicFloat

# Register ModelAtomicFloat in _linear_model:
_linear_model.ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    r"""Proxy of C++ TModelLabelsFeatures< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        _linear_model.ModelLabelsFeaturesDouble_swiginit(self, _linear_model.new_ModelLabelsFeaturesDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _linear_model.ModelLabelsFeaturesDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _linear_model.ModelLabelsFeaturesDouble_get_n_features(self)
    __swig_destroy__ = _linear_model.delete_ModelLabelsFeaturesDouble

# Register ModelLabelsFeaturesDouble in _linear_model:
_linear_model.ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        _linear_model.ModelLabelsFeaturesFloat_swiginit(self, _linear_model.new_ModelLabelsFeaturesFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _linear_model.ModelLabelsFeaturesFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _linear_model.ModelLabelsFeaturesFloat_get_n_features(self)
    __swig_destroy__ = _linear_model.delete_ModelLabelsFeaturesFloat

# Register ModelLabelsFeaturesFloat in _linear_model:
_linear_model.ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLabelsFeatures< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        _linear_model.ModelLabelsFeaturesAtomicDouble_swiginit(self, _linear_model.new_ModelLabelsFeaturesAtomicDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _linear_model.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _linear_model.ModelLabelsFeaturesAtomicDouble_get_n_features(self)
    __swig_destroy__ = _linear_model.delete_ModelLabelsFeaturesAtomicDouble

# Register ModelLabelsFeaturesAtomicDouble in _linear_model:
_linear_model.ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        _linear_model.ModelLabelsFeaturesAtomicFloat_swiginit(self, _linear_model.new_ModelLabelsFeaturesAtomicFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _linear_model.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _linear_model.ModelLabelsFeaturesAtomicFloat_get_n_features(self)
    __swig_destroy__ = _linear_model.delete_ModelLabelsFeaturesAtomicFloat

# Register ModelLabelsFeaturesAtomicFloat in _linear_model:
_linear_model.ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitz self) -> ModelLipschitz"""
        _linear_model.ModelLipschitz_swiginit(self, _linear_model.new_ModelLipschitz())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitz self) -> double"""
        return _linear_model.ModelLipschitz_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitz self) -> double"""
        return _linear_model.ModelLipschitz_get_lip_mean(self)
    __swig_destroy__ = _linear_model.delete_ModelLipschitz

# Register ModelLipschitz in _linear_model:
_linear_model.ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzDouble self) -> ModelLipschitzDouble"""
        _linear_model.ModelLipschitzDouble_swiginit(self, _linear_model.new_ModelLipschitzDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzDouble self) -> double"""
        return _linear_model.ModelLipschitzDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _linear_model.ModelLipschitzDouble_get_lip_mean(self)
    __swig_destroy__ = _linear_model.delete_ModelLipschitzDouble

# Register ModelLipschitzDouble in _linear_model:
_linear_model.ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    r"""Proxy of C++ TModelLipschitz< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzFloat self) -> ModelLipschitzFloat"""
        _linear_model.ModelLipschitzFloat_swiginit(self, _linear_model.new_ModelLipschitzFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzFloat self) -> float"""
        return _linear_model.ModelLipschitzFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _linear_model.ModelLipschitzFloat_get_lip_mean(self)
    __swig_destroy__ = _linear_model.delete_ModelLipschitzFloat

# Register ModelLipschitzFloat in _linear_model:
_linear_model.ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLipschitz< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicDouble self) -> ModelLipschitzAtomicDouble"""
        _linear_model.ModelLipschitzAtomicDouble_swiginit(self, _linear_model.new_ModelLipschitzAtomicDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _linear_model.ModelLipschitzAtomicDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _linear_model.ModelLipschitzAtomicDouble_get_lip_mean(self)
    __swig_destroy__ = _linear_model.delete_ModelLipschitzAtomicDouble

# Register ModelLipschitzAtomicDouble in _linear_model:
_linear_model.ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLipschitz< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicFloat self) -> ModelLipschitzAtomicFloat"""
        _linear_model.ModelLipschitzAtomicFloat_swiginit(self, _linear_model.new_ModelLipschitzAtomicFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _linear_model.ModelLipschitzAtomicFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _linear_model.ModelLipschitzAtomicFloat_get_lip_mean(self)
    __swig_destroy__ = _linear_model.delete_ModelLipschitzAtomicFloat

# Register ModelLipschitzAtomicFloat in _linear_model:
_linear_model.ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble"""
        _linear_model.ModelGeneralizedLinearDouble_swiginit(self, _linear_model.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _linear_model.ModelGeneralizedLinearDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _linear_model.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _linear_model.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _linear_model.delete_ModelGeneralizedLinearDouble

# Register ModelGeneralizedLinearDouble in _linear_model:
_linear_model.ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat"""
        _linear_model.ModelGeneralizedLinearFloat_swiginit(self, _linear_model.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _linear_model.ModelGeneralizedLinearFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _linear_model.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _linear_model.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _linear_model.delete_ModelGeneralizedLinearFloat

# Register ModelGeneralizedLinearFloat in _linear_model:
_linear_model.ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble"""
        _linear_model.ModelGeneralizedLinearAtomicDouble_swiginit(self, _linear_model.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _linear_model.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _linear_model.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _linear_model.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _linear_model.delete_ModelGeneralizedLinearAtomicDouble

# Register ModelGeneralizedLinearAtomicDouble in _linear_model:
_linear_model.ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat"""
        _linear_model.ModelGeneralizedLinearAtomicFloat_swiginit(self, _linear_model.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _linear_model.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _linear_model.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _linear_model.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _linear_model.delete_ModelGeneralizedLinearAtomicFloat

# Register ModelGeneralizedLinearAtomicFloat in _linear_model:
_linear_model.ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

class ModelHingeDouble(ModelGeneralizedLinearDouble):
    r"""Proxy of C++ ModelHingeDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelHingeDouble self) -> ModelHingeDouble
        __init__(ModelHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelHingeDouble
        """
        _linear_model.ModelHingeDouble_swiginit(self, _linear_model.new_ModelHingeDouble(*args))

    def compare(self, that: 'ModelHingeDouble') -> "bool":
        r"""compare(ModelHingeDouble self, ModelHingeDouble that) -> bool"""
        return _linear_model.ModelHingeDouble_compare(self, that)

    def __getstate__(self): return ModelHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelHingeDouble

# Register ModelHingeDouble in _linear_model:
_linear_model.ModelHingeDouble_swigregister(ModelHingeDouble)


def ModelHingeDoubleDeserialize(ptr: 'ModelHingeDouble', hex: 'std::string const &') -> "void":
    r"""ModelHingeDoubleDeserialize(ModelHingeDouble ptr, std::string const & hex)"""
    return _linear_model.ModelHingeDoubleDeserialize(ptr, hex)

def ModelHingeDoubleSerialize(ptr: 'ModelHingeDouble') -> "std::string":
    r"""ModelHingeDoubleSerialize(ModelHingeDouble ptr) -> std::string"""
    return _linear_model.ModelHingeDoubleSerialize(ptr)
class ModelHingeFloat(ModelGeneralizedLinearFloat):
    r"""Proxy of C++ ModelHingeFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelHingeFloat self) -> ModelHingeFloat
        __init__(ModelHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelHingeFloat
        """
        _linear_model.ModelHingeFloat_swiginit(self, _linear_model.new_ModelHingeFloat(*args))

    def compare(self, that: 'ModelHingeFloat') -> "bool":
        r"""compare(ModelHingeFloat self, ModelHingeFloat that) -> bool"""
        return _linear_model.ModelHingeFloat_compare(self, that)

    def __getstate__(self): return ModelHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHingeFloatDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelHingeFloat

# Register ModelHingeFloat in _linear_model:
_linear_model.ModelHingeFloat_swigregister(ModelHingeFloat)


def ModelHingeFloatDeserialize(ptr: 'ModelHingeFloat', hex: 'std::string const &') -> "void":
    r"""ModelHingeFloatDeserialize(ModelHingeFloat ptr, std::string const & hex)"""
    return _linear_model.ModelHingeFloatDeserialize(ptr, hex)

def ModelHingeFloatSerialize(ptr: 'ModelHingeFloat') -> "std::string":
    r"""ModelHingeFloatSerialize(ModelHingeFloat ptr) -> std::string"""
    return _linear_model.ModelHingeFloatSerialize(ptr)
class ModelQuadraticHingeDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelQuadraticHingeDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelQuadraticHingeDouble self) -> ModelQuadraticHingeDouble
        __init__(ModelQuadraticHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelQuadraticHingeDouble
        """
        _linear_model.ModelQuadraticHingeDouble_swiginit(self, _linear_model.new_ModelQuadraticHingeDouble(*args))

    def compare(self, that: 'ModelQuadraticHingeDouble') -> "bool":
        r"""compare(ModelQuadraticHingeDouble self, ModelQuadraticHingeDouble that) -> bool"""
        return _linear_model.ModelQuadraticHingeDouble_compare(self, that)

    def __getstate__(self): return ModelQuadraticHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelQuadraticHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelQuadraticHingeDouble

# Register ModelQuadraticHingeDouble in _linear_model:
_linear_model.ModelQuadraticHingeDouble_swigregister(ModelQuadraticHingeDouble)


def ModelQuadraticHingeDoubleDeserialize(ptr: 'ModelQuadraticHingeDouble', hex: 'std::string const &') -> "void":
    r"""ModelQuadraticHingeDoubleDeserialize(ModelQuadraticHingeDouble ptr, std::string const & hex)"""
    return _linear_model.ModelQuadraticHingeDoubleDeserialize(ptr, hex)

def ModelQuadraticHingeDoubleSerialize(ptr: 'ModelQuadraticHingeDouble') -> "std::string":
    r"""ModelQuadraticHingeDoubleSerialize(ModelQuadraticHingeDouble ptr) -> std::string"""
    return _linear_model.ModelQuadraticHingeDoubleSerialize(ptr)
class ModelQuadraticHingeFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelQuadraticHingeFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelQuadraticHingeFloat self) -> ModelQuadraticHingeFloat
        __init__(ModelQuadraticHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelQuadraticHingeFloat
        """
        _linear_model.ModelQuadraticHingeFloat_swiginit(self, _linear_model.new_ModelQuadraticHingeFloat(*args))

    def compare(self, that: 'ModelQuadraticHingeFloat') -> "bool":
        r"""compare(ModelQuadraticHingeFloat self, ModelQuadraticHingeFloat that) -> bool"""
        return _linear_model.ModelQuadraticHingeFloat_compare(self, that)

    def __getstate__(self): return ModelQuadraticHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelQuadraticHingeFloatDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelQuadraticHingeFloat

# Register ModelQuadraticHingeFloat in _linear_model:
_linear_model.ModelQuadraticHingeFloat_swigregister(ModelQuadraticHingeFloat)


def ModelQuadraticHingeFloatDeserialize(ptr: 'ModelQuadraticHingeFloat', hex: 'std::string const &') -> "void":
    r"""ModelQuadraticHingeFloatDeserialize(ModelQuadraticHingeFloat ptr, std::string const & hex)"""
    return _linear_model.ModelQuadraticHingeFloatDeserialize(ptr, hex)

def ModelQuadraticHingeFloatSerialize(ptr: 'ModelQuadraticHingeFloat') -> "std::string":
    r"""ModelQuadraticHingeFloatSerialize(ModelQuadraticHingeFloat ptr) -> std::string"""
    return _linear_model.ModelQuadraticHingeFloatSerialize(ptr)
class ModelSmoothedHingeDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelSmoothedHingeDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelSmoothedHingeDouble self) -> ModelSmoothedHingeDouble
        __init__(ModelSmoothedHingeDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const smoothness=1, int const n_threads=1) -> ModelSmoothedHingeDouble
        """
        _linear_model.ModelSmoothedHingeDouble_swiginit(self, _linear_model.new_ModelSmoothedHingeDouble(*args))

    def get_smoothness(self) -> "double":
        r"""get_smoothness(ModelSmoothedHingeDouble self) -> double"""
        return _linear_model.ModelSmoothedHingeDouble_get_smoothness(self)

    def set_smoothness(self, smoothness: 'double') -> "void":
        r"""set_smoothness(ModelSmoothedHingeDouble self, double smoothness)"""
        return _linear_model.ModelSmoothedHingeDouble_set_smoothness(self, smoothness)

    def compare(self, that: 'ModelSmoothedHingeDouble') -> "bool":
        r"""compare(ModelSmoothedHingeDouble self, ModelSmoothedHingeDouble that) -> bool"""
        return _linear_model.ModelSmoothedHingeDouble_compare(self, that)

    def __getstate__(self): return ModelSmoothedHingeDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelSmoothedHingeDoubleDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelSmoothedHingeDouble

# Register ModelSmoothedHingeDouble in _linear_model:
_linear_model.ModelSmoothedHingeDouble_swigregister(ModelSmoothedHingeDouble)


def ModelSmoothedHingeDoubleDeserialize(ptr: 'ModelSmoothedHingeDouble', hex: 'std::string const &') -> "void":
    r"""ModelSmoothedHingeDoubleDeserialize(ModelSmoothedHingeDouble ptr, std::string const & hex)"""
    return _linear_model.ModelSmoothedHingeDoubleDeserialize(ptr, hex)

def ModelSmoothedHingeDoubleSerialize(ptr: 'ModelSmoothedHingeDouble') -> "std::string":
    r"""ModelSmoothedHingeDoubleSerialize(ModelSmoothedHingeDouble ptr) -> std::string"""
    return _linear_model.ModelSmoothedHingeDoubleSerialize(ptr)
class ModelSmoothedHingeFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelSmoothedHingeFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelSmoothedHingeFloat self) -> ModelSmoothedHingeFloat
        __init__(ModelSmoothedHingeFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, float const smoothness=1, int const n_threads=1) -> ModelSmoothedHingeFloat
        """
        _linear_model.ModelSmoothedHingeFloat_swiginit(self, _linear_model.new_ModelSmoothedHingeFloat(*args))

    def get_smoothness(self) -> "float":
        r"""get_smoothness(ModelSmoothedHingeFloat self) -> float"""
        return _linear_model.ModelSmoothedHingeFloat_get_smoothness(self)

    def set_smoothness(self, smoothness: 'float') -> "void":
        r"""set_smoothness(ModelSmoothedHingeFloat self, float smoothness)"""
        return _linear_model.ModelSmoothedHingeFloat_set_smoothness(self, smoothness)

    def compare(self, that: 'ModelSmoothedHingeFloat') -> "bool":
        r"""compare(ModelSmoothedHingeFloat self, ModelSmoothedHingeFloat that) -> bool"""
        return _linear_model.ModelSmoothedHingeFloat_compare(self, that)

    def __getstate__(self): return ModelSmoothedHingeFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelSmoothedHingeFloatDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelSmoothedHingeFloat

# Register ModelSmoothedHingeFloat in _linear_model:
_linear_model.ModelSmoothedHingeFloat_swigregister(ModelSmoothedHingeFloat)


def ModelSmoothedHingeFloatDeserialize(ptr: 'ModelSmoothedHingeFloat', hex: 'std::string const &') -> "void":
    r"""ModelSmoothedHingeFloatDeserialize(ModelSmoothedHingeFloat ptr, std::string const & hex)"""
    return _linear_model.ModelSmoothedHingeFloatDeserialize(ptr, hex)

def ModelSmoothedHingeFloatSerialize(ptr: 'ModelSmoothedHingeFloat') -> "std::string":
    r"""ModelSmoothedHingeFloatSerialize(ModelSmoothedHingeFloat ptr) -> std::string"""
    return _linear_model.ModelSmoothedHingeFloatSerialize(ptr)
class ModelLinRegDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelLinRegDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLinRegDouble self) -> ModelLinRegDouble
        __init__(ModelLinRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegDouble
        """
        _linear_model.ModelLinRegDouble_swiginit(self, _linear_model.new_ModelLinRegDouble(*args))

    def compare(self, that: 'ModelLinRegDouble') -> "bool":
        r"""compare(ModelLinRegDouble self, ModelLinRegDouble that) -> bool"""
        return _linear_model.ModelLinRegDouble_compare(self, that)

    def __getstate__(self): return ModelLinRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegDoubleDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelLinRegDouble

# Register ModelLinRegDouble in _linear_model:
_linear_model.ModelLinRegDouble_swigregister(ModelLinRegDouble)


def ModelLinRegDoubleDeserialize(ptr: 'ModelLinRegDouble', hex: 'std::string const &') -> "void":
    r"""ModelLinRegDoubleDeserialize(ModelLinRegDouble ptr, std::string const & hex)"""
    return _linear_model.ModelLinRegDoubleDeserialize(ptr, hex)

def ModelLinRegDoubleSerialize(ptr: 'ModelLinRegDouble') -> "std::string":
    r"""ModelLinRegDoubleSerialize(ModelLinRegDouble ptr) -> std::string"""
    return _linear_model.ModelLinRegDoubleSerialize(ptr)
class ModelLinRegFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelLinRegFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLinRegFloat self) -> ModelLinRegFloat
        __init__(ModelLinRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLinRegFloat
        """
        _linear_model.ModelLinRegFloat_swiginit(self, _linear_model.new_ModelLinRegFloat(*args))

    def compare(self, that: 'ModelLinRegFloat') -> "bool":
        r"""compare(ModelLinRegFloat self, ModelLinRegFloat that) -> bool"""
        return _linear_model.ModelLinRegFloat_compare(self, that)

    def __getstate__(self): return ModelLinRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLinRegFloatDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelLinRegFloat

# Register ModelLinRegFloat in _linear_model:
_linear_model.ModelLinRegFloat_swigregister(ModelLinRegFloat)


def ModelLinRegFloatDeserialize(ptr: 'ModelLinRegFloat', hex: 'std::string const &') -> "void":
    r"""ModelLinRegFloatDeserialize(ModelLinRegFloat ptr, std::string const & hex)"""
    return _linear_model.ModelLinRegFloatDeserialize(ptr, hex)

def ModelLinRegFloatSerialize(ptr: 'ModelLinRegFloat') -> "std::string":
    r"""ModelLinRegFloatSerialize(ModelLinRegFloat ptr) -> std::string"""
    return _linear_model.ModelLinRegFloatSerialize(ptr)
class ModelLogRegDouble(ModelGeneralizedLinearDouble, ModelLipschitz):
    r"""Proxy of C++ ModelLogRegDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLogRegDouble self) -> ModelLogRegDouble
        __init__(ModelLogRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegDouble
        """
        _linear_model.ModelLogRegDouble_swiginit(self, _linear_model.new_ModelLogRegDouble(*args))

    def compare(self, that: 'ModelLogRegDouble') -> "bool":
        r"""compare(ModelLogRegDouble self, ModelLogRegDouble that) -> bool"""
        return _linear_model.ModelLogRegDouble_compare(self, that)

    @staticmethod
    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _linear_model.ModelLogRegDouble_sigmoid(x, out)

    @staticmethod
    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _linear_model.ModelLogRegDouble_logistic(x, out)

    def __getstate__(self): return ModelLogRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLogRegDoubleDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelLogRegDouble

# Register ModelLogRegDouble in _linear_model:
_linear_model.ModelLogRegDouble_swigregister(ModelLogRegDouble)

def ModelLogRegDouble_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    r"""ModelLogRegDouble_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _linear_model.ModelLogRegDouble_sigmoid(x, out)

def ModelLogRegDouble_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    r"""ModelLogRegDouble_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _linear_model.ModelLogRegDouble_logistic(x, out)


def ModelLogRegDoubleDeserialize(ptr: 'ModelLogRegDouble', hex: 'std::string const &') -> "void":
    r"""ModelLogRegDoubleDeserialize(ModelLogRegDouble ptr, std::string const & hex)"""
    return _linear_model.ModelLogRegDoubleDeserialize(ptr, hex)

def ModelLogRegDoubleSerialize(ptr: 'ModelLogRegDouble') -> "std::string":
    r"""ModelLogRegDoubleSerialize(ModelLogRegDouble ptr) -> std::string"""
    return _linear_model.ModelLogRegDoubleSerialize(ptr)
class ModelLogRegFloat(ModelGeneralizedLinearFloat, ModelLipschitzFloat):
    r"""Proxy of C++ ModelLogRegFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLogRegFloat self) -> ModelLogRegFloat
        __init__(ModelLogRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelLogRegFloat
        """
        _linear_model.ModelLogRegFloat_swiginit(self, _linear_model.new_ModelLogRegFloat(*args))

    def compare(self, that: 'ModelLogRegFloat') -> "bool":
        r"""compare(ModelLogRegFloat self, ModelLogRegFloat that) -> bool"""
        return _linear_model.ModelLogRegFloat_compare(self, that)

    @staticmethod
    def sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        r"""sigmoid(Array< float > const & x, Array< float > & out)"""
        return _linear_model.ModelLogRegFloat_sigmoid(x, out)

    @staticmethod
    def logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        r"""logistic(Array< float > const & x, Array< float > & out)"""
        return _linear_model.ModelLogRegFloat_logistic(x, out)

    def __getstate__(self): return ModelLogRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelLogRegFloatDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelLogRegFloat

# Register ModelLogRegFloat in _linear_model:
_linear_model.ModelLogRegFloat_swigregister(ModelLogRegFloat)

def ModelLogRegFloat_sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    r"""ModelLogRegFloat_sigmoid(Array< float > const & x, Array< float > & out)"""
    return _linear_model.ModelLogRegFloat_sigmoid(x, out)

def ModelLogRegFloat_logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    r"""ModelLogRegFloat_logistic(Array< float > const & x, Array< float > & out)"""
    return _linear_model.ModelLogRegFloat_logistic(x, out)


def ModelLogRegFloatDeserialize(ptr: 'ModelLogRegFloat', hex: 'std::string const &') -> "void":
    r"""ModelLogRegFloatDeserialize(ModelLogRegFloat ptr, std::string const & hex)"""
    return _linear_model.ModelLogRegFloatDeserialize(ptr, hex)

def ModelLogRegFloatSerialize(ptr: 'ModelLogRegFloat') -> "std::string":
    r"""ModelLogRegFloatSerialize(ModelLogRegFloat ptr) -> std::string"""
    return _linear_model.ModelLogRegFloatSerialize(ptr)
class ModelLogRegAtomicDouble(ModelGeneralizedLinearAtomicDouble, ModelLipschitzAtomicDouble):
    r"""Proxy of C++ ModelLogRegAtomicDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLogRegAtomicDouble self) -> ModelLogRegAtomicDouble
        __init__(ModelLogRegAtomicDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegAtomicDouble
        """
        _linear_model.ModelLogRegAtomicDouble_swiginit(self, _linear_model.new_ModelLogRegAtomicDouble(*args))

    def compare(self, that: 'TModelLogReg< double,std::atomic< double > > const &') -> "bool":
        r"""compare(ModelLogRegAtomicDouble self, TModelLogReg< double,std::atomic< double > > const & that) -> bool"""
        return _linear_model.ModelLogRegAtomicDouble_compare(self, that)

    @staticmethod
    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _linear_model.ModelLogRegAtomicDouble_sigmoid(x, out)

    @staticmethod
    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _linear_model.ModelLogRegAtomicDouble_logistic(x, out)
    __swig_destroy__ = _linear_model.delete_ModelLogRegAtomicDouble

# Register ModelLogRegAtomicDouble in _linear_model:
_linear_model.ModelLogRegAtomicDouble_swigregister(ModelLogRegAtomicDouble)

def ModelLogRegAtomicDouble_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    r"""ModelLogRegAtomicDouble_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _linear_model.ModelLogRegAtomicDouble_sigmoid(x, out)

def ModelLogRegAtomicDouble_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    r"""ModelLogRegAtomicDouble_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _linear_model.ModelLogRegAtomicDouble_logistic(x, out)

class ModelLogRegAtomicFloat(ModelGeneralizedLinearAtomicFloat, ModelLipschitzAtomicFloat):
    r"""Proxy of C++ TModelLogReg< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelLogRegAtomicFloat self) -> ModelLogRegAtomicFloat
        __init__(ModelLogRegAtomicFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogRegAtomicFloat
        """
        _linear_model.ModelLogRegAtomicFloat_swiginit(self, _linear_model.new_ModelLogRegAtomicFloat(*args))

    def compare(self, that: 'ModelLogRegAtomicFloat') -> "bool":
        r"""compare(ModelLogRegAtomicFloat self, ModelLogRegAtomicFloat that) -> bool"""
        return _linear_model.ModelLogRegAtomicFloat_compare(self, that)

    @staticmethod
    def sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        r"""sigmoid(Array< float > const & x, Array< float > & out)"""
        return _linear_model.ModelLogRegAtomicFloat_sigmoid(x, out)

    @staticmethod
    def logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
        r"""logistic(Array< float > const & x, Array< float > & out)"""
        return _linear_model.ModelLogRegAtomicFloat_logistic(x, out)
    __swig_destroy__ = _linear_model.delete_ModelLogRegAtomicFloat

# Register ModelLogRegAtomicFloat in _linear_model:
_linear_model.ModelLogRegAtomicFloat_swigregister(ModelLogRegAtomicFloat)

def ModelLogRegAtomicFloat_sigmoid(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    r"""ModelLogRegAtomicFloat_sigmoid(Array< float > const & x, Array< float > & out)"""
    return _linear_model.ModelLogRegAtomicFloat_sigmoid(x, out)

def ModelLogRegAtomicFloat_logistic(x: 'Array< float > const &', out: 'Array< float > &') -> "void":
    r"""ModelLogRegAtomicFloat_logistic(Array< float > const & x, Array< float > & out)"""
    return _linear_model.ModelLogRegAtomicFloat_logistic(x, out)

LinkType_identity = _linear_model.LinkType_identity

LinkType_exponential = _linear_model.LinkType_exponential

class ModelPoisRegDouble(ModelGeneralizedLinearDouble):
    r"""Proxy of C++ ModelPoisRegDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelPoisRegDouble self) -> ModelPoisRegDouble
        __init__(ModelPoisRegDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads=1) -> ModelPoisRegDouble
        """
        _linear_model.ModelPoisRegDouble_swiginit(self, _linear_model.new_ModelPoisRegDouble(*args))

    def compare(self, that: 'ModelPoisRegDouble') -> "bool":
        r"""compare(ModelPoisRegDouble self, ModelPoisRegDouble that) -> bool"""
        return _linear_model.ModelPoisRegDouble_compare(self, that)

    def __getstate__(self): return ModelPoisRegDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelPoisRegDoubleDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelPoisRegDouble

# Register ModelPoisRegDouble in _linear_model:
_linear_model.ModelPoisRegDouble_swigregister(ModelPoisRegDouble)


def ModelPoisRegDoubleDeserialize(ptr: 'ModelPoisRegDouble', hex: 'std::string const &') -> "void":
    r"""ModelPoisRegDoubleDeserialize(ModelPoisRegDouble ptr, std::string const & hex)"""
    return _linear_model.ModelPoisRegDoubleDeserialize(ptr, hex)

def ModelPoisRegDoubleSerialize(ptr: 'ModelPoisRegDouble') -> "std::string":
    r"""ModelPoisRegDoubleSerialize(ModelPoisRegDouble ptr) -> std::string"""
    return _linear_model.ModelPoisRegDoubleSerialize(ptr)
class ModelPoisRegFloat(ModelGeneralizedLinearFloat):
    r"""Proxy of C++ ModelPoisRegFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelPoisRegFloat self) -> ModelPoisRegFloat
        __init__(ModelPoisRegFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads=1) -> ModelPoisRegFloat
        """
        _linear_model.ModelPoisRegFloat_swiginit(self, _linear_model.new_ModelPoisRegFloat(*args))

    def compare(self, that: 'ModelPoisRegFloat') -> "bool":
        r"""compare(ModelPoisRegFloat self, ModelPoisRegFloat that) -> bool"""
        return _linear_model.ModelPoisRegFloat_compare(self, that)

    def __getstate__(self): return ModelPoisRegFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelPoisRegFloatDeserialize(self, s)

    __swig_destroy__ = _linear_model.delete_ModelPoisRegFloat

# Register ModelPoisRegFloat in _linear_model:
_linear_model.ModelPoisRegFloat_swigregister(ModelPoisRegFloat)


def ModelPoisRegFloatDeserialize(ptr: 'ModelPoisRegFloat', hex: 'std::string const &') -> "void":
    r"""ModelPoisRegFloatDeserialize(ModelPoisRegFloat ptr, std::string const & hex)"""
    return _linear_model.ModelPoisRegFloatDeserialize(ptr, hex)

def ModelPoisRegFloatSerialize(ptr: 'ModelPoisRegFloat') -> "std::string":
    r"""ModelPoisRegFloatSerialize(ModelPoisRegFloat ptr) -> std::string"""
    return _linear_model.ModelPoisRegFloatSerialize(ptr)


