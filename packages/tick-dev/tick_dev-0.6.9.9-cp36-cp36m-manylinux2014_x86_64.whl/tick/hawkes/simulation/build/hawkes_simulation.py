# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _hawkes_simulation
else:
    import _hawkes_simulation

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def to_hex(bytes: 'std::string const &') -> "std::string":
    r"""to_hex(std::string const & bytes) -> std::string"""
    return _hawkes_simulation.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    r"""to_bytes(std::string const & hex) -> std::string"""
    return _hawkes_simulation.to_bytes(hex)
SHARED_PTR_DISOWN = _hawkes_simulation.SHARED_PTR_DISOWN

import tick.base
import tick.array.build.array
class PP(object):
    r"""Proxy of C++ PP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, n_nodes: 'unsigned int', seed: 'int'=-1):
        r"""__init__(PP self, unsigned int n_nodes, int seed=-1) -> PP"""
        _hawkes_simulation.PP_swiginit(self, _hawkes_simulation.new_PP(n_nodes, seed))
    __swig_destroy__ = _hawkes_simulation.delete_PP

    def activate_itr(self, dt: 'double') -> "void":
        r"""activate_itr(PP self, double dt)"""
        return _hawkes_simulation.PP_activate_itr(self, dt)

    def simulate(self, *args) -> "void":
        r"""
        simulate(PP self, double run_time)
        simulate(PP self, ulong n_points)
        simulate(PP self, double run_time, ulong n_points)
        """
        return _hawkes_simulation.PP_simulate(self, *args)

    def reset(self) -> "void":
        r"""reset(PP self)"""
        return _hawkes_simulation.PP_reset(self)

    def itr_on(self) -> "bool":
        r"""itr_on(PP self) -> bool"""
        return _hawkes_simulation.PP_itr_on(self)

    def get_time(self) -> "double":
        r"""get_time(PP self) -> double"""
        return _hawkes_simulation.PP_get_time(self)

    def get_n_nodes(self) -> "unsigned int":
        r"""get_n_nodes(PP self) -> unsigned int"""
        return _hawkes_simulation.PP_get_n_nodes(self)

    def get_seed(self) -> "int":
        r"""get_seed(PP self) -> int"""
        return _hawkes_simulation.PP_get_seed(self)

    def get_n_total_jumps(self) -> "ulong":
        r"""get_n_total_jumps(PP self) -> ulong"""
        return _hawkes_simulation.PP_get_n_total_jumps(self)

    def get_itr(self) -> "VArrayDoublePtrList1D":
        r"""get_itr(PP self) -> VArrayDoublePtrList1D"""
        return _hawkes_simulation.PP_get_itr(self)

    def get_itr_times(self) -> "VArrayDoublePtr":
        r"""get_itr_times(PP self) -> VArrayDoublePtr"""
        return _hawkes_simulation.PP_get_itr_times(self)

    def get_itr_step(self) -> "double":
        r"""get_itr_step(PP self) -> double"""
        return _hawkes_simulation.PP_get_itr_step(self)

    def reseed_random_generator(self, seed: 'int') -> "void":
        r"""reseed_random_generator(PP self, int seed)"""
        return _hawkes_simulation.PP_reseed_random_generator(self, seed)

    def get_timestamps(self) -> "SArrayDoublePtrList1D":
        r"""get_timestamps(PP self) -> SArrayDoublePtrList1D"""
        return _hawkes_simulation.PP_get_timestamps(self)

    def set_timestamps(self, timestamps: 'VArrayDoublePtrList1D &', end_time: 'double') -> "void":
        r"""set_timestamps(PP self, VArrayDoublePtrList1D & timestamps, double end_time)"""
        return _hawkes_simulation.PP_set_timestamps(self, timestamps, end_time)

    def get_threshold_negative_intensity(self) -> "bool":
        r"""get_threshold_negative_intensity(PP self) -> bool"""
        return _hawkes_simulation.PP_get_threshold_negative_intensity(self)

    def set_threshold_negative_intensity(self, threshold_negative_intensity: 'bool const') -> "void":
        r"""set_threshold_negative_intensity(PP self, bool const threshold_negative_intensity)"""
        return _hawkes_simulation.PP_set_threshold_negative_intensity(self, threshold_negative_intensity)

# Register PP in _hawkes_simulation:
_hawkes_simulation.PP_swigregister(PP)

class Poisson(PP):
    r"""Proxy of C++ Poisson class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Poisson self, double intensity, int seed=-1) -> Poisson
        __init__(Poisson self, SArrayDoublePtr intensities, int seed=-1) -> Poisson
        """
        _hawkes_simulation.Poisson_swiginit(self, _hawkes_simulation.new_Poisson(*args))
    __swig_destroy__ = _hawkes_simulation.delete_Poisson

    def get_intensities(self) -> "SArrayDoublePtr":
        r"""get_intensities(Poisson self) -> SArrayDoublePtr"""
        return _hawkes_simulation.Poisson_get_intensities(self)

# Register Poisson in _hawkes_simulation:
_hawkes_simulation.Poisson_swigregister(Poisson)

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hawkes_simulation.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _hawkes_simulation.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _hawkes_simulation.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _hawkes_simulation.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _hawkes_simulation.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _hawkes_simulation.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _hawkes_simulation.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _hawkes_simulation.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _hawkes_simulation.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _hawkes_simulation.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _hawkes_simulation.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _hawkes_simulation:
_hawkes_simulation.SwigPyIterator_swigregister(SwigPyIterator)

class TimeFunctionVector(object):
    r"""Proxy of C++ std::vector< TimeFunction > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(TimeFunctionVector self) -> SwigPyIterator"""
        return _hawkes_simulation.TimeFunctionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(TimeFunctionVector self) -> bool"""
        return _hawkes_simulation.TimeFunctionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(TimeFunctionVector self) -> bool"""
        return _hawkes_simulation.TimeFunctionVector___bool__(self)

    def __len__(self) -> "std::vector< TimeFunction >::size_type":
        r"""__len__(TimeFunctionVector self) -> std::vector< TimeFunction >::size_type"""
        return _hawkes_simulation.TimeFunctionVector___len__(self)

    def __getslice__(self, i: 'std::vector< TimeFunction >::difference_type', j: 'std::vector< TimeFunction >::difference_type') -> "std::vector< TimeFunction,std::allocator< TimeFunction > > *":
        r"""__getslice__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, std::vector< TimeFunction >::difference_type j) -> TimeFunctionVector"""
        return _hawkes_simulation.TimeFunctionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, std::vector< TimeFunction >::difference_type j)
        __setslice__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, std::vector< TimeFunction >::difference_type j, TimeFunctionVector v)
        """
        return _hawkes_simulation.TimeFunctionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< TimeFunction >::difference_type', j: 'std::vector< TimeFunction >::difference_type') -> "void":
        r"""__delslice__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, std::vector< TimeFunction >::difference_type j)"""
        return _hawkes_simulation.TimeFunctionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i)
        __delitem__(TimeFunctionVector self, PySliceObject * slice)
        """
        return _hawkes_simulation.TimeFunctionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< TimeFunction >::value_type const &":
        r"""
        __getitem__(TimeFunctionVector self, PySliceObject * slice) -> TimeFunctionVector
        __getitem__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i) -> TimeFunction
        """
        return _hawkes_simulation.TimeFunctionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(TimeFunctionVector self, PySliceObject * slice, TimeFunctionVector v)
        __setitem__(TimeFunctionVector self, PySliceObject * slice)
        __setitem__(TimeFunctionVector self, std::vector< TimeFunction >::difference_type i, TimeFunction x)
        """
        return _hawkes_simulation.TimeFunctionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< TimeFunction >::value_type":
        r"""pop(TimeFunctionVector self) -> TimeFunction"""
        return _hawkes_simulation.TimeFunctionVector_pop(self)

    def append(self, x: 'TimeFunction') -> "void":
        r"""append(TimeFunctionVector self, TimeFunction x)"""
        return _hawkes_simulation.TimeFunctionVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(TimeFunctionVector self) -> bool"""
        return _hawkes_simulation.TimeFunctionVector_empty(self)

    def size(self) -> "std::vector< TimeFunction >::size_type":
        r"""size(TimeFunctionVector self) -> std::vector< TimeFunction >::size_type"""
        return _hawkes_simulation.TimeFunctionVector_size(self)

    def swap(self, v: 'TimeFunctionVector') -> "void":
        r"""swap(TimeFunctionVector self, TimeFunctionVector v)"""
        return _hawkes_simulation.TimeFunctionVector_swap(self, v)

    def begin(self) -> "std::vector< TimeFunction >::iterator":
        r"""begin(TimeFunctionVector self) -> std::vector< TimeFunction >::iterator"""
        return _hawkes_simulation.TimeFunctionVector_begin(self)

    def end(self) -> "std::vector< TimeFunction >::iterator":
        r"""end(TimeFunctionVector self) -> std::vector< TimeFunction >::iterator"""
        return _hawkes_simulation.TimeFunctionVector_end(self)

    def rbegin(self) -> "std::vector< TimeFunction >::reverse_iterator":
        r"""rbegin(TimeFunctionVector self) -> std::vector< TimeFunction >::reverse_iterator"""
        return _hawkes_simulation.TimeFunctionVector_rbegin(self)

    def rend(self) -> "std::vector< TimeFunction >::reverse_iterator":
        r"""rend(TimeFunctionVector self) -> std::vector< TimeFunction >::reverse_iterator"""
        return _hawkes_simulation.TimeFunctionVector_rend(self)

    def clear(self) -> "void":
        r"""clear(TimeFunctionVector self)"""
        return _hawkes_simulation.TimeFunctionVector_clear(self)

    def get_allocator(self) -> "std::vector< TimeFunction >::allocator_type":
        r"""get_allocator(TimeFunctionVector self) -> std::vector< TimeFunction >::allocator_type"""
        return _hawkes_simulation.TimeFunctionVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(TimeFunctionVector self)"""
        return _hawkes_simulation.TimeFunctionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< TimeFunction >::iterator":
        r"""
        erase(TimeFunctionVector self, std::vector< TimeFunction >::iterator pos) -> std::vector< TimeFunction >::iterator
        erase(TimeFunctionVector self, std::vector< TimeFunction >::iterator first, std::vector< TimeFunction >::iterator last) -> std::vector< TimeFunction >::iterator
        """
        return _hawkes_simulation.TimeFunctionVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(TimeFunctionVector self) -> TimeFunctionVector
        __init__(TimeFunctionVector self, TimeFunctionVector other) -> TimeFunctionVector
        __init__(TimeFunctionVector self, std::vector< TimeFunction >::size_type size) -> TimeFunctionVector
        __init__(TimeFunctionVector self, std::vector< TimeFunction >::size_type size, TimeFunction value) -> TimeFunctionVector
        """
        _hawkes_simulation.TimeFunctionVector_swiginit(self, _hawkes_simulation.new_TimeFunctionVector(*args))

    def push_back(self, x: 'TimeFunction') -> "void":
        r"""push_back(TimeFunctionVector self, TimeFunction x)"""
        return _hawkes_simulation.TimeFunctionVector_push_back(self, x)

    def front(self) -> "std::vector< TimeFunction >::value_type const &":
        r"""front(TimeFunctionVector self) -> TimeFunction"""
        return _hawkes_simulation.TimeFunctionVector_front(self)

    def back(self) -> "std::vector< TimeFunction >::value_type const &":
        r"""back(TimeFunctionVector self) -> TimeFunction"""
        return _hawkes_simulation.TimeFunctionVector_back(self)

    def assign(self, n: 'std::vector< TimeFunction >::size_type', x: 'TimeFunction') -> "void":
        r"""assign(TimeFunctionVector self, std::vector< TimeFunction >::size_type n, TimeFunction x)"""
        return _hawkes_simulation.TimeFunctionVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(TimeFunctionVector self, std::vector< TimeFunction >::size_type new_size)
        resize(TimeFunctionVector self, std::vector< TimeFunction >::size_type new_size, TimeFunction x)
        """
        return _hawkes_simulation.TimeFunctionVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(TimeFunctionVector self, std::vector< TimeFunction >::iterator pos, TimeFunction x) -> std::vector< TimeFunction >::iterator
        insert(TimeFunctionVector self, std::vector< TimeFunction >::iterator pos, std::vector< TimeFunction >::size_type n, TimeFunction x)
        """
        return _hawkes_simulation.TimeFunctionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< TimeFunction >::size_type') -> "void":
        r"""reserve(TimeFunctionVector self, std::vector< TimeFunction >::size_type n)"""
        return _hawkes_simulation.TimeFunctionVector_reserve(self, n)

    def capacity(self) -> "std::vector< TimeFunction >::size_type":
        r"""capacity(TimeFunctionVector self) -> std::vector< TimeFunction >::size_type"""
        return _hawkes_simulation.TimeFunctionVector_capacity(self)
    __swig_destroy__ = _hawkes_simulation.delete_TimeFunctionVector

# Register TimeFunctionVector in _hawkes_simulation:
_hawkes_simulation.TimeFunctionVector_swigregister(TimeFunctionVector)

class InhomogeneousPoisson(PP):
    r"""Proxy of C++ InhomogeneousPoisson class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InhomogeneousPoisson self, TimeFunction intensity_function, int seed=-1) -> InhomogeneousPoisson
        __init__(InhomogeneousPoisson self, TimeFunctionVector intensity_functions, int seed=-1) -> InhomogeneousPoisson
        """
        _hawkes_simulation.InhomogeneousPoisson_swiginit(self, _hawkes_simulation.new_InhomogeneousPoisson(*args))
    __swig_destroy__ = _hawkes_simulation.delete_InhomogeneousPoisson

    def intensity_value(self, dimension: 'int', times_values: 'ArrayDouble &') -> "SArrayDoublePtr":
        r"""intensity_value(InhomogeneousPoisson self, int dimension, ArrayDouble & times_values) -> SArrayDoublePtr"""
        return _hawkes_simulation.InhomogeneousPoisson_intensity_value(self, dimension, times_values)

# Register InhomogeneousPoisson in _hawkes_simulation:
_hawkes_simulation.InhomogeneousPoisson_swigregister(InhomogeneousPoisson)

class Hawkes(PP):
    r"""Proxy of C++ Hawkes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, dimension: 'int', seed: 'int'=-1):
        r"""__init__(Hawkes self, int dimension, int seed=-1) -> Hawkes"""
        _hawkes_simulation.Hawkes_swiginit(self, _hawkes_simulation.new_Hawkes(dimension, seed))

    def set_kernel(self, i: 'unsigned int', j: 'unsigned int', kernel: 'std::shared_ptr< HawkesKernel >') -> "void":
        r"""set_kernel(Hawkes self, unsigned int i, unsigned int j, std::shared_ptr< HawkesKernel > kernel)"""
        return _hawkes_simulation.Hawkes_set_kernel(self, i, j, kernel)

    def set_baseline(self, *args) -> "void":
        r"""
        set_baseline(Hawkes self, unsigned int i, double baseline)
        set_baseline(Hawkes self, unsigned int i, ArrayDouble & times, ArrayDouble & values)
        set_baseline(Hawkes self, unsigned int i, TimeFunction time_function)
        """
        return _hawkes_simulation.Hawkes_set_baseline(self, *args)

    def get_baseline(self, *args) -> "double":
        r"""
        get_baseline(Hawkes self, unsigned int i, ArrayDouble & t) -> SArrayDoublePtr
        get_baseline(Hawkes self, unsigned int i, double t) -> double
        """
        return _hawkes_simulation.Hawkes_get_baseline(self, *args)

    def __getstate__(self): return HawkesSerialize(self)
    def __setstate__(self, s):
        self.__init__(0)
        return HawkesDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_Hawkes

# Register Hawkes in _hawkes_simulation:
_hawkes_simulation.Hawkes_swigregister(Hawkes)


def HawkesDeserialize(ptr: 'Hawkes', hex: 'std::string const &') -> "void":
    r"""HawkesDeserialize(Hawkes ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesDeserialize(ptr, hex)

def HawkesSerialize(ptr: 'Hawkes') -> "std::string":
    r"""HawkesSerialize(Hawkes ptr) -> std::string"""
    return _hawkes_simulation.HawkesSerialize(ptr)
class HawkesKernel(object):
    r"""Proxy of C++ HawkesKernel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, support: 'double'=0):
        r"""__init__(HawkesKernel self, double support=0) -> HawkesKernel"""
        _hawkes_simulation.HawkesKernel_swiginit(self, _hawkes_simulation.new_HawkesKernel(support))

    def is_zero(self) -> "bool":
        r"""is_zero(HawkesKernel self) -> bool"""
        return _hawkes_simulation.HawkesKernel_is_zero(self)

    def get_support(self) -> "double":
        r"""get_support(HawkesKernel self) -> double"""
        return _hawkes_simulation.HawkesKernel_get_support(self)

    def get_plot_support(self) -> "double":
        r"""get_plot_support(HawkesKernel self) -> double"""
        return _hawkes_simulation.HawkesKernel_get_plot_support(self)

    def get_value(self, x: 'double') -> "double":
        r"""get_value(HawkesKernel self, double x) -> double"""
        return _hawkes_simulation.HawkesKernel_get_value(self, x)

    def get_values(self, t_values: 'ArrayDouble const &') -> "SArrayDoublePtr":
        r"""get_values(HawkesKernel self, ArrayDouble const & t_values) -> SArrayDoublePtr"""
        return _hawkes_simulation.HawkesKernel_get_values(self, t_values)

    def get_norm(self, nsteps: 'int'=10000) -> "double":
        r"""get_norm(HawkesKernel self, int nsteps=10000) -> double"""
        return _hawkes_simulation.HawkesKernel_get_norm(self, nsteps)
    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernel

# Register HawkesKernel in _hawkes_simulation:
_hawkes_simulation.HawkesKernel_swigregister(HawkesKernel)

class HawkesKernelExp(HawkesKernel):
    r"""Proxy of C++ HawkesKernelExp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def set_fast_exp(flag: 'bool') -> "void":
        r"""set_fast_exp(bool flag)"""
        return _hawkes_simulation.HawkesKernelExp_set_fast_exp(flag)

    @staticmethod
    def get_fast_exp() -> "bool":
        r"""get_fast_exp() -> bool"""
        return _hawkes_simulation.HawkesKernelExp_get_fast_exp()

    def __init__(self, intensity: 'double', decay: 'double'):
        r"""__init__(HawkesKernelExp self, double intensity, double decay) -> HawkesKernelExp"""
        _hawkes_simulation.HawkesKernelExp_swiginit(self, _hawkes_simulation.new_HawkesKernelExp(intensity, decay))

    def get_intensity(self) -> "double":
        r"""get_intensity(HawkesKernelExp self) -> double"""
        return _hawkes_simulation.HawkesKernelExp_get_intensity(self)

    def get_decay(self) -> "double":
        r"""get_decay(HawkesKernelExp self) -> double"""
        return _hawkes_simulation.HawkesKernelExp_get_decay(self)

    def __getstate__(self): return HawkesKernelExpSerialize(self)
    def __setstate__(self, s):
        self.__init__(0.0,0.0)
        return HawkesKernelExpDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernelExp

# Register HawkesKernelExp in _hawkes_simulation:
_hawkes_simulation.HawkesKernelExp_swigregister(HawkesKernelExp)

def HawkesKernelExp_set_fast_exp(flag: 'bool') -> "void":
    r"""HawkesKernelExp_set_fast_exp(bool flag)"""
    return _hawkes_simulation.HawkesKernelExp_set_fast_exp(flag)

def HawkesKernelExp_get_fast_exp() -> "bool":
    r"""HawkesKernelExp_get_fast_exp() -> bool"""
    return _hawkes_simulation.HawkesKernelExp_get_fast_exp()


def HawkesKernelExpDeserialize(ptr: 'HawkesKernelExp', hex: 'std::string const &') -> "void":
    r"""HawkesKernelExpDeserialize(HawkesKernelExp ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernelExpDeserialize(ptr, hex)

def HawkesKernelExpSerialize(ptr: 'HawkesKernelExp') -> "std::string":
    r"""HawkesKernelExpSerialize(HawkesKernelExp ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernelExpSerialize(ptr)
class HawkesKernelSumExp(HawkesKernel):
    r"""Proxy of C++ HawkesKernelSumExp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def set_fast_exp(flag: 'bool') -> "void":
        r"""set_fast_exp(bool flag)"""
        return _hawkes_simulation.HawkesKernelSumExp_set_fast_exp(flag)

    @staticmethod
    def get_fast_exp() -> "bool":
        r"""get_fast_exp() -> bool"""
        return _hawkes_simulation.HawkesKernelSumExp_get_fast_exp()

    def __init__(self, *args):
        r"""
        __init__(HawkesKernelSumExp self, ArrayDouble const & intensities, ArrayDouble const & decays) -> HawkesKernelSumExp
        __init__(HawkesKernelSumExp self) -> HawkesKernelSumExp
        """
        _hawkes_simulation.HawkesKernelSumExp_swiginit(self, _hawkes_simulation.new_HawkesKernelSumExp(*args))

    def get_intensities(self) -> "SArrayDoublePtr":
        r"""get_intensities(HawkesKernelSumExp self) -> SArrayDoublePtr"""
        return _hawkes_simulation.HawkesKernelSumExp_get_intensities(self)

    def get_decays(self) -> "SArrayDoublePtr":
        r"""get_decays(HawkesKernelSumExp self) -> SArrayDoublePtr"""
        return _hawkes_simulation.HawkesKernelSumExp_get_decays(self)

    def get_n_decays(self) -> "ulong":
        r"""get_n_decays(HawkesKernelSumExp self) -> ulong"""
        return _hawkes_simulation.HawkesKernelSumExp_get_n_decays(self)

    def __getstate__(self): return HawkesKernelSumExpSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return HawkesKernelSumExpDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernelSumExp

# Register HawkesKernelSumExp in _hawkes_simulation:
_hawkes_simulation.HawkesKernelSumExp_swigregister(HawkesKernelSumExp)

def HawkesKernelSumExp_set_fast_exp(flag: 'bool') -> "void":
    r"""HawkesKernelSumExp_set_fast_exp(bool flag)"""
    return _hawkes_simulation.HawkesKernelSumExp_set_fast_exp(flag)

def HawkesKernelSumExp_get_fast_exp() -> "bool":
    r"""HawkesKernelSumExp_get_fast_exp() -> bool"""
    return _hawkes_simulation.HawkesKernelSumExp_get_fast_exp()


def HawkesKernelSumExpDeserialize(ptr: 'HawkesKernelSumExp', hex: 'std::string const &') -> "void":
    r"""HawkesKernelSumExpDeserialize(HawkesKernelSumExp ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernelSumExpDeserialize(ptr, hex)

def HawkesKernelSumExpSerialize(ptr: 'HawkesKernelSumExp') -> "std::string":
    r"""HawkesKernelSumExpSerialize(HawkesKernelSumExp ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernelSumExpSerialize(ptr)
class HawkesKernelPowerLaw(HawkesKernel):
    r"""Proxy of C++ HawkesKernelPowerLaw class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, multiplier: 'double', cutoff: 'double', exponent: 'double', support: 'double'=-1, error: 'double'=1e-5):
        r"""__init__(HawkesKernelPowerLaw self, double multiplier, double cutoff, double exponent, double support=-1, double error=1e-5) -> HawkesKernelPowerLaw"""
        _hawkes_simulation.HawkesKernelPowerLaw_swiginit(self, _hawkes_simulation.new_HawkesKernelPowerLaw(multiplier, cutoff, exponent, support, error))

    def get_multiplier(self) -> "double":
        r"""get_multiplier(HawkesKernelPowerLaw self) -> double"""
        return _hawkes_simulation.HawkesKernelPowerLaw_get_multiplier(self)

    def get_exponent(self) -> "double":
        r"""get_exponent(HawkesKernelPowerLaw self) -> double"""
        return _hawkes_simulation.HawkesKernelPowerLaw_get_exponent(self)

    def get_cutoff(self) -> "double":
        r"""get_cutoff(HawkesKernelPowerLaw self) -> double"""
        return _hawkes_simulation.HawkesKernelPowerLaw_get_cutoff(self)

    def __getstate__(self): return HawkesKernelPowerLawSerialize(self)
    def __setstate__(self, s):
        self.__init__(0.0,1.0,1.0)
        return HawkesKernelPowerLawDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernelPowerLaw

# Register HawkesKernelPowerLaw in _hawkes_simulation:
_hawkes_simulation.HawkesKernelPowerLaw_swigregister(HawkesKernelPowerLaw)


def HawkesKernelPowerLawDeserialize(ptr: 'HawkesKernelPowerLaw', hex: 'std::string const &') -> "void":
    r"""HawkesKernelPowerLawDeserialize(HawkesKernelPowerLaw ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernelPowerLawDeserialize(ptr, hex)

def HawkesKernelPowerLawSerialize(ptr: 'HawkesKernelPowerLaw') -> "std::string":
    r"""HawkesKernelPowerLawSerialize(HawkesKernelPowerLaw ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernelPowerLawSerialize(ptr)
class HawkesKernelTimeFunc(HawkesKernel):
    r"""Proxy of C++ HawkesKernelTimeFunc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HawkesKernelTimeFunc self, TimeFunction time_function) -> HawkesKernelTimeFunc
        __init__(HawkesKernelTimeFunc self, ArrayDouble const & t_axis, ArrayDouble const & y_axis) -> HawkesKernelTimeFunc
        __init__(HawkesKernelTimeFunc self) -> HawkesKernelTimeFunc
        """
        _hawkes_simulation.HawkesKernelTimeFunc_swiginit(self, _hawkes_simulation.new_HawkesKernelTimeFunc(*args))

    def get_time_function(self) -> "TimeFunction":
        r"""get_time_function(HawkesKernelTimeFunc self) -> TimeFunction"""
        return _hawkes_simulation.HawkesKernelTimeFunc_get_time_function(self)

    def __getstate__(self): return HawkesKernelTimeFuncSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return HawkesKernelTimeFuncDeserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernelTimeFunc

# Register HawkesKernelTimeFunc in _hawkes_simulation:
_hawkes_simulation.HawkesKernelTimeFunc_swigregister(HawkesKernelTimeFunc)


def HawkesKernelTimeFuncDeserialize(ptr: 'HawkesKernelTimeFunc', hex: 'std::string const &') -> "void":
    r"""HawkesKernelTimeFuncDeserialize(HawkesKernelTimeFunc ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernelTimeFuncDeserialize(ptr, hex)

def HawkesKernelTimeFuncSerialize(ptr: 'HawkesKernelTimeFunc') -> "std::string":
    r"""HawkesKernelTimeFuncSerialize(HawkesKernelTimeFunc ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernelTimeFuncSerialize(ptr)
class HawkesKernel0(HawkesKernel):
    r"""Proxy of C++ HawkesKernel0 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HawkesKernel0 self) -> HawkesKernel0"""
        _hawkes_simulation.HawkesKernel0_swiginit(self, _hawkes_simulation.new_HawkesKernel0())

    def __getstate__(self): return HawkesKernel0Serialize(self)
    def __setstate__(self, s):
        self.__init__()
        return HawkesKernel0Deserialize(self, s)

    __swig_destroy__ = _hawkes_simulation.delete_HawkesKernel0

# Register HawkesKernel0 in _hawkes_simulation:
_hawkes_simulation.HawkesKernel0_swigregister(HawkesKernel0)


def HawkesKernel0Deserialize(ptr: 'HawkesKernel0', hex: 'std::string const &') -> "void":
    r"""HawkesKernel0Deserialize(HawkesKernel0 ptr, std::string const & hex)"""
    return _hawkes_simulation.HawkesKernel0Deserialize(ptr, hex)

def HawkesKernel0Serialize(ptr: 'HawkesKernel0') -> "std::string":
    r"""HawkesKernel0Serialize(HawkesKernel0 ptr) -> std::string"""
    return _hawkes_simulation.HawkesKernel0Serialize(ptr)


