# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _hawkes_inference
else:
    import _hawkes_inference

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def to_hex(bytes: 'std::string const &') -> "std::string":
    r"""to_hex(std::string const & bytes) -> std::string"""
    return _hawkes_inference.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    r"""to_bytes(std::string const & hex) -> std::string"""
    return _hawkes_inference.to_bytes(hex)
import tick.base
import tick.array.build.array
class Model(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Model self) -> Model"""
        _hawkes_inference.Model_swiginit(self, _hawkes_inference.new_Model())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_inference.Model_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _hawkes_inference.Model_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(Model self) -> unsigned long"""
        return _hawkes_inference.Model_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(Model self) -> bool"""
        return _hawkes_inference.Model_is_sparse(self)
    __swig_destroy__ = _hawkes_inference.delete_Model

# Register Model in _hawkes_inference:
_hawkes_inference.Model_swigregister(Model)

class ModelDouble(object):
    r"""Proxy of C++ TModel< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelDouble self) -> ModelDouble"""
        _hawkes_inference.ModelDouble_swiginit(self, _hawkes_inference.new_ModelDouble())

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_inference.ModelDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        r"""loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _hawkes_inference.ModelDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelDouble self) -> unsigned long"""
        return _hawkes_inference.ModelDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelDouble self) -> bool"""
        return _hawkes_inference.ModelDouble_is_sparse(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelDouble

# Register ModelDouble in _hawkes_inference:
_hawkes_inference.ModelDouble_swigregister(ModelDouble)

class ModelFloat(object):
    r"""Proxy of C++ TModel< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelFloat self) -> ModelFloat"""
        _hawkes_inference.ModelFloat_swiginit(self, _hawkes_inference.new_ModelFloat())

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _hawkes_inference.ModelFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        r"""loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _hawkes_inference.ModelFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelFloat self) -> unsigned long"""
        return _hawkes_inference.ModelFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelFloat self) -> bool"""
        return _hawkes_inference.ModelFloat_is_sparse(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelFloat

# Register ModelFloat in _hawkes_inference:
_hawkes_inference.ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(object):
    r"""Proxy of C++ TModel< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicDouble self) -> ModelAtomicDouble"""
        _hawkes_inference.ModelAtomicDouble_swiginit(self, _hawkes_inference.new_ModelAtomicDouble())

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        r"""grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_inference.ModelAtomicDouble_grad(self, coeffs, out)

    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        r"""loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _hawkes_inference.ModelAtomicDouble_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _hawkes_inference.ModelAtomicDouble_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicDouble self) -> bool"""
        return _hawkes_inference.ModelAtomicDouble_is_sparse(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelAtomicDouble

# Register ModelAtomicDouble in _hawkes_inference:
_hawkes_inference.ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(object):
    r"""Proxy of C++ TModel< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelAtomicFloat self) -> ModelAtomicFloat"""
        _hawkes_inference.ModelAtomicFloat_swiginit(self, _hawkes_inference.new_ModelAtomicFloat())

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        r"""grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _hawkes_inference.ModelAtomicFloat_grad(self, coeffs, out)

    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        r"""loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _hawkes_inference.ModelAtomicFloat_loss(self, coeffs)

    def get_epoch_size(self) -> "unsigned long":
        r"""get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _hawkes_inference.ModelAtomicFloat_get_epoch_size(self)

    def is_sparse(self) -> "bool":
        r"""is_sparse(ModelAtomicFloat self) -> bool"""
        return _hawkes_inference.ModelAtomicFloat_is_sparse(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelAtomicFloat

# Register ModelAtomicFloat in _hawkes_inference:
_hawkes_inference.ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    r"""Proxy of C++ TModelLabelsFeatures< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        _hawkes_inference.ModelLabelsFeaturesDouble_swiginit(self, _hawkes_inference.new_ModelLabelsFeaturesDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesDouble_get_n_features(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLabelsFeaturesDouble

# Register ModelLabelsFeaturesDouble in _hawkes_inference:
_hawkes_inference.ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        _hawkes_inference.ModelLabelsFeaturesFloat_swiginit(self, _hawkes_inference.new_ModelLabelsFeaturesFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesFloat_get_n_features(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLabelsFeaturesFloat

# Register ModelLabelsFeaturesFloat in _hawkes_inference:
_hawkes_inference.ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLabelsFeatures< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicDouble self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        _hawkes_inference.ModelLabelsFeaturesAtomicDouble_swiginit(self, _hawkes_inference.new_ModelLabelsFeaturesAtomicDouble(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesAtomicDouble_get_n_features(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLabelsFeaturesAtomicDouble

# Register ModelLabelsFeaturesAtomicDouble in _hawkes_inference:
_hawkes_inference.ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLabelsFeatures< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        r"""__init__(ModelLabelsFeaturesAtomicFloat self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        _hawkes_inference.ModelLabelsFeaturesAtomicFloat_swiginit(self, _hawkes_inference.new_ModelLabelsFeaturesAtomicFloat(features, labels))

    def get_n_samples(self) -> "unsigned long":
        r"""get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)

    def get_n_features(self) -> "unsigned long":
        r"""get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _hawkes_inference.ModelLabelsFeaturesAtomicFloat_get_n_features(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLabelsFeaturesAtomicFloat

# Register ModelLabelsFeaturesAtomicFloat in _hawkes_inference:
_hawkes_inference.ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitz self) -> ModelLipschitz"""
        _hawkes_inference.ModelLipschitz_swiginit(self, _hawkes_inference.new_ModelLipschitz())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitz self) -> double"""
        return _hawkes_inference.ModelLipschitz_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitz self) -> double"""
        return _hawkes_inference.ModelLipschitz_get_lip_mean(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitz

# Register ModelLipschitz in _hawkes_inference:
_hawkes_inference.ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    r"""Proxy of C++ TModelLipschitz< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzDouble self) -> ModelLipschitzDouble"""
        _hawkes_inference.ModelLipschitzDouble_swiginit(self, _hawkes_inference.new_ModelLipschitzDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzDouble self) -> double"""
        return _hawkes_inference.ModelLipschitzDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _hawkes_inference.ModelLipschitzDouble_get_lip_mean(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitzDouble

# Register ModelLipschitzDouble in _hawkes_inference:
_hawkes_inference.ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    r"""Proxy of C++ TModelLipschitz< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzFloat self) -> ModelLipschitzFloat"""
        _hawkes_inference.ModelLipschitzFloat_swiginit(self, _hawkes_inference.new_ModelLipschitzFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzFloat self) -> float"""
        return _hawkes_inference.ModelLipschitzFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _hawkes_inference.ModelLipschitzFloat_get_lip_mean(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitzFloat

# Register ModelLipschitzFloat in _hawkes_inference:
_hawkes_inference.ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    r"""Proxy of C++ TModelLipschitz< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicDouble self) -> ModelLipschitzAtomicDouble"""
        _hawkes_inference.ModelLipschitzAtomicDouble_swiginit(self, _hawkes_inference.new_ModelLipschitzAtomicDouble())

    def get_lip_max(self) -> "double":
        r"""get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _hawkes_inference.ModelLipschitzAtomicDouble_get_lip_max(self)

    def get_lip_mean(self) -> "double":
        r"""get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _hawkes_inference.ModelLipschitzAtomicDouble_get_lip_mean(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitzAtomicDouble

# Register ModelLipschitzAtomicDouble in _hawkes_inference:
_hawkes_inference.ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    r"""Proxy of C++ TModelLipschitz< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ModelLipschitzAtomicFloat self) -> ModelLipschitzAtomicFloat"""
        _hawkes_inference.ModelLipschitzAtomicFloat_swiginit(self, _hawkes_inference.new_ModelLipschitzAtomicFloat())

    def get_lip_max(self) -> "float":
        r"""get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _hawkes_inference.ModelLipschitzAtomicFloat_get_lip_max(self)

    def get_lip_mean(self) -> "float":
        r"""get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _hawkes_inference.ModelLipschitzAtomicFloat_get_lip_mean(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelLipschitzAtomicFloat

# Register ModelLipschitzAtomicFloat in _hawkes_inference:
_hawkes_inference.ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble"""
        _hawkes_inference.ModelGeneralizedLinearDouble_swiginit(self, _hawkes_inference.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _hawkes_inference.ModelGeneralizedLinearDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _hawkes_inference.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _hawkes_inference.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _hawkes_inference.delete_ModelGeneralizedLinearDouble

# Register ModelGeneralizedLinearDouble in _hawkes_inference:
_hawkes_inference.ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat"""
        _hawkes_inference.ModelGeneralizedLinearFloat_swiginit(self, _hawkes_inference.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _hawkes_inference.ModelGeneralizedLinearFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _hawkes_inference.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _hawkes_inference.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _hawkes_inference.delete_ModelGeneralizedLinearFloat

# Register ModelGeneralizedLinearFloat in _hawkes_inference:
_hawkes_inference.ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    r"""Proxy of C++ TModelGeneralizedLinear< double,std::atomic< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicDouble self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble"""
        _hawkes_inference.ModelGeneralizedLinearAtomicDouble_swiginit(self, _hawkes_inference.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _hawkes_inference.delete_ModelGeneralizedLinearAtomicDouble

# Register ModelGeneralizedLinearAtomicDouble in _hawkes_inference:
_hawkes_inference.ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    r"""Proxy of C++ TModelGeneralizedLinear< float,std::atomic< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        r"""__init__(ModelGeneralizedLinearAtomicFloat self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat"""
        _hawkes_inference.ModelGeneralizedLinearAtomicFloat_swiginit(self, _hawkes_inference.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads))

    def get_n_coeffs(self) -> "unsigned long":
        r"""get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)

    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        r"""set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)

    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        r"""sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _hawkes_inference.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)
    __swig_destroy__ = _hawkes_inference.delete_ModelGeneralizedLinearAtomicFloat

# Register ModelGeneralizedLinearAtomicFloat in _hawkes_inference:
_hawkes_inference.ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

class ModelHawkes(Model):
    r"""Proxy of C++ ModelHawkes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        r"""__init__(ModelHawkes self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkes"""
        _hawkes_inference.ModelHawkes_swiginit(self, _hawkes_inference.new_ModelHawkes(max_n_threads, optimization_level))

    def set_n_threads(self, max_n_threads: 'int const') -> "void":
        r"""set_n_threads(ModelHawkes self, int const max_n_threads)"""
        return _hawkes_inference.ModelHawkes_set_n_threads(self, max_n_threads)

    def get_n_nodes(self) -> "ulong":
        r"""get_n_nodes(ModelHawkes self) -> ulong"""
        return _hawkes_inference.ModelHawkes_get_n_nodes(self)

    def get_n_total_jumps(self) -> "ulong":
        r"""get_n_total_jumps(ModelHawkes self) -> ulong"""
        return _hawkes_inference.ModelHawkes_get_n_total_jumps(self)

    def get_n_jumps_per_node(self) -> "SArrayULongPtr":
        r"""get_n_jumps_per_node(ModelHawkes self) -> SArrayULongPtr"""
        return _hawkes_inference.ModelHawkes_get_n_jumps_per_node(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelHawkes

# Register ModelHawkes in _hawkes_inference:
_hawkes_inference.ModelHawkes_swigregister(ModelHawkes)

class ModelHawkesList(ModelHawkes):
    r"""Proxy of C++ ModelHawkesList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        r"""__init__(ModelHawkesList self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesList"""
        _hawkes_inference.ModelHawkesList_swiginit(self, _hawkes_inference.new_ModelHawkesList(max_n_threads, optimization_level))

    def set_data(self, timestamps_list: 'SArrayDoublePtrList2D const &', end_time: 'VArrayDoublePtr const') -> "void":
        r"""set_data(ModelHawkesList self, SArrayDoublePtrList2D const & timestamps_list, VArrayDoublePtr const end_time)"""
        return _hawkes_inference.ModelHawkesList_set_data(self, timestamps_list, end_time)

    def get_end_times(self) -> "VArrayDoublePtr":
        r"""get_end_times(ModelHawkesList self) -> VArrayDoublePtr"""
        return _hawkes_inference.ModelHawkesList_get_end_times(self)

    def get_n_coeffs(self) -> "ulong":
        r"""get_n_coeffs(ModelHawkesList self) -> ulong"""
        return _hawkes_inference.ModelHawkesList_get_n_coeffs(self)

    def get_n_threads(self) -> "ulong":
        r"""get_n_threads(ModelHawkesList self) -> ulong"""
        return _hawkes_inference.ModelHawkesList_get_n_threads(self)

    def get_n_jumps_per_realization(self) -> "SArrayULongPtr":
        r"""get_n_jumps_per_realization(ModelHawkesList self) -> SArrayULongPtr"""
        return _hawkes_inference.ModelHawkesList_get_n_jumps_per_realization(self)

    def get_timestamps_list(self) -> "SArrayDoublePtrList2D":
        r"""get_timestamps_list(ModelHawkesList self) -> SArrayDoublePtrList2D"""
        return _hawkes_inference.ModelHawkesList_get_timestamps_list(self)

    def set_n_threads(self, max_n_threads: 'int const') -> "void":
        r"""set_n_threads(ModelHawkesList self, int const max_n_threads)"""
        return _hawkes_inference.ModelHawkesList_set_n_threads(self, max_n_threads)
    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesList

# Register ModelHawkesList in _hawkes_inference:
_hawkes_inference.ModelHawkesList_swigregister(ModelHawkesList)

class ModelHawkesLeastSq(ModelHawkesList):
    r"""Proxy of C++ ModelHawkesLeastSq class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        r"""__init__(ModelHawkesLeastSq self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesLeastSq"""
        _hawkes_inference.ModelHawkesLeastSq_swiginit(self, _hawkes_inference.new_ModelHawkesLeastSq(max_n_threads, optimization_level))

    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        r"""incremental_set_data(ModelHawkesLeastSq self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _hawkes_inference.ModelHawkesLeastSq_incremental_set_data(self, timestamps, end_time)

    def compute_weights(self) -> "void":
        r"""compute_weights(ModelHawkesLeastSq self)"""
        return _hawkes_inference.ModelHawkesLeastSq_compute_weights(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesLeastSq

# Register ModelHawkesLeastSq in _hawkes_inference:
_hawkes_inference.ModelHawkesLeastSq_swigregister(ModelHawkesLeastSq)

class ModelHawkesLogLik(ModelHawkesList):
    r"""Proxy of C++ ModelHawkesLogLik class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1):
        r"""__init__(ModelHawkesLogLik self, int const max_n_threads=1) -> ModelHawkesLogLik"""
        _hawkes_inference.ModelHawkesLogLik_swiginit(self, _hawkes_inference.new_ModelHawkesLogLik(max_n_threads))

    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        r"""loss_and_grad(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _hawkes_inference.ModelHawkesLogLik_loss_and_grad(self, coeffs, out)

    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        r"""hessian_norm(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _hawkes_inference.ModelHawkesLogLik_hessian_norm(self, coeffs, vector)

    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        r"""hessian(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_inference.ModelHawkesLogLik_hessian(self, coeffs, out)

    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        r"""incremental_set_data(ModelHawkesLogLik self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _hawkes_inference.ModelHawkesLogLik_incremental_set_data(self, timestamps, end_time)

    def compute_weights(self) -> "void":
        r"""compute_weights(ModelHawkesLogLik self)"""
        return _hawkes_inference.ModelHawkesLogLik_compute_weights(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesLogLik

# Register ModelHawkesLogLik in _hawkes_inference:
_hawkes_inference.ModelHawkesLogLik_swigregister(ModelHawkesLogLik)

class ModelHawkesExpKernLeastSq(ModelHawkesLeastSq):
    r"""Proxy of C++ ModelHawkesExpKernLeastSq class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelHawkesExpKernLeastSq self) -> ModelHawkesExpKernLeastSq
        __init__(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesExpKernLeastSq
        """
        _hawkes_inference.ModelHawkesExpKernLeastSq_swiginit(self, _hawkes_inference.new_ModelHawkesExpKernLeastSq(*args))

    def hessian(self, out: 'ArrayDouble &') -> "void":
        r"""hessian(ModelHawkesExpKernLeastSq self, ArrayDouble & out)"""
        return _hawkes_inference.ModelHawkesExpKernLeastSq_hessian(self, out)

    def set_decays(self, decays: 'SArrayDouble2dPtr const') -> "void":
        r"""set_decays(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays)"""
        return _hawkes_inference.ModelHawkesExpKernLeastSq_set_decays(self, decays)

    def __getstate__(self): return ModelHawkesExpKernLeastSqSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesExpKernLeastSqDeserialize(self, s)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesExpKernLeastSq

# Register ModelHawkesExpKernLeastSq in _hawkes_inference:
_hawkes_inference.ModelHawkesExpKernLeastSq_swigregister(ModelHawkesExpKernLeastSq)


def ModelHawkesExpKernLeastSqDeserialize(ptr: 'ModelHawkesExpKernLeastSq', hex: 'std::string const &') -> "void":
    r"""ModelHawkesExpKernLeastSqDeserialize(ModelHawkesExpKernLeastSq ptr, std::string const & hex)"""
    return _hawkes_inference.ModelHawkesExpKernLeastSqDeserialize(ptr, hex)

def ModelHawkesExpKernLeastSqSerialize(ptr: 'ModelHawkesExpKernLeastSq') -> "std::string":
    r"""ModelHawkesExpKernLeastSqSerialize(ModelHawkesExpKernLeastSq ptr) -> std::string"""
    return _hawkes_inference.ModelHawkesExpKernLeastSqSerialize(ptr)
class ModelHawkesSumExpKernLeastSq(ModelHawkesLeastSq):
    r"""Proxy of C++ ModelHawkesSumExpKernLeastSq class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelHawkesSumExpKernLeastSq self) -> ModelHawkesSumExpKernLeastSq
        __init__(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesSumExpKernLeastSq
        """
        _hawkes_inference.ModelHawkesSumExpKernLeastSq_swiginit(self, _hawkes_inference.new_ModelHawkesSumExpKernLeastSq(*args))

    def set_decays(self, decays: 'ArrayDouble const &') -> "void":
        r"""set_decays(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays)"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_set_decays(self, decays)

    def get_n_decays(self) -> "ulong":
        r"""get_n_decays(ModelHawkesSumExpKernLeastSq self) -> ulong"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_get_n_decays(self)

    def get_n_baselines(self) -> "ulong":
        r"""get_n_baselines(ModelHawkesSumExpKernLeastSq self) -> ulong"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_get_n_baselines(self)

    def get_period_length(self) -> "double":
        r"""get_period_length(ModelHawkesSumExpKernLeastSq self) -> double"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_get_period_length(self)

    def set_n_baselines(self, n_baselines: 'ulong') -> "void":
        r"""set_n_baselines(ModelHawkesSumExpKernLeastSq self, ulong n_baselines)"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_set_n_baselines(self, n_baselines)

    def set_period_length(self, period_length: 'double') -> "void":
        r"""set_period_length(ModelHawkesSumExpKernLeastSq self, double period_length)"""
        return _hawkes_inference.ModelHawkesSumExpKernLeastSq_set_period_length(self, period_length)

    def __getstate__(self): return ModelHawkesSumExpKernLeastSqSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesSumExpKernLeastSqDeserialize(self, s)

    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesSumExpKernLeastSq

# Register ModelHawkesSumExpKernLeastSq in _hawkes_inference:
_hawkes_inference.ModelHawkesSumExpKernLeastSq_swigregister(ModelHawkesSumExpKernLeastSq)


def ModelHawkesSumExpKernLeastSqDeserialize(ptr: 'ModelHawkesSumExpKernLeastSq', hex: 'std::string const &') -> "void":
    r"""ModelHawkesSumExpKernLeastSqDeserialize(ModelHawkesSumExpKernLeastSq ptr, std::string const & hex)"""
    return _hawkes_inference.ModelHawkesSumExpKernLeastSqDeserialize(ptr, hex)

def ModelHawkesSumExpKernLeastSqSerialize(ptr: 'ModelHawkesSumExpKernLeastSq') -> "std::string":
    r"""ModelHawkesSumExpKernLeastSqSerialize(ModelHawkesSumExpKernLeastSq ptr) -> std::string"""
    return _hawkes_inference.ModelHawkesSumExpKernLeastSqSerialize(ptr)
class ModelHawkesExpKernLogLik(ModelHawkesLogLik):
    r"""Proxy of C++ ModelHawkesExpKernLogLik class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', max_n_threads: 'int const'=1):
        r"""__init__(ModelHawkesExpKernLogLik self, double const decay, int const max_n_threads=1) -> ModelHawkesExpKernLogLik"""
        _hawkes_inference.ModelHawkesExpKernLogLik_swiginit(self, _hawkes_inference.new_ModelHawkesExpKernLogLik(decay, max_n_threads))

    def set_decay(self, decay: 'double const') -> "void":
        r"""set_decay(ModelHawkesExpKernLogLik self, double const decay)"""
        return _hawkes_inference.ModelHawkesExpKernLogLik_set_decay(self, decay)
    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesExpKernLogLik

# Register ModelHawkesExpKernLogLik in _hawkes_inference:
_hawkes_inference.ModelHawkesExpKernLogLik_swigregister(ModelHawkesExpKernLogLik)

class ModelHawkesSumExpKernLogLik(ModelHawkesLogLik):
    r"""Proxy of C++ ModelHawkesSumExpKernLogLik class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', max_n_threads: 'int const'=1):
        r"""__init__(ModelHawkesSumExpKernLogLik self, ArrayDouble const & decays, int const max_n_threads=1) -> ModelHawkesSumExpKernLogLik"""
        _hawkes_inference.ModelHawkesSumExpKernLogLik_swiginit(self, _hawkes_inference.new_ModelHawkesSumExpKernLogLik(decays, max_n_threads))

    def set_decays(self, decays: 'ArrayDouble &') -> "void":
        r"""set_decays(ModelHawkesSumExpKernLogLik self, ArrayDouble & decays)"""
        return _hawkes_inference.ModelHawkesSumExpKernLogLik_set_decays(self, decays)

    def get_decays(self) -> "SArrayDoublePtr":
        r"""get_decays(ModelHawkesSumExpKernLogLik self) -> SArrayDoublePtr"""
        return _hawkes_inference.ModelHawkesSumExpKernLogLik_get_decays(self)
    __swig_destroy__ = _hawkes_inference.delete_ModelHawkesSumExpKernLogLik

# Register ModelHawkesSumExpKernLogLik in _hawkes_inference:
_hawkes_inference.ModelHawkesSumExpKernLogLik_swigregister(ModelHawkesSumExpKernLogLik)


def PointProcessCondLaw(y_time: 'ArrayDouble &', z_time: 'ArrayDouble &', z_mark: 'ArrayDouble &', lags: 'ArrayDouble &', zmin: 'double', zmax: 'double', y_T: 'double', y_lambda: 'double', res_X: 'ArrayDouble &', res_Y: 'ArrayDouble &') -> "void":
    r"""PointProcessCondLaw(ArrayDouble & y_time, ArrayDouble & z_time, ArrayDouble & z_mark, ArrayDouble & lags, double zmin, double zmax, double y_T, double y_lambda, ArrayDouble & res_X, ArrayDouble & res_Y)"""
    return _hawkes_inference.PointProcessCondLaw(y_time, z_time, z_mark, lags, zmin, zmax, y_T, y_lambda, res_X, res_Y)
class HawkesEM(ModelHawkesList):
    r"""Proxy of C++ HawkesEM class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HawkesEM self, double const kernel_support, ulong const kernel_size, int const max_n_threads=1) -> HawkesEM
        __init__(HawkesEM self, SArrayDoublePtr const kernel_discretization, int const max_n_threads=1) -> HawkesEM
        """
        _hawkes_inference.HawkesEM_swiginit(self, _hawkes_inference.new_HawkesEM(*args))

    def allocate_weights(self) -> "void":
        r"""allocate_weights(HawkesEM self)"""
        return _hawkes_inference.HawkesEM_allocate_weights(self)

    def solve(self, mu: 'ArrayDouble &', kernels: 'ArrayDouble2d &') -> "void":
        r"""solve(HawkesEM self, ArrayDouble & mu, ArrayDouble2d & kernels)"""
        return _hawkes_inference.HawkesEM_solve(self, mu, kernels)

    def get_kernel_norms(self, kernels: 'ArrayDouble2d &') -> "SArrayDouble2dPtr":
        r"""get_kernel_norms(HawkesEM self, ArrayDouble2d & kernels) -> SArrayDouble2dPtr"""
        return _hawkes_inference.HawkesEM_get_kernel_norms(self, kernels)

    def loglikelihood(self, mu: 'ArrayDouble &', kernels: 'ArrayDouble2d &') -> "double":
        r"""loglikelihood(HawkesEM self, ArrayDouble & mu, ArrayDouble2d & kernels) -> double"""
        return _hawkes_inference.HawkesEM_loglikelihood(self, mu, kernels)

    def get_kernel_support(self) -> "double":
        r"""get_kernel_support(HawkesEM self) -> double"""
        return _hawkes_inference.HawkesEM_get_kernel_support(self)

    def get_kernel_size(self) -> "ulong":
        r"""get_kernel_size(HawkesEM self) -> ulong"""
        return _hawkes_inference.HawkesEM_get_kernel_size(self)

    def get_kernel_fixed_dt(self) -> "double":
        r"""get_kernel_fixed_dt(HawkesEM self) -> double"""
        return _hawkes_inference.HawkesEM_get_kernel_fixed_dt(self)

    def get_kernel_discretization(self) -> "SArrayDoublePtr":
        r"""get_kernel_discretization(HawkesEM self) -> SArrayDoublePtr"""
        return _hawkes_inference.HawkesEM_get_kernel_discretization(self)

    def set_kernel_support(self, kernel_support: 'double const') -> "void":
        r"""set_kernel_support(HawkesEM self, double const kernel_support)"""
        return _hawkes_inference.HawkesEM_set_kernel_support(self, kernel_support)

    def set_kernel_size(self, kernel_size: 'ulong const') -> "void":
        r"""set_kernel_size(HawkesEM self, ulong const kernel_size)"""
        return _hawkes_inference.HawkesEM_set_kernel_size(self, kernel_size)

    def set_kernel_dt(self, kernel_dt: 'double const') -> "void":
        r"""set_kernel_dt(HawkesEM self, double const kernel_dt)"""
        return _hawkes_inference.HawkesEM_set_kernel_dt(self, kernel_dt)

    def set_kernel_discretization(self, kernel_discretization: 'SArrayDoublePtr const') -> "void":
        r"""set_kernel_discretization(HawkesEM self, SArrayDoublePtr const kernel_discretization)"""
        return _hawkes_inference.HawkesEM_set_kernel_discretization(self, kernel_discretization)
    __swig_destroy__ = _hawkes_inference.delete_HawkesEM

# Register HawkesEM in _hawkes_inference:
_hawkes_inference.HawkesEM_swigregister(HawkesEM)

class HawkesADM4(ModelHawkesList):
    r"""Proxy of C++ HawkesADM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', rho: 'double const', max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        r"""__init__(HawkesADM4 self, double const decay, double const rho, int const max_n_threads=1, unsigned int const optimization_level=0) -> HawkesADM4"""
        _hawkes_inference.HawkesADM4_swiginit(self, _hawkes_inference.new_HawkesADM4(decay, rho, max_n_threads, optimization_level))

    def solve(self, mu: 'ArrayDouble &', auv: 'ArrayDouble2d &', z1uv: 'ArrayDouble2d &', z2uv: 'ArrayDouble2d &', u1uv: 'ArrayDouble2d &', u2uv: 'ArrayDouble2d &') -> "void":
        r"""solve(HawkesADM4 self, ArrayDouble & mu, ArrayDouble2d & auv, ArrayDouble2d & z1uv, ArrayDouble2d & z2uv, ArrayDouble2d & u1uv, ArrayDouble2d & u2uv)"""
        return _hawkes_inference.HawkesADM4_solve(self, mu, auv, z1uv, z2uv, u1uv, u2uv)

    def compute_weights(self) -> "void":
        r"""compute_weights(HawkesADM4 self)"""
        return _hawkes_inference.HawkesADM4_compute_weights(self)

    def get_decay(self) -> "double":
        r"""get_decay(HawkesADM4 self) -> double"""
        return _hawkes_inference.HawkesADM4_get_decay(self)

    def set_decay(self, decay: 'double const') -> "void":
        r"""set_decay(HawkesADM4 self, double const decay)"""
        return _hawkes_inference.HawkesADM4_set_decay(self, decay)

    def get_rho(self) -> "double":
        r"""get_rho(HawkesADM4 self) -> double"""
        return _hawkes_inference.HawkesADM4_get_rho(self)

    def set_rho(self, rho: 'double const') -> "void":
        r"""set_rho(HawkesADM4 self, double const rho)"""
        return _hawkes_inference.HawkesADM4_set_rho(self, rho)
    __swig_destroy__ = _hawkes_inference.delete_HawkesADM4

# Register HawkesADM4 in _hawkes_inference:
_hawkes_inference.HawkesADM4_swigregister(HawkesADM4)

class HawkesBasisKernels(ModelHawkesList):
    r"""Proxy of C++ HawkesBasisKernels class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, D: 'ulong const', kernel_dt: 'double const', kernel_tmax: 'double const', alpha: 'double const', max_n_threads: 'int const'=1):
        r"""__init__(HawkesBasisKernels self, ulong const D, double const kernel_dt, double const kernel_tmax, double const alpha, int const max_n_threads=1) -> HawkesBasisKernels"""
        _hawkes_inference.HawkesBasisKernels_swiginit(self, _hawkes_inference.new_HawkesBasisKernels(D, kernel_dt, kernel_tmax, alpha, max_n_threads))

    def solve(self, mu: 'ArrayDouble &', gdm: 'ArrayDouble2d &', auvd: 'ArrayDouble2d &', max_iter_gdm: 'ulong', max_tol_gdm: 'double') -> "double":
        r"""solve(HawkesBasisKernels self, ArrayDouble & mu, ArrayDouble2d & gdm, ArrayDouble2d & auvd, ulong max_iter_gdm, double max_tol_gdm) -> double"""
        return _hawkes_inference.HawkesBasisKernels_solve(self, mu, gdm, auvd, max_iter_gdm, max_tol_gdm)

    def get_kernel_support(self) -> "double":
        r"""get_kernel_support(HawkesBasisKernels self) -> double"""
        return _hawkes_inference.HawkesBasisKernels_get_kernel_support(self)

    def get_kernel_size(self) -> "ulong":
        r"""get_kernel_size(HawkesBasisKernels self) -> ulong"""
        return _hawkes_inference.HawkesBasisKernels_get_kernel_size(self)

    def get_kernel_dt(self) -> "double":
        r"""get_kernel_dt(HawkesBasisKernels self) -> double"""
        return _hawkes_inference.HawkesBasisKernels_get_kernel_dt(self)

    def get_n_basis(self) -> "ulong":
        r"""get_n_basis(HawkesBasisKernels self) -> ulong"""
        return _hawkes_inference.HawkesBasisKernels_get_n_basis(self)

    def get_alpha(self) -> "double":
        r"""get_alpha(HawkesBasisKernels self) -> double"""
        return _hawkes_inference.HawkesBasisKernels_get_alpha(self)

    def get_kernel_discretization(self) -> "SArrayDoublePtr":
        r"""get_kernel_discretization(HawkesBasisKernels self) -> SArrayDoublePtr"""
        return _hawkes_inference.HawkesBasisKernels_get_kernel_discretization(self)

    def set_kernel_support(self, kernel_support: 'double const') -> "void":
        r"""set_kernel_support(HawkesBasisKernels self, double const kernel_support)"""
        return _hawkes_inference.HawkesBasisKernels_set_kernel_support(self, kernel_support)

    def set_kernel_size(self, kernel_size: 'ulong const') -> "void":
        r"""set_kernel_size(HawkesBasisKernels self, ulong const kernel_size)"""
        return _hawkes_inference.HawkesBasisKernels_set_kernel_size(self, kernel_size)

    def set_kernel_dt(self, kernel_dt: 'double const') -> "void":
        r"""set_kernel_dt(HawkesBasisKernels self, double const kernel_dt)"""
        return _hawkes_inference.HawkesBasisKernels_set_kernel_dt(self, kernel_dt)

    def set_n_basis(self, n_basis: 'ulong const') -> "void":
        r"""set_n_basis(HawkesBasisKernels self, ulong const n_basis)"""
        return _hawkes_inference.HawkesBasisKernels_set_n_basis(self, n_basis)

    def set_alpha(self, alpha: 'double const') -> "void":
        r"""set_alpha(HawkesBasisKernels self, double const alpha)"""
        return _hawkes_inference.HawkesBasisKernels_set_alpha(self, alpha)
    __swig_destroy__ = _hawkes_inference.delete_HawkesBasisKernels

# Register HawkesBasisKernels in _hawkes_inference:
_hawkes_inference.HawkesBasisKernels_swigregister(HawkesBasisKernels)

class HawkesSumGaussians(ModelHawkesList):
    r"""Proxy of C++ HawkesSumGaussians class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, n_gaussians: 'ulong const', max_mean_gaussian: 'double const', step_size: 'double const', strength_lasso: 'double const', strength_grouplasso: 'double const', em_max_iter: 'ulong const', max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        r"""__init__(HawkesSumGaussians self, ulong const n_gaussians, double const max_mean_gaussian, double const step_size, double const strength_lasso, double const strength_grouplasso, ulong const em_max_iter, int const max_n_threads=1, unsigned int const optimization_level=0) -> HawkesSumGaussians"""
        _hawkes_inference.HawkesSumGaussians_swiginit(self, _hawkes_inference.new_HawkesSumGaussians(n_gaussians, max_mean_gaussian, step_size, strength_lasso, strength_grouplasso, em_max_iter, max_n_threads, optimization_level))

    def compute_weights(self) -> "void":
        r"""compute_weights(HawkesSumGaussians self)"""
        return _hawkes_inference.HawkesSumGaussians_compute_weights(self)

    def solve(self, mu: 'ArrayDouble &', amplitudes: 'ArrayDouble2d &') -> "void":
        r"""solve(HawkesSumGaussians self, ArrayDouble & mu, ArrayDouble2d & amplitudes)"""
        return _hawkes_inference.HawkesSumGaussians_solve(self, mu, amplitudes)

    def get_n_gaussians(self) -> "ulong":
        r"""get_n_gaussians(HawkesSumGaussians self) -> ulong"""
        return _hawkes_inference.HawkesSumGaussians_get_n_gaussians(self)

    def set_n_gaussians(self, n_gaussians: 'ulong const') -> "void":
        r"""set_n_gaussians(HawkesSumGaussians self, ulong const n_gaussians)"""
        return _hawkes_inference.HawkesSumGaussians_set_n_gaussians(self, n_gaussians)

    def get_em_max_iter(self) -> "ulong":
        r"""get_em_max_iter(HawkesSumGaussians self) -> ulong"""
        return _hawkes_inference.HawkesSumGaussians_get_em_max_iter(self)

    def set_em_max_iter(self, em_max_iter: 'ulong const') -> "void":
        r"""set_em_max_iter(HawkesSumGaussians self, ulong const em_max_iter)"""
        return _hawkes_inference.HawkesSumGaussians_set_em_max_iter(self, em_max_iter)

    def get_max_mean_gaussian(self) -> "double":
        r"""get_max_mean_gaussian(HawkesSumGaussians self) -> double"""
        return _hawkes_inference.HawkesSumGaussians_get_max_mean_gaussian(self)

    def set_max_mean_gaussian(self, max_mean_gaussian: 'double const') -> "void":
        r"""set_max_mean_gaussian(HawkesSumGaussians self, double const max_mean_gaussian)"""
        return _hawkes_inference.HawkesSumGaussians_set_max_mean_gaussian(self, max_mean_gaussian)

    def get_step_size(self) -> "double":
        r"""get_step_size(HawkesSumGaussians self) -> double"""
        return _hawkes_inference.HawkesSumGaussians_get_step_size(self)

    def set_step_size(self, step_size: 'double const') -> "void":
        r"""set_step_size(HawkesSumGaussians self, double const step_size)"""
        return _hawkes_inference.HawkesSumGaussians_set_step_size(self, step_size)

    def get_strength_lasso(self) -> "double":
        r"""get_strength_lasso(HawkesSumGaussians self) -> double"""
        return _hawkes_inference.HawkesSumGaussians_get_strength_lasso(self)

    def set_strength_lasso(self, strength_lasso: 'double const') -> "void":
        r"""set_strength_lasso(HawkesSumGaussians self, double const strength_lasso)"""
        return _hawkes_inference.HawkesSumGaussians_set_strength_lasso(self, strength_lasso)

    def get_strength_grouplasso(self) -> "double":
        r"""get_strength_grouplasso(HawkesSumGaussians self) -> double"""
        return _hawkes_inference.HawkesSumGaussians_get_strength_grouplasso(self)

    def set_strength_grouplasso(self, strength_grouplasso: 'double const') -> "void":
        r"""set_strength_grouplasso(HawkesSumGaussians self, double const strength_grouplasso)"""
        return _hawkes_inference.HawkesSumGaussians_set_strength_grouplasso(self, strength_grouplasso)
    __swig_destroy__ = _hawkes_inference.delete_HawkesSumGaussians

# Register HawkesSumGaussians in _hawkes_inference:
_hawkes_inference.HawkesSumGaussians_swigregister(HawkesSumGaussians)

class HawkesCumulant(ModelHawkesList):
    r"""Proxy of C++ HawkesCumulant class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, integration_support: 'double'):
        r"""__init__(HawkesCumulant self, double integration_support) -> HawkesCumulant"""
        _hawkes_inference.HawkesCumulant_swiginit(self, _hawkes_inference.new_HawkesCumulant(integration_support))

    def compute_A_and_I_ij(self, r: 'ulong', i: 'ulong', j: 'ulong', mean_intensity_j: 'double') -> "SArrayDoublePtr":
        r"""compute_A_and_I_ij(HawkesCumulant self, ulong r, ulong i, ulong j, double mean_intensity_j) -> SArrayDoublePtr"""
        return _hawkes_inference.HawkesCumulant_compute_A_and_I_ij(self, r, i, j, mean_intensity_j)

    def compute_E_ijk(self, r: 'ulong', i: 'ulong', j: 'ulong', k: 'ulong', mean_intensity_i: 'double', mean_intensity_j: 'double', J_ij: 'double') -> "double":
        r"""compute_E_ijk(HawkesCumulant self, ulong r, ulong i, ulong j, ulong k, double mean_intensity_i, double mean_intensity_j, double J_ij) -> double"""
        return _hawkes_inference.HawkesCumulant_compute_E_ijk(self, r, i, j, k, mean_intensity_i, mean_intensity_j, J_ij)

    def get_integration_support(self) -> "double":
        r"""get_integration_support(HawkesCumulant self) -> double"""
        return _hawkes_inference.HawkesCumulant_get_integration_support(self)

    def set_integration_support(self, integration_support: 'double const') -> "void":
        r"""set_integration_support(HawkesCumulant self, double const integration_support)"""
        return _hawkes_inference.HawkesCumulant_set_integration_support(self, integration_support)

    def get_are_cumulants_ready(self) -> "bool":
        r"""get_are_cumulants_ready(HawkesCumulant self) -> bool"""
        return _hawkes_inference.HawkesCumulant_get_are_cumulants_ready(self)

    def set_are_cumulants_ready(self, recompute_cumulants: 'bool const') -> "void":
        r"""set_are_cumulants_ready(HawkesCumulant self, bool const recompute_cumulants)"""
        return _hawkes_inference.HawkesCumulant_set_are_cumulants_ready(self, recompute_cumulants)
    __swig_destroy__ = _hawkes_inference.delete_HawkesCumulant

# Register HawkesCumulant in _hawkes_inference:
_hawkes_inference.HawkesCumulant_swigregister(HawkesCumulant)



