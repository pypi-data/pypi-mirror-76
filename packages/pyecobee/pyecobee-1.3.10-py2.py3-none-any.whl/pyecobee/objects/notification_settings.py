"""
This module is home to the NotificationSettings class
"""
from pyecobee.ecobee_object import EcobeeObject


class NotificationSettings(EcobeeObject):
    """
    This class has been auto generated by scraping
    https://www.ecobee.com/home/developer/api/documentation/v1/objects/NotificationSettings.shtml

    Attribute names have been generated by converting ecobee property
    names from camelCase to snake_case.

    A getter property has been generated for each attribute.
    A setter property has been generated for each attribute whose value
    of READONLY is "no".

    An __init__ argument without a default value has been generated if
    the value of REQUIRED is "yes".
    An __init__ argument with a default value of None has been generated
    if the value of REQUIRED is "no".
    """

    __slots__ = [
        '_email_addresses',
        '_email_notifications_enabled',
        '_equipment',
        '_general',
        '_limit',
    ]

    attribute_name_map = {
        'email_addresses': 'emailAddresses',
        'emailAddresses': 'email_addresses',
        'email_notifications_enabled': 'emailNotificationsEnabled',
        'emailNotificationsEnabled': 'email_notifications_enabled',
        'equipment': 'equipment',
        'general': 'general',
        'limit': 'limit',
    }

    attribute_type_map = {
        'email_addresses': 'List[six.text_type]',
        'email_notifications_enabled': 'bool',
        'equipment': 'List[EquipmentSetting]',
        'general': 'List[GeneralSetting]',
        'limit': 'List[LimitSetting]',
    }

    def __init__(
        self,
        email_addresses=None,
        email_notifications_enabled=None,
        equipment=None,
        general=None,
        limit=None,
    ):
        """
        Construct a NotificationSettings instance
        """
        self._email_addresses = email_addresses
        self._email_notifications_enabled = email_notifications_enabled
        self._equipment = equipment
        self._general = general
        self._limit = limit

    @property
    def email_addresses(self):
        """
        Gets the email_addresses attribute of this NotificationSettings
        instance.

        :return: The value of the email_addresses attribute of this
        NotificationSettings instance.
        :rtype: List[six.text_type]
        """

        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """
        Sets the email_addresses attribute of this NotificationSettings
        instance.

        :param email_addresses: The email_addresses value to set for the
        email_addresses attribute of this NotificationSettings instance.
        :type: List[six.text_type]
        """

        self._email_addresses = email_addresses

    @property
    def email_notifications_enabled(self):
        """
        Gets the email_notifications_enabled attribute of this
        NotificationSettings instance.

        :return: The value of the email_notifications_enabled attribute
        of this NotificationSettings instance.
        :rtype: bool
        """

        return self._email_notifications_enabled

    @email_notifications_enabled.setter
    def email_notifications_enabled(self, email_notifications_enabled):
        """
        Sets the email_notifications_enabled attribute of this
        NotificationSettings instance.

        :param email_notifications_enabled: The
        email_notifications_enabled value to set for the
        email_notifications_enabled attribute of this
        NotificationSettings instance.
        :type: bool
        """

        self._email_notifications_enabled = email_notifications_enabled

    @property
    def equipment(self):
        """
        Gets the equipment attribute of this NotificationSettings
        instance.

        :return: The value of the equipment attribute of this
        NotificationSettings instance.
        :rtype: List[EquipmentSetting]
        """

        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """
        Sets the equipment attribute of this NotificationSettings
        instance.

        :param equipment: The equipment value to set for the equipment
        attribute of this NotificationSettings instance.
        :type: List[EquipmentSetting]
        """

        self._equipment = equipment

    @property
    def general(self):
        """
        Gets the general attribute of this NotificationSettings
        instance.

        :return: The value of the general attribute of this
        NotificationSettings instance.
        :rtype: List[GeneralSetting]
        """

        return self._general

    @general.setter
    def general(self, general):
        """
        Sets the general attribute of this NotificationSettings
        instance.

        :param general: The general value to set for the general
        attribute of this NotificationSettings instance.
        :type: List[GeneralSetting]
        """

        self._general = general

    @property
    def limit(self):
        """
        Gets the limit attribute of this NotificationSettings instance.

        :return: The value of the limit attribute of this
        NotificationSettings instance.
        :rtype: List[LimitSetting]
        """

        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit attribute of this NotificationSettings instance.

        :param limit: The limit value to set for the limit attribute of
        this NotificationSettings instance.
        :type: List[LimitSetting]
        """

        self._limit = limit
