"""
This module is home to the Settings class
"""
from pyecobee.ecobee_object import EcobeeObject


class Settings(EcobeeObject):
    """
    This class has been auto generated by scraping
    https://www.ecobee.com/home/developer/api/documentation/v1/objects/Settings.shtml

    Attribute names have been generated by converting ecobee property
    names from camelCase to snake_case.

    A getter property has been generated for each attribute.
    A setter property has been generated for each attribute whose value
    of READONLY is "no".

    An __init__ argument without a default value has been generated if
    the value of REQUIRED is "yes".
    An __init__ argument with a default value of None has been generated
    if the value of REQUIRED is "no".
    """

    __slots__ = [
        '_hvac_mode',
        '_last_service_date',
        '_service_remind_me',
        '_months_between_service',
        '_remind_me_date',
        '_vent',
        '_ventilator_min_on_time',
        '_service_remind_technician',
        '_ei_location',
        '_cold_temp_alert',
        '_cold_temp_alert_enabled',
        '_hot_temp_alert',
        '_hot_temp_alert_enabled',
        '_cool_stages',
        '_heat_stages',
        '_max_set_back',
        '_max_set_forward',
        '_quick_save_set_back',
        '_quick_save_set_forward',
        '_has_heat_pump',
        '_has_forced_air',
        '_has_boiler',
        '_has_humidifier',
        '_has_erv',
        '_has_hrv',
        '_condensation_avoid',
        '_use_celsius',
        '_use_time_format12',
        '_locale',
        '_humidity',
        '_humidifier_mode',
        '_backlight_on_intensity',
        '_backlight_sleep_intensity',
        '_backlight_off_time',
        '_sound_tick_volume',
        '_sound_alert_volume',
        '_compressor_protection_min_time',
        '_compressor_protection_min_temp',
        '_stage1_heating_differential_temp',
        '_stage1_cooling_differential_temp',
        '_stage1_heating_dissipation_time',
        '_stage1_cooling_dissipation_time',
        '_heat_pump_reversal_on_cool',
        '_fan_control_required',
        '_fan_min_on_time',
        '_heat_cool_min_delta',
        '_temp_correction',
        '_hold_action',
        '_heat_pump_ground_water',
        '_has_electric',
        '_has_dehumidifier',
        '_dehumidifier_mode',
        '_dehumidifier_level',
        '_dehumidify_with_a_c',
        '_dehumidify_overcool_offset',
        '_auto_heat_cool_feature_enabled',
        '_wifi_offline_alert',
        '_heat_min_temp',
        '_heat_max_temp',
        '_cool_min_temp',
        '_cool_max_temp',
        '_heat_range_high',
        '_heat_range_low',
        '_cool_range_high',
        '_cool_range_low',
        '_user_access_code',
        '_user_access_setting',
        '_aux_runtime_alert',
        '_aux_outdoor_temp_alert',
        '_aux_max_outdoor_temp',
        '_aux_runtime_alert_notify',
        '_aux_outdoor_temp_alert_notify',
        '_aux_runtime_alert_notify_technician',
        '_aux_outdoor_temp_alert_notify_technician',
        '_disable_pre_heating',
        '_disable_pre_cooling',
        '_installer_code_required',
        '_dr_accept',
        '_is_rental_property',
        '_use_zone_controller',
        '_random_start_delay_cool',
        '_random_start_delay_heat',
        '_humidity_high_alert',
        '_humidity_low_alert',
        '_disable_heat_pump_alerts',
        '_disable_alerts_on_idt',
        '_humidity_alert_notify',
        '_humidity_alert_notify_technician',
        '_temp_alert_notify',
        '_temp_alert_notify_technician',
        '_monthly_electricity_bill_limit',
        '_enable_electricity_bill_alert',
        '_enable_projected_electricity_bill_alert',
        '_electricity_billing_day_of_month',
        '_electricity_bill_cycle_months',
        '_electricity_bill_start_month',
        '_ventilator_min_on_time_home',
        '_ventilator_min_on_time_away',
        '_backlight_off_during_sleep',
        '_auto_away',
        '_smart_circulation',
        '_follow_me_comfort',
        '_ventilator_type',
        '_is_ventilator_timer_on',
        '_ventilator_off_date_time',
        '_has_u_v_filter',
        '_cooling_lockout',
        '_ventilator_free_cooling',
        '_dehumidify_when_heating',
        '_ventilator_dehumidify',
        '_group_ref',
        '_group_name',
        '_group_setting',
        '_fan_speed',
    ]

    attribute_name_map = {
        'hvac_mode': 'hvacMode',
        'hvacMode': 'hvac_mode',
        'last_service_date': 'lastServiceDate',
        'lastServiceDate': 'last_service_date',
        'service_remind_me': 'serviceRemindMe',
        'serviceRemindMe': 'service_remind_me',
        'months_between_service': 'monthsBetweenService',
        'monthsBetweenService': 'months_between_service',
        'remind_me_date': 'remindMeDate',
        'remindMeDate': 'remind_me_date',
        'vent': 'vent',
        'ventilator_min_on_time': 'ventilatorMinOnTime',
        'ventilatorMinOnTime': 'ventilator_min_on_time',
        'service_remind_technician': 'serviceRemindTechnician',
        'serviceRemindTechnician': 'service_remind_technician',
        'ei_location': 'eiLocation',
        'eiLocation': 'ei_location',
        'cold_temp_alert': 'coldTempAlert',
        'coldTempAlert': 'cold_temp_alert',
        'cold_temp_alert_enabled': 'coldTempAlertEnabled',
        'coldTempAlertEnabled': 'cold_temp_alert_enabled',
        'hot_temp_alert': 'hotTempAlert',
        'hotTempAlert': 'hot_temp_alert',
        'hot_temp_alert_enabled': 'hotTempAlertEnabled',
        'hotTempAlertEnabled': 'hot_temp_alert_enabled',
        'cool_stages': 'coolStages',
        'coolStages': 'cool_stages',
        'heat_stages': 'heatStages',
        'heatStages': 'heat_stages',
        'max_set_back': 'maxSetBack',
        'maxSetBack': 'max_set_back',
        'max_set_forward': 'maxSetForward',
        'maxSetForward': 'max_set_forward',
        'quick_save_set_back': 'quickSaveSetBack',
        'quickSaveSetBack': 'quick_save_set_back',
        'quick_save_set_forward': 'quickSaveSetForward',
        'quickSaveSetForward': 'quick_save_set_forward',
        'has_heat_pump': 'hasHeatPump',
        'hasHeatPump': 'has_heat_pump',
        'has_forced_air': 'hasForcedAir',
        'hasForcedAir': 'has_forced_air',
        'has_boiler': 'hasBoiler',
        'hasBoiler': 'has_boiler',
        'has_humidifier': 'hasHumidifier',
        'hasHumidifier': 'has_humidifier',
        'has_erv': 'hasErv',
        'hasErv': 'has_erv',
        'has_hrv': 'hasHrv',
        'hasHrv': 'has_hrv',
        'condensation_avoid': 'condensationAvoid',
        'condensationAvoid': 'condensation_avoid',
        'use_celsius': 'useCelsius',
        'useCelsius': 'use_celsius',
        'use_time_format12': 'useTimeFormat12',
        'useTimeFormat12': 'use_time_format12',
        'locale': 'locale',
        'humidity': 'humidity',
        'humidifier_mode': 'humidifierMode',
        'humidifierMode': 'humidifier_mode',
        'backlight_on_intensity': 'backlightOnIntensity',
        'backlightOnIntensity': 'backlight_on_intensity',
        'backlight_sleep_intensity': 'backlightSleepIntensity',
        'backlightSleepIntensity': 'backlight_sleep_intensity',
        'backlight_off_time': 'backlightOffTime',
        'backlightOffTime': 'backlight_off_time',
        'sound_tick_volume': 'soundTickVolume',
        'soundTickVolume': 'sound_tick_volume',
        'sound_alert_volume': 'soundAlertVolume',
        'soundAlertVolume': 'sound_alert_volume',
        'compressor_protection_min_time': 'compressorProtectionMinTime',
        'compressorProtectionMinTime': 'compressor_protection_min_time',
        'compressor_protection_min_temp': 'compressorProtectionMinTemp',
        'compressorProtectionMinTemp': 'compressor_protection_min_temp',
        'stage1_heating_differential_temp': 'stage1HeatingDifferentialTemp',
        'stage1HeatingDifferentialTemp': 'stage1_heating_differential_temp',
        'stage1_cooling_differential_temp': 'stage1CoolingDifferentialTemp',
        'stage1CoolingDifferentialTemp': 'stage1_cooling_differential_temp',
        'stage1_heating_dissipation_time': 'stage1HeatingDissipationTime',
        'stage1HeatingDissipationTime': 'stage1_heating_dissipation_time',
        'stage1_cooling_dissipation_time': 'stage1CoolingDissipationTime',
        'stage1CoolingDissipationTime': 'stage1_cooling_dissipation_time',
        'heat_pump_reversal_on_cool': 'heatPumpReversalOnCool',
        'heatPumpReversalOnCool': 'heat_pump_reversal_on_cool',
        'fan_control_required': 'fanControlRequired',
        'fanControlRequired': 'fan_control_required',
        'fan_min_on_time': 'fanMinOnTime',
        'fanMinOnTime': 'fan_min_on_time',
        'heat_cool_min_delta': 'heatCoolMinDelta',
        'heatCoolMinDelta': 'heat_cool_min_delta',
        'temp_correction': 'tempCorrection',
        'tempCorrection': 'temp_correction',
        'hold_action': 'holdAction',
        'holdAction': 'hold_action',
        'heat_pump_ground_water': 'heatPumpGroundWater',
        'heatPumpGroundWater': 'heat_pump_ground_water',
        'has_electric': 'hasElectric',
        'hasElectric': 'has_electric',
        'has_dehumidifier': 'hasDehumidifier',
        'hasDehumidifier': 'has_dehumidifier',
        'dehumidifier_mode': 'dehumidifierMode',
        'dehumidifierMode': 'dehumidifier_mode',
        'dehumidifier_level': 'dehumidifierLevel',
        'dehumidifierLevel': 'dehumidifier_level',
        'dehumidify_with_a_c': 'dehumidifyWithAC',
        'dehumidifyWithAC': 'dehumidify_with_a_c',
        'dehumidify_overcool_offset': 'dehumidifyOvercoolOffset',
        'dehumidifyOvercoolOffset': 'dehumidify_overcool_offset',
        'auto_heat_cool_feature_enabled': 'autoHeatCoolFeatureEnabled',
        'autoHeatCoolFeatureEnabled': 'auto_heat_cool_feature_enabled',
        'wifi_offline_alert': 'wifiOfflineAlert',
        'wifiOfflineAlert': 'wifi_offline_alert',
        'heat_min_temp': 'heatMinTemp',
        'heatMinTemp': 'heat_min_temp',
        'heat_max_temp': 'heatMaxTemp',
        'heatMaxTemp': 'heat_max_temp',
        'cool_min_temp': 'coolMinTemp',
        'coolMinTemp': 'cool_min_temp',
        'cool_max_temp': 'coolMaxTemp',
        'coolMaxTemp': 'cool_max_temp',
        'heat_range_high': 'heatRangeHigh',
        'heatRangeHigh': 'heat_range_high',
        'heat_range_low': 'heatRangeLow',
        'heatRangeLow': 'heat_range_low',
        'cool_range_high': 'coolRangeHigh',
        'coolRangeHigh': 'cool_range_high',
        'cool_range_low': 'coolRangeLow',
        'coolRangeLow': 'cool_range_low',
        'user_access_code': 'userAccessCode',
        'userAccessCode': 'user_access_code',
        'user_access_setting': 'userAccessSetting',
        'userAccessSetting': 'user_access_setting',
        'aux_runtime_alert': 'auxRuntimeAlert',
        'auxRuntimeAlert': 'aux_runtime_alert',
        'aux_outdoor_temp_alert': 'auxOutdoorTempAlert',
        'auxOutdoorTempAlert': 'aux_outdoor_temp_alert',
        'aux_max_outdoor_temp': 'auxMaxOutdoorTemp',
        'auxMaxOutdoorTemp': 'aux_max_outdoor_temp',
        'aux_runtime_alert_notify': 'auxRuntimeAlertNotify',
        'auxRuntimeAlertNotify': 'aux_runtime_alert_notify',
        'aux_outdoor_temp_alert_notify': 'auxOutdoorTempAlertNotify',
        'auxOutdoorTempAlertNotify': 'aux_outdoor_temp_alert_notify',
        'aux_runtime_alert_notify_technician': 'auxRuntimeAlertNotifyTechnician',
        'auxRuntimeAlertNotifyTechnician': 'aux_runtime_alert_notify_technician',
        'aux_outdoor_temp_alert_notify_technician': 'auxOutdoorTempAlertNotifyTechnician',
        'auxOutdoorTempAlertNotifyTechnician': 'aux_outdoor_temp_alert_notify_technician',
        'disable_pre_heating': 'disablePreHeating',
        'disablePreHeating': 'disable_pre_heating',
        'disable_pre_cooling': 'disablePreCooling',
        'disablePreCooling': 'disable_pre_cooling',
        'installer_code_required': 'installerCodeRequired',
        'installerCodeRequired': 'installer_code_required',
        'dr_accept': 'drAccept',
        'drAccept': 'dr_accept',
        'is_rental_property': 'isRentalProperty',
        'isRentalProperty': 'is_rental_property',
        'use_zone_controller': 'useZoneController',
        'useZoneController': 'use_zone_controller',
        'random_start_delay_cool': 'randomStartDelayCool',
        'randomStartDelayCool': 'random_start_delay_cool',
        'random_start_delay_heat': 'randomStartDelayHeat',
        'randomStartDelayHeat': 'random_start_delay_heat',
        'humidity_high_alert': 'humidityHighAlert',
        'humidityHighAlert': 'humidity_high_alert',
        'humidity_low_alert': 'humidityLowAlert',
        'humidityLowAlert': 'humidity_low_alert',
        'disable_heat_pump_alerts': 'disableHeatPumpAlerts',
        'disableHeatPumpAlerts': 'disable_heat_pump_alerts',
        'disable_alerts_on_idt': 'disableAlertsOnIdt',
        'disableAlertsOnIdt': 'disable_alerts_on_idt',
        'humidity_alert_notify': 'humidityAlertNotify',
        'humidityAlertNotify': 'humidity_alert_notify',
        'humidity_alert_notify_technician': 'humidityAlertNotifyTechnician',
        'humidityAlertNotifyTechnician': 'humidity_alert_notify_technician',
        'temp_alert_notify': 'tempAlertNotify',
        'tempAlertNotify': 'temp_alert_notify',
        'temp_alert_notify_technician': 'tempAlertNotifyTechnician',
        'tempAlertNotifyTechnician': 'temp_alert_notify_technician',
        'monthly_electricity_bill_limit': 'monthlyElectricityBillLimit',
        'monthlyElectricityBillLimit': 'monthly_electricity_bill_limit',
        'enable_electricity_bill_alert': 'enableElectricityBillAlert',
        'enableElectricityBillAlert': 'enable_electricity_bill_alert',
        'enable_projected_electricity_bill_alert': 'enableProjectedElectricityBillAlert',
        'enableProjectedElectricityBillAlert': 'enable_projected_electricity_bill_alert',
        'electricity_billing_day_of_month': 'electricityBillingDayOfMonth',
        'electricityBillingDayOfMonth': 'electricity_billing_day_of_month',
        'electricity_bill_cycle_months': 'electricityBillCycleMonths',
        'electricityBillCycleMonths': 'electricity_bill_cycle_months',
        'electricity_bill_start_month': 'electricityBillStartMonth',
        'electricityBillStartMonth': 'electricity_bill_start_month',
        'ventilator_min_on_time_home': 'ventilatorMinOnTimeHome',
        'ventilatorMinOnTimeHome': 'ventilator_min_on_time_home',
        'ventilator_min_on_time_away': 'ventilatorMinOnTimeAway',
        'ventilatorMinOnTimeAway': 'ventilator_min_on_time_away',
        'backlight_off_during_sleep': 'backlightOffDuringSleep',
        'backlightOffDuringSleep': 'backlight_off_during_sleep',
        'auto_away': 'autoAway',
        'autoAway': 'auto_away',
        'smart_circulation': 'smartCirculation',
        'smartCirculation': 'smart_circulation',
        'follow_me_comfort': 'followMeComfort',
        'followMeComfort': 'follow_me_comfort',
        'ventilator_type': 'ventilatorType',
        'ventilatorType': 'ventilator_type',
        'is_ventilator_timer_on': 'isVentilatorTimerOn',
        'isVentilatorTimerOn': 'is_ventilator_timer_on',
        'ventilator_off_date_time': 'ventilatorOffDateTime',
        'ventilatorOffDateTime': 'ventilator_off_date_time',
        'has_u_v_filter': 'hasUVFilter',
        'hasUVFilter': 'has_u_v_filter',
        'cooling_lockout': 'coolingLockout',
        'coolingLockout': 'cooling_lockout',
        'ventilator_free_cooling': 'ventilatorFreeCooling',
        'ventilatorFreeCooling': 'ventilator_free_cooling',
        'dehumidify_when_heating': 'dehumidifyWhenHeating',
        'dehumidifyWhenHeating': 'dehumidify_when_heating',
        'ventilator_dehumidify': 'ventilatorDehumidify',
        'ventilatorDehumidify': 'ventilator_dehumidify',
        'group_ref': 'groupRef',
        'groupRef': 'group_ref',
        'group_name': 'groupName',
        'groupName': 'group_name',
        'group_setting': 'groupSetting',
        'groupSetting': 'group_setting',
        'fan_speed': 'fanSpeed',
        'fanSpeed': 'fan_speed',
    }

    attribute_type_map = {
        'hvac_mode': 'six.text_type',
        'last_service_date': 'six.text_type',
        'service_remind_me': 'bool',
        'months_between_service': 'int',
        'remind_me_date': 'six.text_type',
        'vent': 'six.text_type',
        'ventilator_min_on_time': 'int',
        'service_remind_technician': 'bool',
        'ei_location': 'six.text_type',
        'cold_temp_alert': 'int',
        'cold_temp_alert_enabled': 'bool',
        'hot_temp_alert': 'int',
        'hot_temp_alert_enabled': 'bool',
        'cool_stages': 'int',
        'heat_stages': 'int',
        'max_set_back': 'int',
        'max_set_forward': 'int',
        'quick_save_set_back': 'int',
        'quick_save_set_forward': 'int',
        'has_heat_pump': 'bool',
        'has_forced_air': 'bool',
        'has_boiler': 'bool',
        'has_humidifier': 'bool',
        'has_erv': 'bool',
        'has_hrv': 'bool',
        'condensation_avoid': 'bool',
        'use_celsius': 'bool',
        'use_time_format12': 'bool',
        'locale': 'six.text_type',
        'humidity': 'six.text_type',
        'humidifier_mode': 'six.text_type',
        'backlight_on_intensity': 'int',
        'backlight_sleep_intensity': 'int',
        'backlight_off_time': 'int',
        'sound_tick_volume': 'int',
        'sound_alert_volume': 'int',
        'compressor_protection_min_time': 'int',
        'compressor_protection_min_temp': 'int',
        'stage1_heating_differential_temp': 'int',
        'stage1_cooling_differential_temp': 'int',
        'stage1_heating_dissipation_time': 'int',
        'stage1_cooling_dissipation_time': 'int',
        'heat_pump_reversal_on_cool': 'bool',
        'fan_control_required': 'bool',
        'fan_min_on_time': 'int',
        'heat_cool_min_delta': 'int',
        'temp_correction': 'int',
        'hold_action': 'six.text_type',
        'heat_pump_ground_water': 'bool',
        'has_electric': 'bool',
        'has_dehumidifier': 'bool',
        'dehumidifier_mode': 'six.text_type',
        'dehumidifier_level': 'int',
        'dehumidify_with_a_c': 'bool',
        'dehumidify_overcool_offset': 'int',
        'auto_heat_cool_feature_enabled': 'bool',
        'wifi_offline_alert': 'bool',
        'heat_min_temp': 'int',
        'heat_max_temp': 'int',
        'cool_min_temp': 'int',
        'cool_max_temp': 'int',
        'heat_range_high': 'int',
        'heat_range_low': 'int',
        'cool_range_high': 'int',
        'cool_range_low': 'int',
        'user_access_code': 'six.text_type',
        'user_access_setting': 'int',
        'aux_runtime_alert': 'int',
        'aux_outdoor_temp_alert': 'int',
        'aux_max_outdoor_temp': 'int',
        'aux_runtime_alert_notify': 'bool',
        'aux_outdoor_temp_alert_notify': 'bool',
        'aux_runtime_alert_notify_technician': 'bool',
        'aux_outdoor_temp_alert_notify_technician': 'bool',
        'disable_pre_heating': 'bool',
        'disable_pre_cooling': 'bool',
        'installer_code_required': 'bool',
        'dr_accept': 'six.text_type',
        'is_rental_property': 'bool',
        'use_zone_controller': 'bool',
        'random_start_delay_cool': 'int',
        'random_start_delay_heat': 'int',
        'humidity_high_alert': 'int',
        'humidity_low_alert': 'int',
        'disable_heat_pump_alerts': 'bool',
        'disable_alerts_on_idt': 'bool',
        'humidity_alert_notify': 'bool',
        'humidity_alert_notify_technician': 'bool',
        'temp_alert_notify': 'bool',
        'temp_alert_notify_technician': 'bool',
        'monthly_electricity_bill_limit': 'int',
        'enable_electricity_bill_alert': 'bool',
        'enable_projected_electricity_bill_alert': 'bool',
        'electricity_billing_day_of_month': 'int',
        'electricity_bill_cycle_months': 'int',
        'electricity_bill_start_month': 'int',
        'ventilator_min_on_time_home': 'int',
        'ventilator_min_on_time_away': 'int',
        'backlight_off_during_sleep': 'bool',
        'auto_away': 'bool',
        'smart_circulation': 'bool',
        'follow_me_comfort': 'bool',
        'ventilator_type': 'six.text_type',
        'is_ventilator_timer_on': 'bool',
        'ventilator_off_date_time': 'six.text_type',
        'has_u_v_filter': 'bool',
        'cooling_lockout': 'bool',
        'ventilator_free_cooling': 'bool',
        'dehumidify_when_heating': 'bool',
        'ventilator_dehumidify': 'bool',
        'group_ref': 'six.text_type',
        'group_name': 'six.text_type',
        'group_setting': 'int',
        'fan_speed': 'six.text_type',
    }

    def __init__(
        self,
        hvac_mode=None,
        last_service_date=None,
        service_remind_me=None,
        months_between_service=None,
        remind_me_date=None,
        vent=None,
        ventilator_min_on_time=None,
        service_remind_technician=None,
        ei_location=None,
        cold_temp_alert=None,
        cold_temp_alert_enabled=None,
        hot_temp_alert=None,
        hot_temp_alert_enabled=None,
        cool_stages=None,
        heat_stages=None,
        max_set_back=None,
        max_set_forward=None,
        quick_save_set_back=None,
        quick_save_set_forward=None,
        has_heat_pump=None,
        has_forced_air=None,
        has_boiler=None,
        has_humidifier=None,
        has_erv=None,
        has_hrv=None,
        condensation_avoid=None,
        use_celsius=None,
        use_time_format12=None,
        locale=None,
        humidity=None,
        humidifier_mode=None,
        backlight_on_intensity=None,
        backlight_sleep_intensity=None,
        backlight_off_time=None,
        sound_tick_volume=None,
        sound_alert_volume=None,
        compressor_protection_min_time=None,
        compressor_protection_min_temp=None,
        stage1_heating_differential_temp=None,
        stage1_cooling_differential_temp=None,
        stage1_heating_dissipation_time=None,
        stage1_cooling_dissipation_time=None,
        heat_pump_reversal_on_cool=None,
        fan_control_required=None,
        fan_min_on_time=None,
        heat_cool_min_delta=None,
        temp_correction=None,
        hold_action=None,
        heat_pump_ground_water=None,
        has_electric=None,
        has_dehumidifier=None,
        dehumidifier_mode=None,
        dehumidifier_level=None,
        dehumidify_with_a_c=None,
        dehumidify_overcool_offset=None,
        auto_heat_cool_feature_enabled=None,
        wifi_offline_alert=None,
        heat_min_temp=None,
        heat_max_temp=None,
        cool_min_temp=None,
        cool_max_temp=None,
        heat_range_high=None,
        heat_range_low=None,
        cool_range_high=None,
        cool_range_low=None,
        user_access_code=None,
        user_access_setting=None,
        aux_runtime_alert=None,
        aux_outdoor_temp_alert=None,
        aux_max_outdoor_temp=None,
        aux_runtime_alert_notify=None,
        aux_outdoor_temp_alert_notify=None,
        aux_runtime_alert_notify_technician=None,
        aux_outdoor_temp_alert_notify_technician=None,
        disable_pre_heating=None,
        disable_pre_cooling=None,
        installer_code_required=None,
        dr_accept=None,
        is_rental_property=None,
        use_zone_controller=None,
        random_start_delay_cool=None,
        random_start_delay_heat=None,
        humidity_high_alert=None,
        humidity_low_alert=None,
        disable_heat_pump_alerts=None,
        disable_alerts_on_idt=None,
        humidity_alert_notify=None,
        humidity_alert_notify_technician=None,
        temp_alert_notify=None,
        temp_alert_notify_technician=None,
        monthly_electricity_bill_limit=None,
        enable_electricity_bill_alert=None,
        enable_projected_electricity_bill_alert=None,
        electricity_billing_day_of_month=None,
        electricity_bill_cycle_months=None,
        electricity_bill_start_month=None,
        ventilator_min_on_time_home=None,
        ventilator_min_on_time_away=None,
        backlight_off_during_sleep=None,
        auto_away=None,
        smart_circulation=None,
        follow_me_comfort=None,
        ventilator_type=None,
        is_ventilator_timer_on=None,
        ventilator_off_date_time=None,
        has_u_v_filter=None,
        cooling_lockout=None,
        ventilator_free_cooling=None,
        dehumidify_when_heating=None,
        ventilator_dehumidify=None,
        group_ref=None,
        group_name=None,
        group_setting=None,
        fan_speed=None,
    ):
        """
        Construct a Settings instance
        """
        self._hvac_mode = hvac_mode
        self._last_service_date = last_service_date
        self._service_remind_me = service_remind_me
        self._months_between_service = months_between_service
        self._remind_me_date = remind_me_date
        self._vent = vent
        self._ventilator_min_on_time = ventilator_min_on_time
        self._service_remind_technician = service_remind_technician
        self._ei_location = ei_location
        self._cold_temp_alert = cold_temp_alert
        self._cold_temp_alert_enabled = cold_temp_alert_enabled
        self._hot_temp_alert = hot_temp_alert
        self._hot_temp_alert_enabled = hot_temp_alert_enabled
        self._cool_stages = cool_stages
        self._heat_stages = heat_stages
        self._max_set_back = max_set_back
        self._max_set_forward = max_set_forward
        self._quick_save_set_back = quick_save_set_back
        self._quick_save_set_forward = quick_save_set_forward
        self._has_heat_pump = has_heat_pump
        self._has_forced_air = has_forced_air
        self._has_boiler = has_boiler
        self._has_humidifier = has_humidifier
        self._has_erv = has_erv
        self._has_hrv = has_hrv
        self._condensation_avoid = condensation_avoid
        self._use_celsius = use_celsius
        self._use_time_format12 = use_time_format12
        self._locale = locale
        self._humidity = humidity
        self._humidifier_mode = humidifier_mode
        self._backlight_on_intensity = backlight_on_intensity
        self._backlight_sleep_intensity = backlight_sleep_intensity
        self._backlight_off_time = backlight_off_time
        self._sound_tick_volume = sound_tick_volume
        self._sound_alert_volume = sound_alert_volume
        self._compressor_protection_min_time = compressor_protection_min_time
        self._compressor_protection_min_temp = compressor_protection_min_temp
        self._stage1_heating_differential_temp = stage1_heating_differential_temp
        self._stage1_cooling_differential_temp = stage1_cooling_differential_temp
        self._stage1_heating_dissipation_time = stage1_heating_dissipation_time
        self._stage1_cooling_dissipation_time = stage1_cooling_dissipation_time
        self._heat_pump_reversal_on_cool = heat_pump_reversal_on_cool
        self._fan_control_required = fan_control_required
        self._fan_min_on_time = fan_min_on_time
        self._heat_cool_min_delta = heat_cool_min_delta
        self._temp_correction = temp_correction
        self._hold_action = hold_action
        self._heat_pump_ground_water = heat_pump_ground_water
        self._has_electric = has_electric
        self._has_dehumidifier = has_dehumidifier
        self._dehumidifier_mode = dehumidifier_mode
        self._dehumidifier_level = dehumidifier_level
        self._dehumidify_with_a_c = dehumidify_with_a_c
        self._dehumidify_overcool_offset = dehumidify_overcool_offset
        self._auto_heat_cool_feature_enabled = auto_heat_cool_feature_enabled
        self._wifi_offline_alert = wifi_offline_alert
        self._heat_min_temp = heat_min_temp
        self._heat_max_temp = heat_max_temp
        self._cool_min_temp = cool_min_temp
        self._cool_max_temp = cool_max_temp
        self._heat_range_high = heat_range_high
        self._heat_range_low = heat_range_low
        self._cool_range_high = cool_range_high
        self._cool_range_low = cool_range_low
        self._user_access_code = user_access_code
        self._user_access_setting = user_access_setting
        self._aux_runtime_alert = aux_runtime_alert
        self._aux_outdoor_temp_alert = aux_outdoor_temp_alert
        self._aux_max_outdoor_temp = aux_max_outdoor_temp
        self._aux_runtime_alert_notify = aux_runtime_alert_notify
        self._aux_outdoor_temp_alert_notify = aux_outdoor_temp_alert_notify
        self._aux_runtime_alert_notify_technician = aux_runtime_alert_notify_technician
        self._aux_outdoor_temp_alert_notify_technician = (
            aux_outdoor_temp_alert_notify_technician
        )
        self._disable_pre_heating = disable_pre_heating
        self._disable_pre_cooling = disable_pre_cooling
        self._installer_code_required = installer_code_required
        self._dr_accept = dr_accept
        self._is_rental_property = is_rental_property
        self._use_zone_controller = use_zone_controller
        self._random_start_delay_cool = random_start_delay_cool
        self._random_start_delay_heat = random_start_delay_heat
        self._humidity_high_alert = humidity_high_alert
        self._humidity_low_alert = humidity_low_alert
        self._disable_heat_pump_alerts = disable_heat_pump_alerts
        self._disable_alerts_on_idt = disable_alerts_on_idt
        self._humidity_alert_notify = humidity_alert_notify
        self._humidity_alert_notify_technician = humidity_alert_notify_technician
        self._temp_alert_notify = temp_alert_notify
        self._temp_alert_notify_technician = temp_alert_notify_technician
        self._monthly_electricity_bill_limit = monthly_electricity_bill_limit
        self._enable_electricity_bill_alert = enable_electricity_bill_alert
        self._enable_projected_electricity_bill_alert = (
            enable_projected_electricity_bill_alert
        )
        self._electricity_billing_day_of_month = electricity_billing_day_of_month
        self._electricity_bill_cycle_months = electricity_bill_cycle_months
        self._electricity_bill_start_month = electricity_bill_start_month
        self._ventilator_min_on_time_home = ventilator_min_on_time_home
        self._ventilator_min_on_time_away = ventilator_min_on_time_away
        self._backlight_off_during_sleep = backlight_off_during_sleep
        self._auto_away = auto_away
        self._smart_circulation = smart_circulation
        self._follow_me_comfort = follow_me_comfort
        self._ventilator_type = ventilator_type
        self._is_ventilator_timer_on = is_ventilator_timer_on
        self._ventilator_off_date_time = ventilator_off_date_time
        self._has_u_v_filter = has_u_v_filter
        self._cooling_lockout = cooling_lockout
        self._ventilator_free_cooling = ventilator_free_cooling
        self._dehumidify_when_heating = dehumidify_when_heating
        self._ventilator_dehumidify = ventilator_dehumidify
        self._group_ref = group_ref
        self._group_name = group_name
        self._group_setting = group_setting
        self._fan_speed = fan_speed

    @property
    def hvac_mode(self):
        """
        Gets the hvac_mode attribute of this Settings instance.

        :return: The value of the hvac_mode attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._hvac_mode

    @hvac_mode.setter
    def hvac_mode(self, hvac_mode):
        """
        Sets the hvac_mode attribute of this Settings instance.

        :param hvac_mode: The hvac_mode value to set for the hvac_mode
        attribute of this Settings instance.
        :type: six.text_type
        """

        self._hvac_mode = hvac_mode

    @property
    def last_service_date(self):
        """
        Gets the last_service_date attribute of this Settings instance.

        :return: The value of the last_service_date attribute of this
        Settings instance.
        :rtype: six.text_type
        """

        return self._last_service_date

    @last_service_date.setter
    def last_service_date(self, last_service_date):
        """
        Sets the last_service_date attribute of this Settings instance.

        :param last_service_date: The last_service_date value to set for
        the last_service_date attribute of this Settings instance.
        :type: six.text_type
        """

        self._last_service_date = last_service_date

    @property
    def service_remind_me(self):
        """
        Gets the service_remind_me attribute of this Settings instance.

        :return: The value of the service_remind_me attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._service_remind_me

    @service_remind_me.setter
    def service_remind_me(self, service_remind_me):
        """
        Sets the service_remind_me attribute of this Settings instance.

        :param service_remind_me: The service_remind_me value to set for
        the service_remind_me attribute of this Settings instance.
        :type: bool
        """

        self._service_remind_me = service_remind_me

    @property
    def months_between_service(self):
        """
        Gets the months_between_service attribute of this Settings
        instance.

        :return: The value of the months_between_service attribute of
        this Settings instance.
        :rtype: int
        """

        return self._months_between_service

    @months_between_service.setter
    def months_between_service(self, months_between_service):
        """
        Sets the months_between_service attribute of this Settings
        instance.

        :param months_between_service: The months_between_service value
        to set for the months_between_service attribute of this Settings
        instance.
        :type: int
        """

        self._months_between_service = months_between_service

    @property
    def remind_me_date(self):
        """
        Gets the remind_me_date attribute of this Settings instance.

        :return: The value of the remind_me_date attribute of this
        Settings instance.
        :rtype: six.text_type
        """

        return self._remind_me_date

    @remind_me_date.setter
    def remind_me_date(self, remind_me_date):
        """
        Sets the remind_me_date attribute of this Settings instance.

        :param remind_me_date: The remind_me_date value to set for the
        remind_me_date attribute of this Settings instance.
        :type: six.text_type
        """

        self._remind_me_date = remind_me_date

    @property
    def vent(self):
        """
        Gets the vent attribute of this Settings instance.

        :return: The value of the vent attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._vent

    @vent.setter
    def vent(self, vent):
        """
        Sets the vent attribute of this Settings instance.

        :param vent: The vent value to set for the vent attribute of
        this Settings instance.
        :type: six.text_type
        """

        self._vent = vent

    @property
    def ventilator_min_on_time(self):
        """
        Gets the ventilator_min_on_time attribute of this Settings
        instance.

        :return: The value of the ventilator_min_on_time attribute of
        this Settings instance.
        :rtype: int
        """

        return self._ventilator_min_on_time

    @ventilator_min_on_time.setter
    def ventilator_min_on_time(self, ventilator_min_on_time):
        """
        Sets the ventilator_min_on_time attribute of this Settings
        instance.

        :param ventilator_min_on_time: The ventilator_min_on_time value
        to set for the ventilator_min_on_time attribute of this Settings
        instance.
        :type: int
        """

        self._ventilator_min_on_time = ventilator_min_on_time

    @property
    def service_remind_technician(self):
        """
        Gets the service_remind_technician attribute of this Settings
        instance.

        :return: The value of the service_remind_technician attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._service_remind_technician

    @service_remind_technician.setter
    def service_remind_technician(self, service_remind_technician):
        """
        Sets the service_remind_technician attribute of this Settings
        instance.

        :param service_remind_technician: The service_remind_technician
        value to set for the service_remind_technician attribute of this
        Settings instance.
        :type: bool
        """

        self._service_remind_technician = service_remind_technician

    @property
    def ei_location(self):
        """
        Gets the ei_location attribute of this Settings instance.

        :return: The value of the ei_location attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._ei_location

    @ei_location.setter
    def ei_location(self, ei_location):
        """
        Sets the ei_location attribute of this Settings instance.

        :param ei_location: The ei_location value to set for the
        ei_location attribute of this Settings instance.
        :type: six.text_type
        """

        self._ei_location = ei_location

    @property
    def cold_temp_alert(self):
        """
        Gets the cold_temp_alert attribute of this Settings instance.

        :return: The value of the cold_temp_alert attribute of this
        Settings instance.
        :rtype: int
        """

        return self._cold_temp_alert

    @cold_temp_alert.setter
    def cold_temp_alert(self, cold_temp_alert):
        """
        Sets the cold_temp_alert attribute of this Settings instance.

        :param cold_temp_alert: The cold_temp_alert value to set for the
        cold_temp_alert attribute of this Settings instance.
        :type: int
        """

        self._cold_temp_alert = cold_temp_alert

    @property
    def cold_temp_alert_enabled(self):
        """
        Gets the cold_temp_alert_enabled attribute of this Settings
        instance.

        :return: The value of the cold_temp_alert_enabled attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._cold_temp_alert_enabled

    @cold_temp_alert_enabled.setter
    def cold_temp_alert_enabled(self, cold_temp_alert_enabled):
        """
        Sets the cold_temp_alert_enabled attribute of this Settings
        instance.

        :param cold_temp_alert_enabled: The cold_temp_alert_enabled
        value to set for the cold_temp_alert_enabled attribute of this
        Settings instance.
        :type: bool
        """

        self._cold_temp_alert_enabled = cold_temp_alert_enabled

    @property
    def hot_temp_alert(self):
        """
        Gets the hot_temp_alert attribute of this Settings instance.

        :return: The value of the hot_temp_alert attribute of this
        Settings instance.
        :rtype: int
        """

        return self._hot_temp_alert

    @hot_temp_alert.setter
    def hot_temp_alert(self, hot_temp_alert):
        """
        Sets the hot_temp_alert attribute of this Settings instance.

        :param hot_temp_alert: The hot_temp_alert value to set for the
        hot_temp_alert attribute of this Settings instance.
        :type: int
        """

        self._hot_temp_alert = hot_temp_alert

    @property
    def hot_temp_alert_enabled(self):
        """
        Gets the hot_temp_alert_enabled attribute of this Settings
        instance.

        :return: The value of the hot_temp_alert_enabled attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._hot_temp_alert_enabled

    @hot_temp_alert_enabled.setter
    def hot_temp_alert_enabled(self, hot_temp_alert_enabled):
        """
        Sets the hot_temp_alert_enabled attribute of this Settings
        instance.

        :param hot_temp_alert_enabled: The hot_temp_alert_enabled value
        to set for the hot_temp_alert_enabled attribute of this Settings
        instance.
        :type: bool
        """

        self._hot_temp_alert_enabled = hot_temp_alert_enabled

    @property
    def cool_stages(self):
        """
        Gets the cool_stages attribute of this Settings instance.

        :return: The value of the cool_stages attribute of this Settings
        instance.
        :rtype: int
        """

        return self._cool_stages

    @property
    def heat_stages(self):
        """
        Gets the heat_stages attribute of this Settings instance.

        :return: The value of the heat_stages attribute of this Settings
        instance.
        :rtype: int
        """

        return self._heat_stages

    @property
    def max_set_back(self):
        """
        Gets the max_set_back attribute of this Settings instance.

        :return: The value of the max_set_back attribute of this
        Settings instance.
        :rtype: int
        """

        return self._max_set_back

    @max_set_back.setter
    def max_set_back(self, max_set_back):
        """
        Sets the max_set_back attribute of this Settings instance.

        :param max_set_back: The max_set_back value to set for the
        max_set_back attribute of this Settings instance.
        :type: int
        """

        self._max_set_back = max_set_back

    @property
    def max_set_forward(self):
        """
        Gets the max_set_forward attribute of this Settings instance.

        :return: The value of the max_set_forward attribute of this
        Settings instance.
        :rtype: int
        """

        return self._max_set_forward

    @max_set_forward.setter
    def max_set_forward(self, max_set_forward):
        """
        Sets the max_set_forward attribute of this Settings instance.

        :param max_set_forward: The max_set_forward value to set for the
        max_set_forward attribute of this Settings instance.
        :type: int
        """

        self._max_set_forward = max_set_forward

    @property
    def quick_save_set_back(self):
        """
        Gets the quick_save_set_back attribute of this Settings
        instance.

        :return: The value of the quick_save_set_back attribute of this
        Settings instance.
        :rtype: int
        """

        return self._quick_save_set_back

    @quick_save_set_back.setter
    def quick_save_set_back(self, quick_save_set_back):
        """
        Sets the quick_save_set_back attribute of this Settings
        instance.

        :param quick_save_set_back: The quick_save_set_back value to set
        for the quick_save_set_back attribute of this Settings instance.
        :type: int
        """

        self._quick_save_set_back = quick_save_set_back

    @property
    def quick_save_set_forward(self):
        """
        Gets the quick_save_set_forward attribute of this Settings
        instance.

        :return: The value of the quick_save_set_forward attribute of
        this Settings instance.
        :rtype: int
        """

        return self._quick_save_set_forward

    @quick_save_set_forward.setter
    def quick_save_set_forward(self, quick_save_set_forward):
        """
        Sets the quick_save_set_forward attribute of this Settings
        instance.

        :param quick_save_set_forward: The quick_save_set_forward value
        to set for the quick_save_set_forward attribute of this Settings
        instance.
        :type: int
        """

        self._quick_save_set_forward = quick_save_set_forward

    @property
    def has_heat_pump(self):
        """
        Gets the has_heat_pump attribute of this Settings instance.

        :return: The value of the has_heat_pump attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._has_heat_pump

    @property
    def has_forced_air(self):
        """
        Gets the has_forced_air attribute of this Settings instance.

        :return: The value of the has_forced_air attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._has_forced_air

    @property
    def has_boiler(self):
        """
        Gets the has_boiler attribute of this Settings instance.

        :return: The value of the has_boiler attribute of this Settings
        instance.
        :rtype: bool
        """

        return self._has_boiler

    @property
    def has_humidifier(self):
        """
        Gets the has_humidifier attribute of this Settings instance.

        :return: The value of the has_humidifier attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._has_humidifier

    @property
    def has_erv(self):
        """
        Gets the has_erv attribute of this Settings instance.

        :return: The value of the has_erv attribute of this Settings
        instance.
        :rtype: bool
        """

        return self._has_erv

    @property
    def has_hrv(self):
        """
        Gets the has_hrv attribute of this Settings instance.

        :return: The value of the has_hrv attribute of this Settings
        instance.
        :rtype: bool
        """

        return self._has_hrv

    @property
    def condensation_avoid(self):
        """
        Gets the condensation_avoid attribute of this Settings instance.

        :return: The value of the condensation_avoid attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._condensation_avoid

    @condensation_avoid.setter
    def condensation_avoid(self, condensation_avoid):
        """
        Sets the condensation_avoid attribute of this Settings instance.

        :param condensation_avoid: The condensation_avoid value to set
        for the condensation_avoid attribute of this Settings instance.
        :type: bool
        """

        self._condensation_avoid = condensation_avoid

    @property
    def use_celsius(self):
        """
        Gets the use_celsius attribute of this Settings instance.

        :return: The value of the use_celsius attribute of this Settings
        instance.
        :rtype: bool
        """

        return self._use_celsius

    @use_celsius.setter
    def use_celsius(self, use_celsius):
        """
        Sets the use_celsius attribute of this Settings instance.

        :param use_celsius: The use_celsius value to set for the
        use_celsius attribute of this Settings instance.
        :type: bool
        """

        self._use_celsius = use_celsius

    @property
    def use_time_format12(self):
        """
        Gets the use_time_format12 attribute of this Settings instance.

        :return: The value of the use_time_format12 attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._use_time_format12

    @use_time_format12.setter
    def use_time_format12(self, use_time_format12):
        """
        Sets the use_time_format12 attribute of this Settings instance.

        :param use_time_format12: The use_time_format12 value to set for
        the use_time_format12 attribute of this Settings instance.
        :type: bool
        """

        self._use_time_format12 = use_time_format12

    @property
    def locale(self):
        """
        Gets the locale attribute of this Settings instance.

        :return: The value of the locale attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale attribute of this Settings instance.

        :param locale: The locale value to set for the locale attribute
        of this Settings instance.
        :type: six.text_type
        """

        self._locale = locale

    @property
    def humidity(self):
        """
        Gets the humidity attribute of this Settings instance.

        :return: The value of the humidity attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """
        Sets the humidity attribute of this Settings instance.

        :param humidity: The humidity value to set for the humidity
        attribute of this Settings instance.
        :type: six.text_type
        """

        self._humidity = humidity

    @property
    def humidifier_mode(self):
        """
        Gets the humidifier_mode attribute of this Settings instance.

        :return: The value of the humidifier_mode attribute of this
        Settings instance.
        :rtype: six.text_type
        """

        return self._humidifier_mode

    @humidifier_mode.setter
    def humidifier_mode(self, humidifier_mode):
        """
        Sets the humidifier_mode attribute of this Settings instance.

        :param humidifier_mode: The humidifier_mode value to set for the
        humidifier_mode attribute of this Settings instance.
        :type: six.text_type
        """

        self._humidifier_mode = humidifier_mode

    @property
    def backlight_on_intensity(self):
        """
        Gets the backlight_on_intensity attribute of this Settings
        instance.

        :return: The value of the backlight_on_intensity attribute of
        this Settings instance.
        :rtype: int
        """

        return self._backlight_on_intensity

    @backlight_on_intensity.setter
    def backlight_on_intensity(self, backlight_on_intensity):
        """
        Sets the backlight_on_intensity attribute of this Settings
        instance.

        :param backlight_on_intensity: The backlight_on_intensity value
        to set for the backlight_on_intensity attribute of this Settings
        instance.
        :type: int
        """

        self._backlight_on_intensity = backlight_on_intensity

    @property
    def backlight_sleep_intensity(self):
        """
        Gets the backlight_sleep_intensity attribute of this Settings
        instance.

        :return: The value of the backlight_sleep_intensity attribute of
        this Settings instance.
        :rtype: int
        """

        return self._backlight_sleep_intensity

    @backlight_sleep_intensity.setter
    def backlight_sleep_intensity(self, backlight_sleep_intensity):
        """
        Sets the backlight_sleep_intensity attribute of this Settings
        instance.

        :param backlight_sleep_intensity: The backlight_sleep_intensity
        value to set for the backlight_sleep_intensity attribute of this
        Settings instance.
        :type: int
        """

        self._backlight_sleep_intensity = backlight_sleep_intensity

    @property
    def backlight_off_time(self):
        """
        Gets the backlight_off_time attribute of this Settings instance.

        :return: The value of the backlight_off_time attribute of this
        Settings instance.
        :rtype: int
        """

        return self._backlight_off_time

    @backlight_off_time.setter
    def backlight_off_time(self, backlight_off_time):
        """
        Sets the backlight_off_time attribute of this Settings instance.

        :param backlight_off_time: The backlight_off_time value to set
        for the backlight_off_time attribute of this Settings instance.
        :type: int
        """

        self._backlight_off_time = backlight_off_time

    @property
    def sound_tick_volume(self):
        """
        Gets the sound_tick_volume attribute of this Settings instance.

        :return: The value of the sound_tick_volume attribute of this
        Settings instance.
        :rtype: int
        """

        return self._sound_tick_volume

    @sound_tick_volume.setter
    def sound_tick_volume(self, sound_tick_volume):
        """
        Sets the sound_tick_volume attribute of this Settings instance.

        :param sound_tick_volume: The sound_tick_volume value to set for
        the sound_tick_volume attribute of this Settings instance.
        :type: int
        """

        self._sound_tick_volume = sound_tick_volume

    @property
    def sound_alert_volume(self):
        """
        Gets the sound_alert_volume attribute of this Settings instance.

        :return: The value of the sound_alert_volume attribute of this
        Settings instance.
        :rtype: int
        """

        return self._sound_alert_volume

    @sound_alert_volume.setter
    def sound_alert_volume(self, sound_alert_volume):
        """
        Sets the sound_alert_volume attribute of this Settings instance.

        :param sound_alert_volume: The sound_alert_volume value to set
        for the sound_alert_volume attribute of this Settings instance.
        :type: int
        """

        self._sound_alert_volume = sound_alert_volume

    @property
    def compressor_protection_min_time(self):
        """
        Gets the compressor_protection_min_time attribute of this
        Settings instance.

        :return: The value of the compressor_protection_min_time
        attribute of this Settings instance.
        :rtype: int
        """

        return self._compressor_protection_min_time

    @compressor_protection_min_time.setter
    def compressor_protection_min_time(self, compressor_protection_min_time):
        """
        Sets the compressor_protection_min_time attribute of this
        Settings instance.

        :param compressor_protection_min_time: The
        compressor_protection_min_time value to set for the
        compressor_protection_min_time attribute of this Settings
        instance.
        :type: int
        """

        self._compressor_protection_min_time = compressor_protection_min_time

    @property
    def compressor_protection_min_temp(self):
        """
        Gets the compressor_protection_min_temp attribute of this
        Settings instance.

        :return: The value of the compressor_protection_min_temp
        attribute of this Settings instance.
        :rtype: int
        """

        return self._compressor_protection_min_temp

    @compressor_protection_min_temp.setter
    def compressor_protection_min_temp(self, compressor_protection_min_temp):
        """
        Sets the compressor_protection_min_temp attribute of this
        Settings instance.

        :param compressor_protection_min_temp: The
        compressor_protection_min_temp value to set for the
        compressor_protection_min_temp attribute of this Settings
        instance.
        :type: int
        """

        self._compressor_protection_min_temp = compressor_protection_min_temp

    @property
    def stage1_heating_differential_temp(self):
        """
        Gets the stage1_heating_differential_temp attribute of this
        Settings instance.

        :return: The value of the stage1_heating_differential_temp
        attribute of this Settings instance.
        :rtype: int
        """

        return self._stage1_heating_differential_temp

    @stage1_heating_differential_temp.setter
    def stage1_heating_differential_temp(self, stage1_heating_differential_temp):
        """
        Sets the stage1_heating_differential_temp attribute of this
        Settings instance.

        :param stage1_heating_differential_temp: The
        stage1_heating_differential_temp value to set for the
        stage1_heating_differential_temp attribute of this Settings
        instance.
        :type: int
        """

        self._stage1_heating_differential_temp = stage1_heating_differential_temp

    @property
    def stage1_cooling_differential_temp(self):
        """
        Gets the stage1_cooling_differential_temp attribute of this
        Settings instance.

        :return: The value of the stage1_cooling_differential_temp
        attribute of this Settings instance.
        :rtype: int
        """

        return self._stage1_cooling_differential_temp

    @stage1_cooling_differential_temp.setter
    def stage1_cooling_differential_temp(self, stage1_cooling_differential_temp):
        """
        Sets the stage1_cooling_differential_temp attribute of this
        Settings instance.

        :param stage1_cooling_differential_temp: The
        stage1_cooling_differential_temp value to set for the
        stage1_cooling_differential_temp attribute of this Settings
        instance.
        :type: int
        """

        self._stage1_cooling_differential_temp = stage1_cooling_differential_temp

    @property
    def stage1_heating_dissipation_time(self):
        """
        Gets the stage1_heating_dissipation_time attribute of this
        Settings instance.

        :return: The value of the stage1_heating_dissipation_time
        attribute of this Settings instance.
        :rtype: int
        """

        return self._stage1_heating_dissipation_time

    @stage1_heating_dissipation_time.setter
    def stage1_heating_dissipation_time(self, stage1_heating_dissipation_time):
        """
        Sets the stage1_heating_dissipation_time attribute of this
        Settings instance.

        :param stage1_heating_dissipation_time: The
        stage1_heating_dissipation_time value to set for the
        stage1_heating_dissipation_time attribute of this Settings
        instance.
        :type: int
        """

        self._stage1_heating_dissipation_time = stage1_heating_dissipation_time

    @property
    def stage1_cooling_dissipation_time(self):
        """
        Gets the stage1_cooling_dissipation_time attribute of this
        Settings instance.

        :return: The value of the stage1_cooling_dissipation_time
        attribute of this Settings instance.
        :rtype: int
        """

        return self._stage1_cooling_dissipation_time

    @stage1_cooling_dissipation_time.setter
    def stage1_cooling_dissipation_time(self, stage1_cooling_dissipation_time):
        """
        Sets the stage1_cooling_dissipation_time attribute of this
        Settings instance.

        :param stage1_cooling_dissipation_time: The
        stage1_cooling_dissipation_time value to set for the
        stage1_cooling_dissipation_time attribute of this Settings
        instance.
        :type: int
        """

        self._stage1_cooling_dissipation_time = stage1_cooling_dissipation_time

    @property
    def heat_pump_reversal_on_cool(self):
        """
        Gets the heat_pump_reversal_on_cool attribute of this Settings
        instance.

        :return: The value of the heat_pump_reversal_on_cool attribute
        of this Settings instance.
        :rtype: bool
        """

        return self._heat_pump_reversal_on_cool

    @heat_pump_reversal_on_cool.setter
    def heat_pump_reversal_on_cool(self, heat_pump_reversal_on_cool):
        """
        Sets the heat_pump_reversal_on_cool attribute of this Settings
        instance.

        :param heat_pump_reversal_on_cool: The
        heat_pump_reversal_on_cool value to set for the
        heat_pump_reversal_on_cool attribute of this Settings instance.
        :type: bool
        """

        self._heat_pump_reversal_on_cool = heat_pump_reversal_on_cool

    @property
    def fan_control_required(self):
        """
        Gets the fan_control_required attribute of this Settings
        instance.

        :return: The value of the fan_control_required attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._fan_control_required

    @fan_control_required.setter
    def fan_control_required(self, fan_control_required):
        """
        Sets the fan_control_required attribute of this Settings
        instance.

        :param fan_control_required: The fan_control_required value to
        set for the fan_control_required attribute of this Settings
        instance.
        :type: bool
        """

        self._fan_control_required = fan_control_required

    @property
    def fan_min_on_time(self):
        """
        Gets the fan_min_on_time attribute of this Settings instance.

        :return: The value of the fan_min_on_time attribute of this
        Settings instance.
        :rtype: int
        """

        return self._fan_min_on_time

    @fan_min_on_time.setter
    def fan_min_on_time(self, fan_min_on_time):
        """
        Sets the fan_min_on_time attribute of this Settings instance.

        :param fan_min_on_time: The fan_min_on_time value to set for the
        fan_min_on_time attribute of this Settings instance.
        :type: int
        """

        self._fan_min_on_time = fan_min_on_time

    @property
    def heat_cool_min_delta(self):
        """
        Gets the heat_cool_min_delta attribute of this Settings
        instance.

        :return: The value of the heat_cool_min_delta attribute of this
        Settings instance.
        :rtype: int
        """

        return self._heat_cool_min_delta

    @heat_cool_min_delta.setter
    def heat_cool_min_delta(self, heat_cool_min_delta):
        """
        Sets the heat_cool_min_delta attribute of this Settings
        instance.

        :param heat_cool_min_delta: The heat_cool_min_delta value to set
        for the heat_cool_min_delta attribute of this Settings instance.
        :type: int
        """

        self._heat_cool_min_delta = heat_cool_min_delta

    @property
    def temp_correction(self):
        """
        Gets the temp_correction attribute of this Settings instance.

        :return: The value of the temp_correction attribute of this
        Settings instance.
        :rtype: int
        """

        return self._temp_correction

    @temp_correction.setter
    def temp_correction(self, temp_correction):
        """
        Sets the temp_correction attribute of this Settings instance.

        :param temp_correction: The temp_correction value to set for the
        temp_correction attribute of this Settings instance.
        :type: int
        """

        self._temp_correction = temp_correction

    @property
    def hold_action(self):
        """
        Gets the hold_action attribute of this Settings instance.

        :return: The value of the hold_action attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._hold_action

    @hold_action.setter
    def hold_action(self, hold_action):
        """
        Sets the hold_action attribute of this Settings instance.

        :param hold_action: The hold_action value to set for the
        hold_action attribute of this Settings instance.
        :type: six.text_type
        """

        self._hold_action = hold_action

    @property
    def heat_pump_ground_water(self):
        """
        Gets the heat_pump_ground_water attribute of this Settings
        instance.

        :return: The value of the heat_pump_ground_water attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._heat_pump_ground_water

    @property
    def has_electric(self):
        """
        Gets the has_electric attribute of this Settings instance.

        :return: The value of the has_electric attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._has_electric

    @property
    def has_dehumidifier(self):
        """
        Gets the has_dehumidifier attribute of this Settings instance.

        :return: The value of the has_dehumidifier attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._has_dehumidifier

    @property
    def dehumidifier_mode(self):
        """
        Gets the dehumidifier_mode attribute of this Settings instance.

        :return: The value of the dehumidifier_mode attribute of this
        Settings instance.
        :rtype: six.text_type
        """

        return self._dehumidifier_mode

    @dehumidifier_mode.setter
    def dehumidifier_mode(self, dehumidifier_mode):
        """
        Sets the dehumidifier_mode attribute of this Settings instance.

        :param dehumidifier_mode: The dehumidifier_mode value to set for
        the dehumidifier_mode attribute of this Settings instance.
        :type: six.text_type
        """

        self._dehumidifier_mode = dehumidifier_mode

    @property
    def dehumidifier_level(self):
        """
        Gets the dehumidifier_level attribute of this Settings instance.

        :return: The value of the dehumidifier_level attribute of this
        Settings instance.
        :rtype: int
        """

        return self._dehumidifier_level

    @dehumidifier_level.setter
    def dehumidifier_level(self, dehumidifier_level):
        """
        Sets the dehumidifier_level attribute of this Settings instance.

        :param dehumidifier_level: The dehumidifier_level value to set
        for the dehumidifier_level attribute of this Settings instance.
        :type: int
        """

        self._dehumidifier_level = dehumidifier_level

    @property
    def dehumidify_with_a_c(self):
        """
        Gets the dehumidify_with_a_c attribute of this Settings
        instance.

        :return: The value of the dehumidify_with_a_c attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._dehumidify_with_a_c

    @dehumidify_with_a_c.setter
    def dehumidify_with_a_c(self, dehumidify_with_a_c):
        """
        Sets the dehumidify_with_a_c attribute of this Settings
        instance.

        :param dehumidify_with_a_c: The dehumidify_with_a_c value to set
        for the dehumidify_with_a_c attribute of this Settings instance.
        :type: bool
        """

        self._dehumidify_with_a_c = dehumidify_with_a_c

    @property
    def dehumidify_overcool_offset(self):
        """
        Gets the dehumidify_overcool_offset attribute of this Settings
        instance.

        :return: The value of the dehumidify_overcool_offset attribute
        of this Settings instance.
        :rtype: int
        """

        return self._dehumidify_overcool_offset

    @dehumidify_overcool_offset.setter
    def dehumidify_overcool_offset(self, dehumidify_overcool_offset):
        """
        Sets the dehumidify_overcool_offset attribute of this Settings
        instance.

        :param dehumidify_overcool_offset: The
        dehumidify_overcool_offset value to set for the
        dehumidify_overcool_offset attribute of this Settings instance.
        :type: int
        """

        self._dehumidify_overcool_offset = dehumidify_overcool_offset

    @property
    def auto_heat_cool_feature_enabled(self):
        """
        Gets the auto_heat_cool_feature_enabled attribute of this
        Settings instance.

        :return: The value of the auto_heat_cool_feature_enabled
        attribute of this Settings instance.
        :rtype: bool
        """

        return self._auto_heat_cool_feature_enabled

    @auto_heat_cool_feature_enabled.setter
    def auto_heat_cool_feature_enabled(self, auto_heat_cool_feature_enabled):
        """
        Sets the auto_heat_cool_feature_enabled attribute of this
        Settings instance.

        :param auto_heat_cool_feature_enabled: The
        auto_heat_cool_feature_enabled value to set for the
        auto_heat_cool_feature_enabled attribute of this Settings
        instance.
        :type: bool
        """

        self._auto_heat_cool_feature_enabled = auto_heat_cool_feature_enabled

    @property
    def wifi_offline_alert(self):
        """
        Gets the wifi_offline_alert attribute of this Settings instance.

        :return: The value of the wifi_offline_alert attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._wifi_offline_alert

    @wifi_offline_alert.setter
    def wifi_offline_alert(self, wifi_offline_alert):
        """
        Sets the wifi_offline_alert attribute of this Settings instance.

        :param wifi_offline_alert: The wifi_offline_alert value to set
        for the wifi_offline_alert attribute of this Settings instance.
        :type: bool
        """

        self._wifi_offline_alert = wifi_offline_alert

    @property
    def heat_min_temp(self):
        """
        Gets the heat_min_temp attribute of this Settings instance.

        :return: The value of the heat_min_temp attribute of this
        Settings instance.
        :rtype: int
        """

        return self._heat_min_temp

    @property
    def heat_max_temp(self):
        """
        Gets the heat_max_temp attribute of this Settings instance.

        :return: The value of the heat_max_temp attribute of this
        Settings instance.
        :rtype: int
        """

        return self._heat_max_temp

    @property
    def cool_min_temp(self):
        """
        Gets the cool_min_temp attribute of this Settings instance.

        :return: The value of the cool_min_temp attribute of this
        Settings instance.
        :rtype: int
        """

        return self._cool_min_temp

    @property
    def cool_max_temp(self):
        """
        Gets the cool_max_temp attribute of this Settings instance.

        :return: The value of the cool_max_temp attribute of this
        Settings instance.
        :rtype: int
        """

        return self._cool_max_temp

    @property
    def heat_range_high(self):
        """
        Gets the heat_range_high attribute of this Settings instance.

        :return: The value of the heat_range_high attribute of this
        Settings instance.
        :rtype: int
        """

        return self._heat_range_high

    @heat_range_high.setter
    def heat_range_high(self, heat_range_high):
        """
        Sets the heat_range_high attribute of this Settings instance.

        :param heat_range_high: The heat_range_high value to set for the
        heat_range_high attribute of this Settings instance.
        :type: int
        """

        self._heat_range_high = heat_range_high

    @property
    def heat_range_low(self):
        """
        Gets the heat_range_low attribute of this Settings instance.

        :return: The value of the heat_range_low attribute of this
        Settings instance.
        :rtype: int
        """

        return self._heat_range_low

    @heat_range_low.setter
    def heat_range_low(self, heat_range_low):
        """
        Sets the heat_range_low attribute of this Settings instance.

        :param heat_range_low: The heat_range_low value to set for the
        heat_range_low attribute of this Settings instance.
        :type: int
        """

        self._heat_range_low = heat_range_low

    @property
    def cool_range_high(self):
        """
        Gets the cool_range_high attribute of this Settings instance.

        :return: The value of the cool_range_high attribute of this
        Settings instance.
        :rtype: int
        """

        return self._cool_range_high

    @cool_range_high.setter
    def cool_range_high(self, cool_range_high):
        """
        Sets the cool_range_high attribute of this Settings instance.

        :param cool_range_high: The cool_range_high value to set for the
        cool_range_high attribute of this Settings instance.
        :type: int
        """

        self._cool_range_high = cool_range_high

    @property
    def cool_range_low(self):
        """
        Gets the cool_range_low attribute of this Settings instance.

        :return: The value of the cool_range_low attribute of this
        Settings instance.
        :rtype: int
        """

        return self._cool_range_low

    @cool_range_low.setter
    def cool_range_low(self, cool_range_low):
        """
        Sets the cool_range_low attribute of this Settings instance.

        :param cool_range_low: The cool_range_low value to set for the
        cool_range_low attribute of this Settings instance.
        :type: int
        """

        self._cool_range_low = cool_range_low

    @property
    def user_access_code(self):
        """
        Gets the user_access_code attribute of this Settings instance.

        :return: The value of the user_access_code attribute of this
        Settings instance.
        :rtype: six.text_type
        """

        return self._user_access_code

    @property
    def user_access_setting(self):
        """
        Gets the user_access_setting attribute of this Settings
        instance.

        :return: The value of the user_access_setting attribute of this
        Settings instance.
        :rtype: int
        """

        return self._user_access_setting

    @property
    def aux_runtime_alert(self):
        """
        Gets the aux_runtime_alert attribute of this Settings instance.

        :return: The value of the aux_runtime_alert attribute of this
        Settings instance.
        :rtype: int
        """

        return self._aux_runtime_alert

    @aux_runtime_alert.setter
    def aux_runtime_alert(self, aux_runtime_alert):
        """
        Sets the aux_runtime_alert attribute of this Settings instance.

        :param aux_runtime_alert: The aux_runtime_alert value to set for
        the aux_runtime_alert attribute of this Settings instance.
        :type: int
        """

        self._aux_runtime_alert = aux_runtime_alert

    @property
    def aux_outdoor_temp_alert(self):
        """
        Gets the aux_outdoor_temp_alert attribute of this Settings
        instance.

        :return: The value of the aux_outdoor_temp_alert attribute of
        this Settings instance.
        :rtype: int
        """

        return self._aux_outdoor_temp_alert

    @aux_outdoor_temp_alert.setter
    def aux_outdoor_temp_alert(self, aux_outdoor_temp_alert):
        """
        Sets the aux_outdoor_temp_alert attribute of this Settings
        instance.

        :param aux_outdoor_temp_alert: The aux_outdoor_temp_alert value
        to set for the aux_outdoor_temp_alert attribute of this Settings
        instance.
        :type: int
        """

        self._aux_outdoor_temp_alert = aux_outdoor_temp_alert

    @property
    def aux_max_outdoor_temp(self):
        """
        Gets the aux_max_outdoor_temp attribute of this Settings
        instance.

        :return: The value of the aux_max_outdoor_temp attribute of this
        Settings instance.
        :rtype: int
        """

        return self._aux_max_outdoor_temp

    @aux_max_outdoor_temp.setter
    def aux_max_outdoor_temp(self, aux_max_outdoor_temp):
        """
        Sets the aux_max_outdoor_temp attribute of this Settings
        instance.

        :param aux_max_outdoor_temp: The aux_max_outdoor_temp value to
        set for the aux_max_outdoor_temp attribute of this Settings
        instance.
        :type: int
        """

        self._aux_max_outdoor_temp = aux_max_outdoor_temp

    @property
    def aux_runtime_alert_notify(self):
        """
        Gets the aux_runtime_alert_notify attribute of this Settings
        instance.

        :return: The value of the aux_runtime_alert_notify attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._aux_runtime_alert_notify

    @aux_runtime_alert_notify.setter
    def aux_runtime_alert_notify(self, aux_runtime_alert_notify):
        """
        Sets the aux_runtime_alert_notify attribute of this Settings
        instance.

        :param aux_runtime_alert_notify: The aux_runtime_alert_notify
        value to set for the aux_runtime_alert_notify attribute of this
        Settings instance.
        :type: bool
        """

        self._aux_runtime_alert_notify = aux_runtime_alert_notify

    @property
    def aux_outdoor_temp_alert_notify(self):
        """
        Gets the aux_outdoor_temp_alert_notify attribute of this
        Settings instance.

        :return: The value of the aux_outdoor_temp_alert_notify
        attribute of this Settings instance.
        :rtype: bool
        """

        return self._aux_outdoor_temp_alert_notify

    @aux_outdoor_temp_alert_notify.setter
    def aux_outdoor_temp_alert_notify(self, aux_outdoor_temp_alert_notify):
        """
        Sets the aux_outdoor_temp_alert_notify attribute of this
        Settings instance.

        :param aux_outdoor_temp_alert_notify: The
        aux_outdoor_temp_alert_notify value to set for the
        aux_outdoor_temp_alert_notify attribute of this Settings
        instance.
        :type: bool
        """

        self._aux_outdoor_temp_alert_notify = aux_outdoor_temp_alert_notify

    @property
    def aux_runtime_alert_notify_technician(self):
        """
        Gets the aux_runtime_alert_notify_technician attribute of this
        Settings instance.

        :return: The value of the aux_runtime_alert_notify_technician
        attribute of this Settings instance.
        :rtype: bool
        """

        return self._aux_runtime_alert_notify_technician

    @aux_runtime_alert_notify_technician.setter
    def aux_runtime_alert_notify_technician(self, aux_runtime_alert_notify_technician):
        """
        Sets the aux_runtime_alert_notify_technician attribute of this
        Settings instance.

        :param aux_runtime_alert_notify_technician: The
        aux_runtime_alert_notify_technician value to set for the
        aux_runtime_alert_notify_technician attribute of this Settings
        instance.
        :type: bool
        """

        self._aux_runtime_alert_notify_technician = aux_runtime_alert_notify_technician

    @property
    def aux_outdoor_temp_alert_notify_technician(self):
        """
        Gets the aux_outdoor_temp_alert_notify_technician attribute of
        this Settings instance.

        :return: The value of the
        aux_outdoor_temp_alert_notify_technician attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._aux_outdoor_temp_alert_notify_technician

    @aux_outdoor_temp_alert_notify_technician.setter
    def aux_outdoor_temp_alert_notify_technician(
        self, aux_outdoor_temp_alert_notify_technician
    ):
        """
        Sets the aux_outdoor_temp_alert_notify_technician attribute of
        this Settings instance.

        :param aux_outdoor_temp_alert_notify_technician: The
        aux_outdoor_temp_alert_notify_technician value to set for the
        aux_outdoor_temp_alert_notify_technician attribute of this
        Settings instance.
        :type: bool
        """

        self._aux_outdoor_temp_alert_notify_technician = (
            aux_outdoor_temp_alert_notify_technician
        )

    @property
    def disable_pre_heating(self):
        """
        Gets the disable_pre_heating attribute of this Settings
        instance.

        :return: The value of the disable_pre_heating attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._disable_pre_heating

    @disable_pre_heating.setter
    def disable_pre_heating(self, disable_pre_heating):
        """
        Sets the disable_pre_heating attribute of this Settings
        instance.

        :param disable_pre_heating: The disable_pre_heating value to set
        for the disable_pre_heating attribute of this Settings instance.
        :type: bool
        """

        self._disable_pre_heating = disable_pre_heating

    @property
    def disable_pre_cooling(self):
        """
        Gets the disable_pre_cooling attribute of this Settings
        instance.

        :return: The value of the disable_pre_cooling attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._disable_pre_cooling

    @disable_pre_cooling.setter
    def disable_pre_cooling(self, disable_pre_cooling):
        """
        Sets the disable_pre_cooling attribute of this Settings
        instance.

        :param disable_pre_cooling: The disable_pre_cooling value to set
        for the disable_pre_cooling attribute of this Settings instance.
        :type: bool
        """

        self._disable_pre_cooling = disable_pre_cooling

    @property
    def installer_code_required(self):
        """
        Gets the installer_code_required attribute of this Settings
        instance.

        :return: The value of the installer_code_required attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._installer_code_required

    @installer_code_required.setter
    def installer_code_required(self, installer_code_required):
        """
        Sets the installer_code_required attribute of this Settings
        instance.

        :param installer_code_required: The installer_code_required
        value to set for the installer_code_required attribute of this
        Settings instance.
        :type: bool
        """

        self._installer_code_required = installer_code_required

    @property
    def dr_accept(self):
        """
        Gets the dr_accept attribute of this Settings instance.

        :return: The value of the dr_accept attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._dr_accept

    @dr_accept.setter
    def dr_accept(self, dr_accept):
        """
        Sets the dr_accept attribute of this Settings instance.

        :param dr_accept: The dr_accept value to set for the dr_accept
        attribute of this Settings instance.
        :type: six.text_type
        """

        self._dr_accept = dr_accept

    @property
    def is_rental_property(self):
        """
        Gets the is_rental_property attribute of this Settings instance.

        :return: The value of the is_rental_property attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._is_rental_property

    @is_rental_property.setter
    def is_rental_property(self, is_rental_property):
        """
        Sets the is_rental_property attribute of this Settings instance.

        :param is_rental_property: The is_rental_property value to set
        for the is_rental_property attribute of this Settings instance.
        :type: bool
        """

        self._is_rental_property = is_rental_property

    @property
    def use_zone_controller(self):
        """
        Gets the use_zone_controller attribute of this Settings
        instance.

        :return: The value of the use_zone_controller attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._use_zone_controller

    @use_zone_controller.setter
    def use_zone_controller(self, use_zone_controller):
        """
        Sets the use_zone_controller attribute of this Settings
        instance.

        :param use_zone_controller: The use_zone_controller value to set
        for the use_zone_controller attribute of this Settings instance.
        :type: bool
        """

        self._use_zone_controller = use_zone_controller

    @property
    def random_start_delay_cool(self):
        """
        Gets the random_start_delay_cool attribute of this Settings
        instance.

        :return: The value of the random_start_delay_cool attribute of
        this Settings instance.
        :rtype: int
        """

        return self._random_start_delay_cool

    @random_start_delay_cool.setter
    def random_start_delay_cool(self, random_start_delay_cool):
        """
        Sets the random_start_delay_cool attribute of this Settings
        instance.

        :param random_start_delay_cool: The random_start_delay_cool
        value to set for the random_start_delay_cool attribute of this
        Settings instance.
        :type: int
        """

        self._random_start_delay_cool = random_start_delay_cool

    @property
    def random_start_delay_heat(self):
        """
        Gets the random_start_delay_heat attribute of this Settings
        instance.

        :return: The value of the random_start_delay_heat attribute of
        this Settings instance.
        :rtype: int
        """

        return self._random_start_delay_heat

    @random_start_delay_heat.setter
    def random_start_delay_heat(self, random_start_delay_heat):
        """
        Sets the random_start_delay_heat attribute of this Settings
        instance.

        :param random_start_delay_heat: The random_start_delay_heat
        value to set for the random_start_delay_heat attribute of this
        Settings instance.
        :type: int
        """

        self._random_start_delay_heat = random_start_delay_heat

    @property
    def humidity_high_alert(self):
        """
        Gets the humidity_high_alert attribute of this Settings
        instance.

        :return: The value of the humidity_high_alert attribute of this
        Settings instance.
        :rtype: int
        """

        return self._humidity_high_alert

    @humidity_high_alert.setter
    def humidity_high_alert(self, humidity_high_alert):
        """
        Sets the humidity_high_alert attribute of this Settings
        instance.

        :param humidity_high_alert: The humidity_high_alert value to set
        for the humidity_high_alert attribute of this Settings instance.
        :type: int
        """

        self._humidity_high_alert = humidity_high_alert

    @property
    def humidity_low_alert(self):
        """
        Gets the humidity_low_alert attribute of this Settings instance.

        :return: The value of the humidity_low_alert attribute of this
        Settings instance.
        :rtype: int
        """

        return self._humidity_low_alert

    @humidity_low_alert.setter
    def humidity_low_alert(self, humidity_low_alert):
        """
        Sets the humidity_low_alert attribute of this Settings instance.

        :param humidity_low_alert: The humidity_low_alert value to set
        for the humidity_low_alert attribute of this Settings instance.
        :type: int
        """

        self._humidity_low_alert = humidity_low_alert

    @property
    def disable_heat_pump_alerts(self):
        """
        Gets the disable_heat_pump_alerts attribute of this Settings
        instance.

        :return: The value of the disable_heat_pump_alerts attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._disable_heat_pump_alerts

    @disable_heat_pump_alerts.setter
    def disable_heat_pump_alerts(self, disable_heat_pump_alerts):
        """
        Sets the disable_heat_pump_alerts attribute of this Settings
        instance.

        :param disable_heat_pump_alerts: The disable_heat_pump_alerts
        value to set for the disable_heat_pump_alerts attribute of this
        Settings instance.
        :type: bool
        """

        self._disable_heat_pump_alerts = disable_heat_pump_alerts

    @property
    def disable_alerts_on_idt(self):
        """
        Gets the disable_alerts_on_idt attribute of this Settings
        instance.

        :return: The value of the disable_alerts_on_idt attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._disable_alerts_on_idt

    @disable_alerts_on_idt.setter
    def disable_alerts_on_idt(self, disable_alerts_on_idt):
        """
        Sets the disable_alerts_on_idt attribute of this Settings
        instance.

        :param disable_alerts_on_idt: The disable_alerts_on_idt value to
        set for the disable_alerts_on_idt attribute of this Settings
        instance.
        :type: bool
        """

        self._disable_alerts_on_idt = disable_alerts_on_idt

    @property
    def humidity_alert_notify(self):
        """
        Gets the humidity_alert_notify attribute of this Settings
        instance.

        :return: The value of the humidity_alert_notify attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._humidity_alert_notify

    @humidity_alert_notify.setter
    def humidity_alert_notify(self, humidity_alert_notify):
        """
        Sets the humidity_alert_notify attribute of this Settings
        instance.

        :param humidity_alert_notify: The humidity_alert_notify value to
        set for the humidity_alert_notify attribute of this Settings
        instance.
        :type: bool
        """

        self._humidity_alert_notify = humidity_alert_notify

    @property
    def humidity_alert_notify_technician(self):
        """
        Gets the humidity_alert_notify_technician attribute of this
        Settings instance.

        :return: The value of the humidity_alert_notify_technician
        attribute of this Settings instance.
        :rtype: bool
        """

        return self._humidity_alert_notify_technician

    @humidity_alert_notify_technician.setter
    def humidity_alert_notify_technician(self, humidity_alert_notify_technician):
        """
        Sets the humidity_alert_notify_technician attribute of this
        Settings instance.

        :param humidity_alert_notify_technician: The
        humidity_alert_notify_technician value to set for the
        humidity_alert_notify_technician attribute of this Settings
        instance.
        :type: bool
        """

        self._humidity_alert_notify_technician = humidity_alert_notify_technician

    @property
    def temp_alert_notify(self):
        """
        Gets the temp_alert_notify attribute of this Settings instance.

        :return: The value of the temp_alert_notify attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._temp_alert_notify

    @temp_alert_notify.setter
    def temp_alert_notify(self, temp_alert_notify):
        """
        Sets the temp_alert_notify attribute of this Settings instance.

        :param temp_alert_notify: The temp_alert_notify value to set for
        the temp_alert_notify attribute of this Settings instance.
        :type: bool
        """

        self._temp_alert_notify = temp_alert_notify

    @property
    def temp_alert_notify_technician(self):
        """
        Gets the temp_alert_notify_technician attribute of this Settings
        instance.

        :return: The value of the temp_alert_notify_technician attribute
        of this Settings instance.
        :rtype: bool
        """

        return self._temp_alert_notify_technician

    @temp_alert_notify_technician.setter
    def temp_alert_notify_technician(self, temp_alert_notify_technician):
        """
        Sets the temp_alert_notify_technician attribute of this Settings
        instance.

        :param temp_alert_notify_technician: The
        temp_alert_notify_technician value to set for the
        temp_alert_notify_technician attribute of this Settings
        instance.
        :type: bool
        """

        self._temp_alert_notify_technician = temp_alert_notify_technician

    @property
    def monthly_electricity_bill_limit(self):
        """
        Gets the monthly_electricity_bill_limit attribute of this
        Settings instance.

        :return: The value of the monthly_electricity_bill_limit
        attribute of this Settings instance.
        :rtype: int
        """

        return self._monthly_electricity_bill_limit

    @monthly_electricity_bill_limit.setter
    def monthly_electricity_bill_limit(self, monthly_electricity_bill_limit):
        """
        Sets the monthly_electricity_bill_limit attribute of this
        Settings instance.

        :param monthly_electricity_bill_limit: The
        monthly_electricity_bill_limit value to set for the
        monthly_electricity_bill_limit attribute of this Settings
        instance.
        :type: int
        """

        self._monthly_electricity_bill_limit = monthly_electricity_bill_limit

    @property
    def enable_electricity_bill_alert(self):
        """
        Gets the enable_electricity_bill_alert attribute of this
        Settings instance.

        :return: The value of the enable_electricity_bill_alert
        attribute of this Settings instance.
        :rtype: bool
        """

        return self._enable_electricity_bill_alert

    @enable_electricity_bill_alert.setter
    def enable_electricity_bill_alert(self, enable_electricity_bill_alert):
        """
        Sets the enable_electricity_bill_alert attribute of this
        Settings instance.

        :param enable_electricity_bill_alert: The
        enable_electricity_bill_alert value to set for the
        enable_electricity_bill_alert attribute of this Settings
        instance.
        :type: bool
        """

        self._enable_electricity_bill_alert = enable_electricity_bill_alert

    @property
    def enable_projected_electricity_bill_alert(self):
        """
        Gets the enable_projected_electricity_bill_alert attribute of
        this Settings instance.

        :return: The value of the
        enable_projected_electricity_bill_alert attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._enable_projected_electricity_bill_alert

    @enable_projected_electricity_bill_alert.setter
    def enable_projected_electricity_bill_alert(
        self, enable_projected_electricity_bill_alert
    ):
        """
        Sets the enable_projected_electricity_bill_alert attribute of
        this Settings instance.

        :param enable_projected_electricity_bill_alert: The
        enable_projected_electricity_bill_alert value to set for the
        enable_projected_electricity_bill_alert attribute of this
        Settings instance.
        :type: bool
        """

        self._enable_projected_electricity_bill_alert = (
            enable_projected_electricity_bill_alert
        )

    @property
    def electricity_billing_day_of_month(self):
        """
        Gets the electricity_billing_day_of_month attribute of this
        Settings instance.

        :return: The value of the electricity_billing_day_of_month
        attribute of this Settings instance.
        :rtype: int
        """

        return self._electricity_billing_day_of_month

    @electricity_billing_day_of_month.setter
    def electricity_billing_day_of_month(self, electricity_billing_day_of_month):
        """
        Sets the electricity_billing_day_of_month attribute of this
        Settings instance.

        :param electricity_billing_day_of_month: The
        electricity_billing_day_of_month value to set for the
        electricity_billing_day_of_month attribute of this Settings
        instance.
        :type: int
        """

        self._electricity_billing_day_of_month = electricity_billing_day_of_month

    @property
    def electricity_bill_cycle_months(self):
        """
        Gets the electricity_bill_cycle_months attribute of this
        Settings instance.

        :return: The value of the electricity_bill_cycle_months
        attribute of this Settings instance.
        :rtype: int
        """

        return self._electricity_bill_cycle_months

    @electricity_bill_cycle_months.setter
    def electricity_bill_cycle_months(self, electricity_bill_cycle_months):
        """
        Sets the electricity_bill_cycle_months attribute of this
        Settings instance.

        :param electricity_bill_cycle_months: The
        electricity_bill_cycle_months value to set for the
        electricity_bill_cycle_months attribute of this Settings
        instance.
        :type: int
        """

        self._electricity_bill_cycle_months = electricity_bill_cycle_months

    @property
    def electricity_bill_start_month(self):
        """
        Gets the electricity_bill_start_month attribute of this Settings
        instance.

        :return: The value of the electricity_bill_start_month attribute
        of this Settings instance.
        :rtype: int
        """

        return self._electricity_bill_start_month

    @electricity_bill_start_month.setter
    def electricity_bill_start_month(self, electricity_bill_start_month):
        """
        Sets the electricity_bill_start_month attribute of this Settings
        instance.

        :param electricity_bill_start_month: The
        electricity_bill_start_month value to set for the
        electricity_bill_start_month attribute of this Settings
        instance.
        :type: int
        """

        self._electricity_bill_start_month = electricity_bill_start_month

    @property
    def ventilator_min_on_time_home(self):
        """
        Gets the ventilator_min_on_time_home attribute of this Settings
        instance.

        :return: The value of the ventilator_min_on_time_home attribute
        of this Settings instance.
        :rtype: int
        """

        return self._ventilator_min_on_time_home

    @ventilator_min_on_time_home.setter
    def ventilator_min_on_time_home(self, ventilator_min_on_time_home):
        """
        Sets the ventilator_min_on_time_home attribute of this Settings
        instance.

        :param ventilator_min_on_time_home: The
        ventilator_min_on_time_home value to set for the
        ventilator_min_on_time_home attribute of this Settings instance.
        :type: int
        """

        self._ventilator_min_on_time_home = ventilator_min_on_time_home

    @property
    def ventilator_min_on_time_away(self):
        """
        Gets the ventilator_min_on_time_away attribute of this Settings
        instance.

        :return: The value of the ventilator_min_on_time_away attribute
        of this Settings instance.
        :rtype: int
        """

        return self._ventilator_min_on_time_away

    @ventilator_min_on_time_away.setter
    def ventilator_min_on_time_away(self, ventilator_min_on_time_away):
        """
        Sets the ventilator_min_on_time_away attribute of this Settings
        instance.

        :param ventilator_min_on_time_away: The
        ventilator_min_on_time_away value to set for the
        ventilator_min_on_time_away attribute of this Settings instance.
        :type: int
        """

        self._ventilator_min_on_time_away = ventilator_min_on_time_away

    @property
    def backlight_off_during_sleep(self):
        """
        Gets the backlight_off_during_sleep attribute of this Settings
        instance.

        :return: The value of the backlight_off_during_sleep attribute
        of this Settings instance.
        :rtype: bool
        """

        return self._backlight_off_during_sleep

    @backlight_off_during_sleep.setter
    def backlight_off_during_sleep(self, backlight_off_during_sleep):
        """
        Sets the backlight_off_during_sleep attribute of this Settings
        instance.

        :param backlight_off_during_sleep: The
        backlight_off_during_sleep value to set for the
        backlight_off_during_sleep attribute of this Settings instance.
        :type: bool
        """

        self._backlight_off_during_sleep = backlight_off_during_sleep

    @property
    def auto_away(self):
        """
        Gets the auto_away attribute of this Settings instance.

        :return: The value of the auto_away attribute of this Settings
        instance.
        :rtype: bool
        """

        return self._auto_away

    @auto_away.setter
    def auto_away(self, auto_away):
        """
        Sets the auto_away attribute of this Settings instance.

        :param auto_away: The auto_away value to set for the auto_away
        attribute of this Settings instance.
        :type: bool
        """

        self._auto_away = auto_away

    @property
    def smart_circulation(self):
        """
        Gets the smart_circulation attribute of this Settings instance.

        :return: The value of the smart_circulation attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._smart_circulation

    @smart_circulation.setter
    def smart_circulation(self, smart_circulation):
        """
        Sets the smart_circulation attribute of this Settings instance.

        :param smart_circulation: The smart_circulation value to set for
        the smart_circulation attribute of this Settings instance.
        :type: bool
        """

        self._smart_circulation = smart_circulation

    @property
    def follow_me_comfort(self):
        """
        Gets the follow_me_comfort attribute of this Settings instance.

        :return: The value of the follow_me_comfort attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._follow_me_comfort

    @follow_me_comfort.setter
    def follow_me_comfort(self, follow_me_comfort):
        """
        Sets the follow_me_comfort attribute of this Settings instance.

        :param follow_me_comfort: The follow_me_comfort value to set for
        the follow_me_comfort attribute of this Settings instance.
        :type: bool
        """

        self._follow_me_comfort = follow_me_comfort

    @property
    def ventilator_type(self):
        """
        Gets the ventilator_type attribute of this Settings instance.

        :return: The value of the ventilator_type attribute of this
        Settings instance.
        :rtype: six.text_type
        """

        return self._ventilator_type

    @property
    def is_ventilator_timer_on(self):
        """
        Gets the is_ventilator_timer_on attribute of this Settings
        instance.

        :return: The value of the is_ventilator_timer_on attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._is_ventilator_timer_on

    @is_ventilator_timer_on.setter
    def is_ventilator_timer_on(self, is_ventilator_timer_on):
        """
        Sets the is_ventilator_timer_on attribute of this Settings
        instance.

        :param is_ventilator_timer_on: The is_ventilator_timer_on value
        to set for the is_ventilator_timer_on attribute of this Settings
        instance.
        :type: bool
        """

        self._is_ventilator_timer_on = is_ventilator_timer_on

    @property
    def ventilator_off_date_time(self):
        """
        Gets the ventilator_off_date_time attribute of this Settings
        instance.

        :return: The value of the ventilator_off_date_time attribute of
        this Settings instance.
        :rtype: six.text_type
        """

        return self._ventilator_off_date_time

    @property
    def has_u_v_filter(self):
        """
        Gets the has_u_v_filter attribute of this Settings instance.

        :return: The value of the has_u_v_filter attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._has_u_v_filter

    @has_u_v_filter.setter
    def has_u_v_filter(self, has_u_v_filter):
        """
        Sets the has_u_v_filter attribute of this Settings instance.

        :param has_u_v_filter: The has_u_v_filter value to set for the
        has_u_v_filter attribute of this Settings instance.
        :type: bool
        """

        self._has_u_v_filter = has_u_v_filter

    @property
    def cooling_lockout(self):
        """
        Gets the cooling_lockout attribute of this Settings instance.

        :return: The value of the cooling_lockout attribute of this
        Settings instance.
        :rtype: bool
        """

        return self._cooling_lockout

    @cooling_lockout.setter
    def cooling_lockout(self, cooling_lockout):
        """
        Sets the cooling_lockout attribute of this Settings instance.

        :param cooling_lockout: The cooling_lockout value to set for the
        cooling_lockout attribute of this Settings instance.
        :type: bool
        """

        self._cooling_lockout = cooling_lockout

    @property
    def ventilator_free_cooling(self):
        """
        Gets the ventilator_free_cooling attribute of this Settings
        instance.

        :return: The value of the ventilator_free_cooling attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._ventilator_free_cooling

    @ventilator_free_cooling.setter
    def ventilator_free_cooling(self, ventilator_free_cooling):
        """
        Sets the ventilator_free_cooling attribute of this Settings
        instance.

        :param ventilator_free_cooling: The ventilator_free_cooling
        value to set for the ventilator_free_cooling attribute of this
        Settings instance.
        :type: bool
        """

        self._ventilator_free_cooling = ventilator_free_cooling

    @property
    def dehumidify_when_heating(self):
        """
        Gets the dehumidify_when_heating attribute of this Settings
        instance.

        :return: The value of the dehumidify_when_heating attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._dehumidify_when_heating

    @dehumidify_when_heating.setter
    def dehumidify_when_heating(self, dehumidify_when_heating):
        """
        Sets the dehumidify_when_heating attribute of this Settings
        instance.

        :param dehumidify_when_heating: The dehumidify_when_heating
        value to set for the dehumidify_when_heating attribute of this
        Settings instance.
        :type: bool
        """

        self._dehumidify_when_heating = dehumidify_when_heating

    @property
    def ventilator_dehumidify(self):
        """
        Gets the ventilator_dehumidify attribute of this Settings
        instance.

        :return: The value of the ventilator_dehumidify attribute of
        this Settings instance.
        :rtype: bool
        """

        return self._ventilator_dehumidify

    @ventilator_dehumidify.setter
    def ventilator_dehumidify(self, ventilator_dehumidify):
        """
        Sets the ventilator_dehumidify attribute of this Settings
        instance.

        :param ventilator_dehumidify: The ventilator_dehumidify value to
        set for the ventilator_dehumidify attribute of this Settings
        instance.
        :type: bool
        """

        self._ventilator_dehumidify = ventilator_dehumidify

    @property
    def group_ref(self):
        """
        Gets the group_ref attribute of this Settings instance.

        :return: The value of the group_ref attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._group_ref

    @group_ref.setter
    def group_ref(self, group_ref):
        """
        Sets the group_ref attribute of this Settings instance.

        :param group_ref: The group_ref value to set for the group_ref
        attribute of this Settings instance.
        :type: six.text_type
        """

        self._group_ref = group_ref

    @property
    def group_name(self):
        """
        Gets the group_name attribute of this Settings instance.

        :return: The value of the group_name attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name attribute of this Settings instance.

        :param group_name: The group_name value to set for the
        group_name attribute of this Settings instance.
        :type: six.text_type
        """

        self._group_name = group_name

    @property
    def group_setting(self):
        """
        Gets the group_setting attribute of this Settings instance.

        :return: The value of the group_setting attribute of this
        Settings instance.
        :rtype: int
        """

        return self._group_setting

    @group_setting.setter
    def group_setting(self, group_setting):
        """
        Sets the group_setting attribute of this Settings instance.

        :param group_setting: The group_setting value to set for the
        group_setting attribute of this Settings instance.
        :type: int
        """

        self._group_setting = group_setting

    @property
    def fan_speed(self):
        """
        Gets the fan_speed attribute of this Settings instance.

        :return: The value of the fan_speed attribute of this Settings
        instance.
        :rtype: six.text_type
        """

        return self._fan_speed

    @fan_speed.setter
    def fan_speed(self, fan_speed):
        """
        Sets the fan_speed attribute of this Settings instance.

        :param fan_speed: The fan_speed value to set for the fan_speed
        attribute of this Settings instance.
        :type: six.text_type
        """

        self._fan_speed = fan_speed
