"""
This module is home to the HierarchySet class
"""
from pyecobee.ecobee_object import EcobeeObject


class HierarchySet(EcobeeObject):
    """
    This class has been auto generated by scraping
    https://www.ecobee.com/home/developer/api/documentation/v1/objects/HierarchySet.shtml

    Attribute names have been generated by converting ecobee property
    names from camelCase to snake_case.

    A getter property has been generated for each attribute.
    A setter property has been generated for each attribute whose value
    of READONLY is "no".

    An __init__ argument without a default value has been generated if
    the value of REQUIRED is "yes".
    An __init__ argument with a default value of None has been generated
    if the value of REQUIRED is "no".
    """

    __slots__ = ['_set_name', '_set_path', '_children', '_privileges', '_thermostats']

    attribute_name_map = {
        'set_name': 'setName',
        'setName': 'set_name',
        'set_path': 'setPath',
        'setPath': 'set_path',
        'children': 'children',
        'privileges': 'privileges',
        'thermostats': 'thermostats',
    }

    attribute_type_map = {
        'set_name': 'six.text_type',
        'set_path': 'six.text_type',
        'children': 'List[HierarchySet]',
        'privileges': 'List[HierarchyPrivilege]',
        'thermostats': 'List[six.text_type]',
    }

    def __init__(
        self, set_name, set_path=None, children=None, privileges=None, thermostats=None
    ):
        """
        Construct a HierarchySet instance
        """
        self._set_name = set_name
        self._set_path = set_path
        self._children = children
        self._privileges = privileges
        self._thermostats = thermostats

    @property
    def set_name(self):
        """
        Gets the set_name attribute of this HierarchySet instance.

        :return: The value of the set_name attribute of this
        HierarchySet instance.
        :rtype: six.text_type
        """

        return self._set_name

    @set_name.setter
    def set_name(self, set_name):
        """
        Sets the set_name attribute of this HierarchySet instance.

        :param set_name: The set_name value to set for the set_name
        attribute of this HierarchySet instance.
        :type: six.text_type
        """

        self._set_name = set_name

    @property
    def set_path(self):
        """
        Gets the set_path attribute of this HierarchySet instance.

        :return: The value of the set_path attribute of this
        HierarchySet instance.
        :rtype: six.text_type
        """

        return self._set_path

    @property
    def children(self):
        """
        Gets the children attribute of this HierarchySet instance.

        :return: The value of the children attribute of this
        HierarchySet instance.
        :rtype: List[HierarchySet]
        """

        return self._children

    @property
    def privileges(self):
        """
        Gets the privileges attribute of this HierarchySet instance.

        :return: The value of the privileges attribute of this
        HierarchySet instance.
        :rtype: List[HierarchyPrivilege]
        """

        return self._privileges

    @property
    def thermostats(self):
        """
        Gets the thermostats attribute of this HierarchySet instance.

        :return: The value of the thermostats attribute of this
        HierarchySet instance.
        :rtype: List[six.text_type]
        """

        return self._thermostats
