'''
Project:    Search Exploits by CVE-ID Utility
Author:     Nimish Shinde
Email:      nimish.v.shinde60@gmail.com
Release:    1.0 (01/17/2019)
Reqs:       * Python 3.x
            * requests
Disclaimer:
    This script is a enhancement on cvesearch package by Sujit Ghoshal
    (https://pypi.org/project/cvesearch/) which returns exploit, cve-id data.
    Please, use this tool at your own risk! The author
    shall not be responsible for any misuse done through usage of this
    tool. Any actions and or activities related to this tool is solely
    your responsibility. The misuse of this tool might result in criminal
    charges brought against the persons in question. Please pay respect
    to the third-party website owners and bandwidth, who makes these type
    of structured information available easily to the public.
'''


from requests import get
from json import loads


def find_exploits(cve):
    '''
    Find the available information for a particular CVE from Metasploit,
    ExploitDB, Misc References and Bugtraq etc.
    '''

    host = "http://cve.circl.lu/api/cve/CVE-"
    agent = {
        "User-Agent":
            "Mozilla/5.0 (X11; Linux x86_64; rv:58.0)Gecko/20100101 Firefox/58.0"
    }

    try:
        # Perform web requests for via API endpoint
        http_obj = get(host + cve, headers=agent, timeout=4)
    except Exception as e:
        print(e)
        return None

    if http_obj.json():
        # dictionary object containing cve description and available exploits
        result = {'links': []}

        json_obj = loads(http_obj.text.encode('ascii', 'utf-8'))
        ref_ps = set()
        ref_edb = set()
        ref_misc = set()
        ref_bid = set()
        ref_msf = {}

        # cve publishing date and cve description
        result['description'] = json_obj['summary']
        result['date'] = json_obj['Published'][:10]

        # Enumerate sources as per reference type

        # Packetstorm
        if 'packetstorm' in json_obj:
            for idx_ps in json_obj['packetstorm']:
                for each_ref in idx_ps['source']:
                    ref_ps.add(idx_ps['source'])
            for link in sorted(ref_ps):
                result['links'].append(link)


        # Exploit-DB
        if 'exploit-db' in json_obj:
            for idx_edb in json_obj['exploit-db']:
                if 'source' in idx_edb:
                    ref_edb.add(idx_edb['source'])
                if 'source' not in idx_edb and 'id' in idx_edb:
                    ref_edb.add(idx_edb['id'])
                else:
                    pass
            if len(ref_edb) > 0:
                for link in sorted(ref_edb):
                    result['links'].append(link)


        # MetaSploit
        if 'metasploit' in json_obj:
            for idx_msf in json_obj['metasploit']:
                if 'source' in idx_msf:
                    ref_msf[idx_msf['id']] = idx_msf['source']
                else:
                    pass
            if len(ref_msf) > 0:
                for id, link in ref_msf.items():
                    result['links'].append(link)


        # Microsoft Bulletin
        if 'msbulletin' in json_obj:
            for idx_msb in json_obj['msbulletin']:
                if 'bulletin_id' not in idx_msb and 'cves_url' in idx_msb:
                    result['links'].append(idx_msb['cves_url'])
                else:
                    pass

    
        # Misc. References
        if 'references' in json_obj:
            for idx_misc in json_obj['references']:
                ref_misc.add(idx_misc)
            if len(ref_misc) > 0:
                for link in sorted(ref_misc):
                    result['links'].append(link)

        return result

    return None
