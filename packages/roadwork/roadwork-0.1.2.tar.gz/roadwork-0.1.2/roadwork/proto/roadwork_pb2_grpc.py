# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import roadwork.proto.roadwork_pb2 as roadwork__pb2


class RoadworkStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/roadwork.Roadwork/Create',
                request_serializer=roadwork__pb2.CreateRequest.SerializeToString,
                response_deserializer=roadwork__pb2.CreateResponse.FromString,
                )
        self.Step = channel.unary_unary(
                '/roadwork.Roadwork/Step',
                request_serializer=roadwork__pb2.StepRequest.SerializeToString,
                response_deserializer=roadwork__pb2.StepResponse.FromString,
                )
        self.Reset = channel.unary_unary(
                '/roadwork.Roadwork/Reset',
                request_serializer=roadwork__pb2.ResetRequest.SerializeToString,
                response_deserializer=roadwork__pb2.ResetResponse.FromString,
                )
        self.Render = channel.unary_unary(
                '/roadwork.Roadwork/Render',
                request_serializer=roadwork__pb2.RenderRequest.SerializeToString,
                response_deserializer=roadwork__pb2.RenderResponse.FromString,
                )
        self.Close = channel.unary_unary(
                '/roadwork.Roadwork/Close',
                request_serializer=roadwork__pb2.CloseRequest.SerializeToString,
                response_deserializer=roadwork__pb2.CloseResponse.FromString,
                )
        self.ActionSpaceSample = channel.unary_unary(
                '/roadwork.Roadwork/ActionSpaceSample',
                request_serializer=roadwork__pb2.ActionSpaceSampleRequest.SerializeToString,
                response_deserializer=roadwork__pb2.ActionSpaceSampleResponse.FromString,
                )
        self.ActionSpaceInfo = channel.unary_unary(
                '/roadwork.Roadwork/ActionSpaceInfo',
                request_serializer=roadwork__pb2.ActionSpaceInfoRequest.SerializeToString,
                response_deserializer=roadwork__pb2.ActionSpaceInfoResponse.FromString,
                )
        self.ObservationSpaceInfo = channel.unary_unary(
                '/roadwork.Roadwork/ObservationSpaceInfo',
                request_serializer=roadwork__pb2.ObservationSpaceInfoRequest.SerializeToString,
                response_deserializer=roadwork__pb2.ObservationSpaceInfoResponse.FromString,
                )
        self.MonitorStart = channel.unary_unary(
                '/roadwork.Roadwork/MonitorStart',
                request_serializer=roadwork__pb2.BaseRequest.SerializeToString,
                response_deserializer=roadwork__pb2.BaseResponse.FromString,
                )
        self.MonitorStop = channel.unary_unary(
                '/roadwork.Roadwork/MonitorStop',
                request_serializer=roadwork__pb2.BaseRequest.SerializeToString,
                response_deserializer=roadwork__pb2.BaseResponse.FromString,
                )


class RoadworkServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Step(self, request, context):
        """Run one timestep of the environment's dynamics. When end of
        episode is reached, you are responsible for calling `reset()`
        to reset this environment's state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Resets the state of the environment and returns an initial observation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Render(self, request, context):
        """Renders the environment.
        The set of supported modes varies per environment. (And some
        environments do not support rendering at all.) By convention,
        if mode is:
        - human: render to the current display or terminal and
        return nothing. Usually for human consumption.
        - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
        representing RGB values for an x-by-y pixel image, suitable
        for turning into a video.
        - ansi: Return a string (str) or StringIO.StringIO containing a
        terminal-style text representation. The text can include newlines
        and ANSI escape sequences (e.g. for colors).
        Note:
        Make sure that your class's metadata 'render.modes' key includes
        the list of supported modes. It's recommended to call super()
        in implementations to use the functionality of this method.
        Args:
        mode (str): the mode to render with
        Example:
        class MyEnv(Env):
        metadata = {'render.modes': ['human', 'rgb_array']}
        def render(self, mode='human'):
        if mode == 'rgb_array':
        return np.array(...) # return RGB frame suitable for video
        elif mode == 'human':
        ... # pop up a window and render
        else:
        super(MyEnv, self).render(mode=mode) # just raise an exception
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Override close in your subclass to perform any necessary cleanup.
        Environments will automatically close() themselves when
        garbage collected or when the program exits.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActionSpaceSample(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActionSpaceInfo(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObservationSpaceInfo(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorStart(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorStop(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoadworkServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=roadwork__pb2.CreateRequest.FromString,
                    response_serializer=roadwork__pb2.CreateResponse.SerializeToString,
            ),
            'Step': grpc.unary_unary_rpc_method_handler(
                    servicer.Step,
                    request_deserializer=roadwork__pb2.StepRequest.FromString,
                    response_serializer=roadwork__pb2.StepResponse.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=roadwork__pb2.ResetRequest.FromString,
                    response_serializer=roadwork__pb2.ResetResponse.SerializeToString,
            ),
            'Render': grpc.unary_unary_rpc_method_handler(
                    servicer.Render,
                    request_deserializer=roadwork__pb2.RenderRequest.FromString,
                    response_serializer=roadwork__pb2.RenderResponse.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=roadwork__pb2.CloseRequest.FromString,
                    response_serializer=roadwork__pb2.CloseResponse.SerializeToString,
            ),
            'ActionSpaceSample': grpc.unary_unary_rpc_method_handler(
                    servicer.ActionSpaceSample,
                    request_deserializer=roadwork__pb2.ActionSpaceSampleRequest.FromString,
                    response_serializer=roadwork__pb2.ActionSpaceSampleResponse.SerializeToString,
            ),
            'ActionSpaceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ActionSpaceInfo,
                    request_deserializer=roadwork__pb2.ActionSpaceInfoRequest.FromString,
                    response_serializer=roadwork__pb2.ActionSpaceInfoResponse.SerializeToString,
            ),
            'ObservationSpaceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ObservationSpaceInfo,
                    request_deserializer=roadwork__pb2.ObservationSpaceInfoRequest.FromString,
                    response_serializer=roadwork__pb2.ObservationSpaceInfoResponse.SerializeToString,
            ),
            'MonitorStart': grpc.unary_unary_rpc_method_handler(
                    servicer.MonitorStart,
                    request_deserializer=roadwork__pb2.BaseRequest.FromString,
                    response_serializer=roadwork__pb2.BaseResponse.SerializeToString,
            ),
            'MonitorStop': grpc.unary_unary_rpc_method_handler(
                    servicer.MonitorStop,
                    request_deserializer=roadwork__pb2.BaseRequest.FromString,
                    response_serializer=roadwork__pb2.BaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'roadwork.Roadwork', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Roadwork(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/Create',
            roadwork__pb2.CreateRequest.SerializeToString,
            roadwork__pb2.CreateResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/Step',
            roadwork__pb2.StepRequest.SerializeToString,
            roadwork__pb2.StepResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/Reset',
            roadwork__pb2.ResetRequest.SerializeToString,
            roadwork__pb2.ResetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Render(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/Render',
            roadwork__pb2.RenderRequest.SerializeToString,
            roadwork__pb2.RenderResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/Close',
            roadwork__pb2.CloseRequest.SerializeToString,
            roadwork__pb2.CloseResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActionSpaceSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/ActionSpaceSample',
            roadwork__pb2.ActionSpaceSampleRequest.SerializeToString,
            roadwork__pb2.ActionSpaceSampleResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActionSpaceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/ActionSpaceInfo',
            roadwork__pb2.ActionSpaceInfoRequest.SerializeToString,
            roadwork__pb2.ActionSpaceInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObservationSpaceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/ObservationSpaceInfo',
            roadwork__pb2.ObservationSpaceInfoRequest.SerializeToString,
            roadwork__pb2.ObservationSpaceInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/MonitorStart',
            roadwork__pb2.BaseRequest.SerializeToString,
            roadwork__pb2.BaseResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/roadwork.Roadwork/MonitorStop',
            roadwork__pb2.BaseRequest.SerializeToString,
            roadwork__pb2.BaseResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
