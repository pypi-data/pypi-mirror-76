# coding: utf-8

"""
    Pure Storage FlashBlade REST 1.9 Python SDK

    Pure Storage FlashBlade REST 1.9 Python SDK, developed by [Pure Storage, Inc](http://www.purestorage.com/). Documentations can be found at [purity-fb.readthedocs.io](http://purity-fb.readthedocs.io/).

    OpenAPI spec version: 1.9
    Contact: info@purestorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LocationReference(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'resource_type': 'ResourceType',
        'location': 'Reference',
        'display_name': 'str',
        'is_local': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'resource_type': 'resource_type',
        'location': 'location',
        'display_name': 'display_name',
        'is_local': 'is_local'
    }

    def __init__(self, name=None, id=None, resource_type=None, location=None, display_name=None, is_local=None):
        """
        LocationReference - a model defined in Swagger
        """

        self._name = None
        self._id = None
        self._resource_type = None
        self._location = None
        self._display_name = None
        self._is_local = None

        if name is not None:
          self.name = name
        if id is not None:
          self.id = id
        if resource_type is not None:
          self.resource_type = resource_type
        if location is not None:
          self.location = location
        if display_name is not None:
          self.display_name = display_name
        if is_local is not None:
          self.is_local = is_local

    @property
    def name(self):
        """
        Gets the name of this LocationReference.

        :return: The name of this LocationReference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LocationReference.

        :param name: The name of this LocationReference.
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this LocationReference.

        :return: The id of this LocationReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LocationReference.

        :param id: The id of this LocationReference.
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """
        Gets the resource_type of this LocationReference.

        :return: The resource_type of this LocationReference.
        :rtype: ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """
        Sets the resource_type of this LocationReference.

        :param resource_type: The resource_type of this LocationReference.
        :type: ResourceType
        """

        self._resource_type = resource_type

    @property
    def location(self):
        """
        Gets the location of this LocationReference.
        A reference to the location where the object is defined.

        :return: The location of this LocationReference.
        :rtype: Reference
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this LocationReference.
        A reference to the location where the object is defined.

        :param location: The location of this LocationReference.
        :type: Reference
        """

        self._location = location

    @property
    def display_name(self):
        """
        Gets the display_name of this LocationReference.
        Full name of the source with remote array information. Response will be same as source for local file system snapshots.

        :return: The display_name of this LocationReference.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this LocationReference.
        Full name of the source with remote array information. Response will be same as source for local file system snapshots.

        :param display_name: The display_name of this LocationReference.
        :type: str
        """

        self._display_name = display_name

    @property
    def is_local(self):
        """
        Gets the is_local of this LocationReference.
        -> Is the location reference to the local array or somewhere remote?

        :return: The is_local of this LocationReference.
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """
        Sets the is_local of this LocationReference.
        -> Is the location reference to the local array or somewhere remote?

        :param is_local: The is_local of this LocationReference.
        :type: bool
        """

        self._is_local = is_local

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LocationReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
