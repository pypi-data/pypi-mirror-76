# Modified to replace the autoconf processed file nrnmech_makefile.in

# Mechanisms version are by default 0.0, but should be overriden
MECH_NAME =
MECH_VERSION = 0.0
MODS_PATH = .
OUTPUT = x86_64
DESTDIR =
UserINCFLAGS =
UserLDFLAGS =

# install dirs
bindir := ${ROOT}/bin
libdir := ${ROOT}/lib
incdir := ${ROOT}/include
datadir:= ${ROOT}/share/nrn
datadir_lib := ${ROOT}/share/nrn/lib

# Additional variables set in CMAKE usable here
# - @NRN_COMPILE_DEFS
# - @NRN_LINK_DEFS
LDFLAGS = $(LINKFLAGS) $(UserLDFLAGS)  -lreadline
NRNLIB_FLAGS = -L$(libdir) -lnrniv
OS_NAME := $(shell uname)
_cm =,

# We rebuild the include dirs since a lot of stuff changes place
INCLUDES = -I. -I.. $(INCFLAGS) $(UserINCFLAGS) -I$(incdir)
INCLUDES += $(if /usr/local/Cellar/open-mpi/4.0.4_1/include, -I$(subst ;, -I,/usr/local/Cellar/open-mpi/4.0.4_1/include),)

CC ?= /Applications/Xcode_11.6.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc
CXX ?= /Applications/Xcode_11.6.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++
CFLAGS = -O2 
CXXFLAGS = -O2 -DVERSION_INFO='7.8.1.1' -std=c++11

COMPILE = $(CC) $(CFLAGS)  $(INCLUDES)
CXXCOMPILE = $(CXX) $(CXXFLAGS)  $(INCLUDES)
CXX_LINK_EXE = $(CXX) $(CXXFLAGS) 
CXX_LINK_SHARED = $(CXX) $(CXXFLAGS) -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -fPIC 

# File path config (internal)
MODC_DIR = $(OUTPUT)
OBJS_DIR = $(OUTPUT)
mod_files = $(sort $(notdir $(wildcard $(MODS_PATH)/*.mod)))
mod_names = $(mod_files:.mod=)
modc_files = $(addprefix $(MODC_DIR)/,$(addsuffix .c,$(mod_names)))
mod_objs   = $(addprefix $(OBJS_DIR)/,$(addsuffix .o,$(mod_names)))

mod_func_o = $(OBJS_DIR)/mod_func.o
mod_func_c = $(MODC_DIR)/mod_func.c

special  = $(OUTPUT)/special
LIB_SUFFIX_ = $(if $(MECH_NAME),_$(MECH_NAME),)
mech_libname = nrnmech
mech_lib = $(OUTPUT)/lib$(mech_libname).dylib

# If no DESTDIR (we are probably just building) we use $ORIGIN (@loader_path in OSX)
_ORIGIN := $(if $(filter Darwin,$(OS_NAME)),@loader_path,$$ORIGIN)
_SONAME := -Wl,$(if $(filter Darwin,$(OS_NAME)),-install_name${_cm}@rpath/,-soname${_cm})$(notdir ${mech_lib})
DESTDIR_RPATH = $(if $(DESTDIR),$(DESTDIR)/lib,$(_ORIGIN))

C_RESET := \033[0m
C_GREEN := \033[32m


# ======== MAIN BUILD RULES ============

# Take the main and link with nrnmech.
# RPATH is set for DESTDIR_RPATH and coreneuron lib
special: $(mech_lib)
	@printf " => $(C_GREEN)LINKING$(C_RESET) executable $(special) LDFLAGS are: $(LDFLAGS)\n"
	(cd .. ;  $(CXX_LINK_EXE) -I $(incdir) -I $(incdir)/nrncvode -DAUTO_DLOPEN_NRNMECH=0 $(datadir)/nrnmain.cpp -o $(special) \
	  -L $(OBJS_DIR) -l$(mech_libname) $(NRNLIB_FLAGS) -l$(mech_libname) -Wl,-rpath,'$(DESTDIR_RPATH)' -Wl,-rpath,$(libdir) $(LDFLAGS))

$(mech_lib): mod_func.o $(mod_objs) build_always
	@printf " => $(C_GREEN)LINKING$(C_RESET) library $(mech_lib) Mod files: $(mod_files)\n"
	(cd .. ; $(CXX_LINK_SHARED) -I $(incdir) -o ${mech_lib} ${_SONAME} \
	  $(mod_func_o) $(mod_objs) $(NRNLIB_FLAGS) -Wl,-rpath,$(libdir) $(LDFLAGS))
	(cd .. ; rm -f $(OBJS_DIR)/.libs/libnrnmech.so ; mkdir -p $(OBJS_DIR)/.libs ; ln -s ../../$(mech_lib) $(OBJS_DIR)/.libs/libnrnmech.so)

mod_func.o: mod_func.c
	@printf " -> $(C_GREEN)Compiling$(C_RESET) $<\n"
	$(COMPILE) -fPIC -c $< -o $@

# Generic build c->o. Need PIC for shared lib
$(OBJS_DIR)/%.o: $(MODC_DIR)/%.c | $(OBJS_DIR)
	@printf " -> $(C_GREEN)Compiling$(C_RESET) $<\n"
	(cd .. ; $(COMPILE) -fPIC -c $< -o $@)


# Build c files with nocmodl
$(MODC_DIR)/%.c: $(MODS_PATH)/%.mod | $(MODC_DIR)
	@printf " -> $(C_GREEN)NMODL$(C_RESET) $<\n"
	MODLUNIT=$(datadir_lib)/nrnunits.lib \
	  $(bindir)/nocmodl $<

# If .mod doesnt exist attempt from previously built opt mods in shared/
$(MODC_DIR)/%.cpp: $(datadir_lib)/%.cpp | $(MODC_DIR)
	ln -s $< $@

install: special $(mech_lib)
	install -d $(DESTDIR)/bin $(DESTDIR)/lib
	install $(mech_lib) $(DESTDIR)/lib
	install $(special) $(DESTDIR)/bin

libnrnmech.la: $(mech_lib)

# == INIT ==
$(MODC_DIR):
	mkdir -p $(MODC_DIR)
#$(OBJS_DIR):
#	mkdir -p $(OBJS_DIR)

.PHONY: build_always

$(VERBOSE).SILENT:
