from functools import partial

import dpipe.commands as commands
from dpipe.commands import lock_dir, populate
from dpipe.config import if_missing
from dpipe.experiment import flat
from dpipe.io import ConsoleArguments
from dpipe.layout import Flat
from dpipe.torch import save_model_state, load_model_state, train_step
from dpipe.train import train, Checkpoints, TBLogger, Policy
from dpipe.train.validator import compute_metrics

# split
layout = Flat(split)
train_ids = layout.get_ids('train')
val_ids = layout.get_ids('val')
test_ids = layout.get_ids('test')
# paths
checkpoints_path = 'checkpoints'
saved_model_path = 'model.pth'
log_path = 'train_logs'

# legacy
console = ConsoleArguments()
config_path = console(config_path=__file__)
experiment_path = console.experiment_path
build_experiment = flat(split, config_path, experiment_path)

# evaluation
val_metrics = {}
val_predict = predict
validate_step = partial(
    compute_metrics, val_predict, load_x, load_y, val_ids, val_metrics,
)

predict_to_dir = lambda ids, output_path: (
    load_model_state(architecture, saved_model_path),
    commands.predict(
        ids=ids, output_path=output_path, load_x=load_x, predict_fn=predict,
    ))

# training
train_kwargs = dict(lr=lr, architecture=architecture, optimizer=optimizer, criterion=criterion)
logger = TBLogger(log_path)
checkpoint_manager = Checkpoints(checkpoints_path, {
    **{k: v for k, v in train_kwargs.items() if isinstance(v, Policy)},
    'model.pth': architecture, 'optimizer.pth': optimizer
})
train_model = train(
    train_step, batch_iter, n_epochs, logger, checkpoint_manager, validate_step, **train_kwargs
)

test_predictions_path = 'test_predictions'
run_train_predict = run_experiment = (
    lock_dir(),
    populate(saved_model_path, lambda: [train_model, save_model_state(architecture, saved_model_path)]),
    populate(test_predictions_path, predict_to_dir, ids=test_ids, output_path=test_predictions_path),
)
