# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['flake8_plugin_utils', 'flake8_plugin_utils.utils']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'flake8-plugin-utils',
    'version': '1.3.1',
    'description': 'The package provides base classes and utils for flake8 plugin writing',
    'long_description': "# flake8-plugin-utils\n\n[![pypi](https://badge.fury.io/py/flake8-plugin-utils.svg)](https://pypi.org/project/flake8-plugin-utils)\n[![Python: 3.6+](https://img.shields.io/badge/Python-3.6+-blue.svg)](https://pypi.org/project/flake8-plugin-utils)\n[![Downloads](https://img.shields.io/pypi/dm/flake8-plugin-utils.svg)](https://pypistats.org/packages/flake8-plugin-utils)\n[![Build Status](https://travis-ci.org/Afonasev/flake8-plugin-utils.svg?branch=master)](https://travis-ci.org/Afonasev/flake8-plugin-utils)\n[![Code coverage](https://codecov.io/gh/afonasev/flake8-plugin-utils/branch/master/graph/badge.svg)](https://codecov.io/gh/afonasev/flake8-plugin-utils)\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nThe package provides base classes and utils for flake8 plugin writing.\n\n## Installation\n\n```bash\npip install flake8-plugin-utils\n```\n\n## Example\n\nWrite simple plugin\n\n```python\nfrom flake8_plugin_utils import Error, Visitor, Plugin\n\nclass MyError(Error):\n    code = 'X100'\n    message = 'my error'\n\nclass MyVisitor(Visitor):\n    def visit_ClassDef(self, node):\n        self.error_from_node(MyError, node)\n\nclass MyPlugin(Plugin):\n    name = 'MyPlugin'\n    version = '0.1.0'\n    visitors = [MyVisitor]\n```\n\nand test it with pytest\n\n```python\nfrom flake8_plugin_utils import assert_error, assert_not_error\n\ndef test_code_with_error():\n    assert_error(MyVisitor, 'class Y: pass', MyError)\n\ndef test_code_without_error():\n    assert_not_error(MyVisitor, 'x = 1')\n```\n\n### Configuration\n\nTo add configuration to a plugin, do the following:\n\n1. Implement classmethod `add_options` in your plugin class, as per the\n[flake8 docs](https://flake8.pycqa.org/en/latest/plugin-development/plugin-parameters.html#registering-options).\n1. Override classmethod `parse_options_to_config` in your plugin class\nto return any object holding the options you need.\n1. If you need a custom `__init__` for your visitor, make sure it accepts\na keyword argument named `config` and pass it to `super().__init__`\n1. Use `self.config` in visitor code.\n\nExample:\n\n```python\nfrom flake8_plugin_utils import Error, Visitor, Plugin, assert_error\n\nclass MyError(Error):\n    code = 'X100'\n    message = 'my error with {thing}'\n\nclass MyConfig:\n    def __init__(self, config_option):\n        self.config_option = config_option\n\nclass MyVisitorWithConfig(Visitor):\n    def visit_ClassDef(self, node):\n        self.error_from_node(\n            MyError, node, thing=f'{node.name} {self.config.config_option}'\n        )\n\nclass MyPluginWithConfig(Plugin):\n    name = 'MyPluginWithConfig'\n    version = '0.0.1'\n    visitors = [MyVisitorWithConfig]\n\n    @classmethod\n    def add_options(cls, options_manager):\n        options_manager.add_option('--config_option', ...)\n\n    @classmethod\n    def parse_options_to_config(cls, option_manager, options, args):\n        return MyConfig(config_option=options.config_option)\n\n\ndef test_code_with_error():\n    assert_error(\n        MyVisitorWithConfig,\n        'class Y: pass',\n        MyError,\n        config=MyConfig(config_option='123'),\n        thing='Y 123',\n    )\n```\n\n### Formatting\n\nYour `Error`s can take formatting arguments in their `message`:\n\n```python\nfrom flake8_plugin_utils import Error, Visitor, assert_error\n\nclass MyFormattedError(Error):\n    code = 'X101'\n    message = 'my error with {thing}'\n\nclass MyFormattedVisitor(Visitor):\n    def visit_ClassDef(self, node):\n        self.error_from_node(MyFormattedError, node, thing=node.name)\n\ndef test_code_with_error():\n    assert_error(\n        MyFormattedVisitor,\n        'class Y: pass',\n        MyFormattedError,\n        thing='Y',\n    )\n```\n\n### Usage with typing/mypy\n\nThe `Plugin` and `Visitor` classes are generic with the config class as type\nparameter.  If your plugin does not have any config, inherit it from\n`Plugin[None]` and the visitors from `Visitor[None]`.  Otherwise, use the\nconfig class as the type parameter (e.g. `Plugin[MyConfig]` and\n`Visitor[MyConfig]` in the above example).\n\n### Utility functions\n\n* `assert_error`, `assert_not_error`\nUtilities for testing visitors (see examples above).\n\n* `is_true`, `is_false`, `is_none`\nConvenience functions to check if an AST node represents a\n`True`/`False`/`None` value.\n\n* `check_equivalent_nodes`\nChecks if two given AST nodes are equivalent.\nThe nodes are considered equivalent in the following cases:\n  * dicts -- if they contain same key-value pairs, possibly in different order,\n  with duplicates and `**expansions` taken into account\n  * sets -- if they contain same elements, possibly in different order,\n  with duplicates taken into account\n  * anything else -- if they represent the same AST, regardless of formatting\n  (with any dicts in sets inside checked according to the rules above)\n\n## License\n\nMIT\n\n## Change Log\n\nUnreleased\n-----\n\n* ...\n\n1.3.1 - 2020-08-06\n-----\n\n* ...\n\n1.3.1 - 2020-08-06\n-----\n\n* Fix handling of encoding when loading files (#37)\n\n1.3.0 - 2020-03-26\n-----\n\n* add `check_equivalent_nodes` utility function\n\n1.2.0 - 2020-03-06\n-----\n\n* add `config` argument to `assert_error` and `assert_not_error`\n\n1.1.1 - 2020-03-02\n-----\n\n* ignore encoding errors when reading strings for noqa validation\n\n1.1.0 - 2020-03-01\n-----\n\n* add ability for plugins to parse and use configuration\n**NB: this change breaks type-checking if you use typing/mypy. Change your\ncode to inherit from `Plugin[None]` and `Visitor[None]` to fix.**\n\n1.0.0 - 2019-05-23\n-----\n\n* add message formatting to Error\n\n0.2.1 - 2019-04-01\n-----\n\n* don`t strip before src dedent in _error_from_src\n* add is_none, is_true, is_false util functions\n\n0.2.0 - 2019.02.21\n-----\n\n* add assert methods\n\n0.1.0 - 2019.02.09\n-----\n\n* initial\n",
    'author': 'Afonasev Evgeniy',
    'author_email': 'ea.afonasev@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://pypi.org/project/flake8-plugin-utils',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
