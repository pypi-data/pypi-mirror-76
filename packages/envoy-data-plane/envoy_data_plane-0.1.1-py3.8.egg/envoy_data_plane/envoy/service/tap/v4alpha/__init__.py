# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/tap/v4alpha/tap.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterable, Iterable, Optional, Union

import betterproto
import grpclib

from ....config.core import v4alpha as ___config_core_v4_alpha__
from ....data.tap import v3 as ___data_tap_v3__


@dataclass
class StreamTapsRequest(betterproto.Message):
    """
    [#not-implemented-hide:] Stream message for the Tap API. Envoy will open a
    stream to the server and stream taps without ever expecting a response.
    """

    # Identifier data effectively is a structured metadata. As a performance
    # optimization this will only be sent in the first message on the stream.
    identifier: "StreamTapsRequestIdentifier" = betterproto.message_field(1)
    # The trace id. this can be used to merge together a streaming trace. Note
    # that the trace_id is not guaranteed to be spatially or temporally unique.
    trace_id: int = betterproto.uint64_field(2)
    # The trace data.
    trace: ___data_tap_v3__.TraceWrapper = betterproto.message_field(3)


@dataclass
class StreamTapsRequestIdentifier(betterproto.Message):
    # The node sending taps over the stream.
    node: ___config_core_v4_alpha__.Node = betterproto.message_field(1)
    # The opaque identifier that was set in the :ref:`output config
    # <envoy_api_field_config.tap.v4alpha.StreamingGrpcSink.tap_id>`.
    tap_id: str = betterproto.string_field(2)


@dataclass
class StreamTapsResponse(betterproto.Message):
    """[#not-implemented-hide:]"""

    pass


class TapSinkServiceStub(betterproto.ServiceStub):
    """
    [#not-implemented-hide:] A tap service to receive incoming taps. Envoy will
    call StreamTaps to deliver captured taps to the server
    """

    async def stream_taps(
        self,
        request_iterator: Union[
            AsyncIterable["StreamTapsRequest"], Iterable["StreamTapsRequest"]
        ],
    ) -> StreamTapsResponse:
        """
        Envoy will connect and send StreamTapsRequest messages forever. It does
        not expect any response to be sent as nothing would be done in the case
        of failure. The server should disconnect if it expects Envoy to
        reconnect.
        """

        return await self._stream_unary(
            "/envoy.service.tap.v4alpha.TapSinkService/StreamTaps",
            request_iterator,
            StreamTapsRequest,
            StreamTapsResponse,
        )
