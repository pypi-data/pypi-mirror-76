# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/route/v3/srds.proto, envoy/service/route/v3/rds.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterable, AsyncIterator, Iterable, Union

import betterproto
import grpclib

from ...discovery import v3 as __discovery_v3__


@dataclass
class SrdsDummy(betterproto.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue
    with importing services: https://github.com/google/protobuf/issues/4221 and
    protoxform to upgrade the file.
    """

    pass


@dataclass
class RdsDummy(betterproto.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue
    with importing services: https://github.com/google/protobuf/issues/4221 and
    protoxform to upgrade the file.
    """

    pass


class ScopedRoutesDiscoveryServiceStub(betterproto.ServiceStub):
    """
    The Scoped Routes Discovery Service (SRDS) API distributes
    :ref:`ScopedRouteConfiguration<envoy_api_msg.ScopedRouteConfiguration>`
    resources. Each ScopedRouteConfiguration resource represents a "routing
    scope" containing a mapping that allows the HTTP connection manager to
    dynamically assign a routing table (specified via a
    :ref:`RouteConfiguration<envoy_api_msg_config.route.v3.RouteConfiguration>`
    message) to each HTTP request.
    """

    async def stream_scoped_routes(
        self,
        request_iterator: Union[
            AsyncIterable["__discovery_v3__.DiscoveryRequest"],
            Iterable["__discovery_v3__.DiscoveryRequest"],
        ],
    ) -> AsyncIterator[__discovery_v3__.DiscoveryResponse]:

        async for response in self._stream_stream(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/StreamScopedRoutes",
            request_iterator,
            __discovery_v3__.DiscoveryRequest,
            __discovery_v3__.DiscoveryResponse,
        ):
            yield response

    async def delta_scoped_routes(
        self,
        request_iterator: Union[
            AsyncIterable["__discovery_v3__.DeltaDiscoveryRequest"],
            Iterable["__discovery_v3__.DeltaDiscoveryRequest"],
        ],
    ) -> AsyncIterator[__discovery_v3__.DeltaDiscoveryResponse]:

        async for response in self._stream_stream(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/DeltaScopedRoutes",
            request_iterator,
            __discovery_v3__.DeltaDiscoveryRequest,
            __discovery_v3__.DeltaDiscoveryResponse,
        ):
            yield response

    async def fetch_scoped_routes(self) -> __discovery_v3__.DiscoveryResponse:
        request = __discovery_v3__.DiscoveryRequest()

        return await self._unary_unary(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/FetchScopedRoutes",
            request,
            __discovery_v3__.DiscoveryResponse,
        )


class RouteDiscoveryServiceStub(betterproto.ServiceStub):
    """
    The resource_names field in DiscoveryRequest specifies a route
    configuration. This allows an Envoy configuration with multiple HTTP
    listeners (and associated HTTP connection manager filters) to use different
    route configurations. Each listener will bind its HTTP connection manager
    filter to a route table via this identifier.
    """

    async def stream_routes(
        self,
        request_iterator: Union[
            AsyncIterable["__discovery_v3__.DiscoveryRequest"],
            Iterable["__discovery_v3__.DiscoveryRequest"],
        ],
    ) -> AsyncIterator[__discovery_v3__.DiscoveryResponse]:

        async for response in self._stream_stream(
            "/envoy.service.route.v3.RouteDiscoveryService/StreamRoutes",
            request_iterator,
            __discovery_v3__.DiscoveryRequest,
            __discovery_v3__.DiscoveryResponse,
        ):
            yield response

    async def delta_routes(
        self,
        request_iterator: Union[
            AsyncIterable["__discovery_v3__.DeltaDiscoveryRequest"],
            Iterable["__discovery_v3__.DeltaDiscoveryRequest"],
        ],
    ) -> AsyncIterator[__discovery_v3__.DeltaDiscoveryResponse]:

        async for response in self._stream_stream(
            "/envoy.service.route.v3.RouteDiscoveryService/DeltaRoutes",
            request_iterator,
            __discovery_v3__.DeltaDiscoveryRequest,
            __discovery_v3__.DeltaDiscoveryResponse,
        ):
            yield response

    async def fetch_routes(self) -> __discovery_v3__.DiscoveryResponse:
        request = __discovery_v3__.DiscoveryRequest()

        return await self._unary_unary(
            "/envoy.service.route.v3.RouteDiscoveryService/FetchRoutes",
            request,
            __discovery_v3__.DiscoveryResponse,
        )


class VirtualHostDiscoveryServiceStub(betterproto.ServiceStub):
    """
    Virtual Host Discovery Service (VHDS) is used to dynamically update the
    list of virtual hosts for a given RouteConfiguration. If VHDS is configured
    a virtual host list update will be triggered during the processing of an
    HTTP request if a route for the request cannot be resolved. The
    :ref:`resource_names_subscribe <envoy_api_field_service.discovery.v3.DeltaD
    iscoveryRequest.resource_names_subscribe>` field contains a list of virtual
    host names or aliases to track. The contents of an alias would be the
    contents of a *host* or *authority* header used to make an http request. An
    xDS server will match an alias to a virtual host based on the content of
    :ref:`domains' <envoy_api_field_config.route.v3.VirtualHost.domains>`
    field. The *resource_names_unsubscribe* field contains a list of virtual
    host names that have been :ref:`unsubscribed <xds_protocol_unsubscribe>`
    from the routing table associated with the RouteConfiguration.
    """

    async def delta_virtual_hosts(
        self,
        request_iterator: Union[
            AsyncIterable["__discovery_v3__.DeltaDiscoveryRequest"],
            Iterable["__discovery_v3__.DeltaDiscoveryRequest"],
        ],
    ) -> AsyncIterator[__discovery_v3__.DeltaDiscoveryResponse]:

        async for response in self._stream_stream(
            "/envoy.service.route.v3.VirtualHostDiscoveryService/DeltaVirtualHosts",
            request_iterator,
            __discovery_v3__.DeltaDiscoveryRequest,
            __discovery_v3__.DeltaDiscoveryResponse,
        ):
            yield response
