# coding: utf-8

"""
    Rightfoot Student Loan Repayment

    This API provides student loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.2.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MailingAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line1': 'str',
        'line2': 'str',
        'city': 'str',
        'state': 'str',
        'zip_code': 'str'
    }

    attribute_map = {
        'line1': 'line1',
        'line2': 'line2',
        'city': 'city',
        'state': 'state',
        'zip_code': 'zipCode'
    }

    def __init__(self, line1=None, line2=None, city=None, state=None, zip_code=None):  # noqa: E501
        """MailingAddress - a model defined in Swagger"""  # noqa: E501
        self._line1 = None
        self._line2 = None
        self._city = None
        self._state = None
        self._zip_code = None
        self.discriminator = None
        if line1 is not None:
            self.line1 = line1
        if line2 is not None:
            self.line2 = line2
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip_code is not None:
            self.zip_code = zip_code

    @property
    def line1(self):
        """Gets the line1 of this MailingAddress.  # noqa: E501

        Mandatory mailing address line.  # noqa: E501

        :return: The line1 of this MailingAddress.  # noqa: E501
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this MailingAddress.

        Mandatory mailing address line.  # noqa: E501

        :param line1: The line1 of this MailingAddress.  # noqa: E501
        :type: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this MailingAddress.  # noqa: E501

        Optional second line of an address.  # noqa: E501

        :return: The line2 of this MailingAddress.  # noqa: E501
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this MailingAddress.

        Optional second line of an address.  # noqa: E501

        :param line2: The line2 of this MailingAddress.  # noqa: E501
        :type: str
        """

        self._line2 = line2

    @property
    def city(self):
        """Gets the city of this MailingAddress.  # noqa: E501

        The city of the location.  # noqa: E501

        :return: The city of this MailingAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MailingAddress.

        The city of the location.  # noqa: E501

        :param city: The city of this MailingAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this MailingAddress.  # noqa: E501

        The two-letter state/territory abbreviation.  # noqa: E501

        :return: The state of this MailingAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MailingAddress.

        The two-letter state/territory abbreviation.  # noqa: E501

        :param state: The state of this MailingAddress.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip_code(self):
        """Gets the zip_code of this MailingAddress.  # noqa: E501

        US Zone Improvement Plan (ZIP) Code, or alternatively ZIP+4 Code.   # noqa: E501

        :return: The zip_code of this MailingAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this MailingAddress.

        US Zone Improvement Plan (ZIP) Code, or alternatively ZIP+4 Code.   # noqa: E501

        :param zip_code: The zip_code of this MailingAddress.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailingAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailingAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
