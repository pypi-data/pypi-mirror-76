# coding: utf-8

"""
    Rightfoot Student Loan Repayment

    This API provides student loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.2.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateFundingSourceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beneficiary_uuid': 'str',
        'email_address': 'str',
        'plaid_public_token': 'str',
        'account_id': 'str',
        'dwolla_processor_token': 'str'
    }

    attribute_map = {
        'beneficiary_uuid': 'beneficiaryUuid',
        'email_address': 'emailAddress',
        'plaid_public_token': 'plaidPublicToken',
        'account_id': 'accountId',
        'dwolla_processor_token': 'dwollaProcessorToken'
    }

    def __init__(self, beneficiary_uuid=None, email_address=None, plaid_public_token=None, account_id=None, dwolla_processor_token=None):  # noqa: E501
        """CreateFundingSourceRequest - a model defined in Swagger"""  # noqa: E501
        self._beneficiary_uuid = None
        self._email_address = None
        self._plaid_public_token = None
        self._account_id = None
        self._dwolla_processor_token = None
        self.discriminator = None
        if beneficiary_uuid is not None:
            self.beneficiary_uuid = beneficiary_uuid
        if email_address is not None:
            self.email_address = email_address
        if plaid_public_token is not None:
            self.plaid_public_token = plaid_public_token
        if account_id is not None:
            self.account_id = account_id
        if dwolla_processor_token is not None:
            self.dwolla_processor_token = dwolla_processor_token

    @property
    def beneficiary_uuid(self):
        """Gets the beneficiary_uuid of this CreateFundingSourceRequest.  # noqa: E501

        Unique identifier generated by Rightfoot for beneficiary.  # noqa: E501

        :return: The beneficiary_uuid of this CreateFundingSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_uuid

    @beneficiary_uuid.setter
    def beneficiary_uuid(self, beneficiary_uuid):
        """Sets the beneficiary_uuid of this CreateFundingSourceRequest.

        Unique identifier generated by Rightfoot for beneficiary.  # noqa: E501

        :param beneficiary_uuid: The beneficiary_uuid of this CreateFundingSourceRequest.  # noqa: E501
        :type: str
        """

        self._beneficiary_uuid = beneficiary_uuid

    @property
    def email_address(self):
        """Gets the email_address of this CreateFundingSourceRequest.  # noqa: E501

        Valid email address, which can be used to reach the user. Rightfoot and its partners do not conduct regular communication with end-users. Regulations require bank partner to have the ability to contact the end-user.   # noqa: E501

        :return: The email_address of this CreateFundingSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this CreateFundingSourceRequest.

        Valid email address, which can be used to reach the user. Rightfoot and its partners do not conduct regular communication with end-users. Regulations require bank partner to have the ability to contact the end-user.   # noqa: E501

        :param email_address: The email_address of this CreateFundingSourceRequest.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def plaid_public_token(self):
        """Gets the plaid_public_token of this CreateFundingSourceRequest.  # noqa: E501

        Public token provided by Plaid Link representing the beneficiary’s bank account. Grants Rightfoot permission to draw from the account backing this token. Either this and accountId are required or dwollaProcessorToken is required.   # noqa: E501

        :return: The plaid_public_token of this CreateFundingSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._plaid_public_token

    @plaid_public_token.setter
    def plaid_public_token(self, plaid_public_token):
        """Sets the plaid_public_token of this CreateFundingSourceRequest.

        Public token provided by Plaid Link representing the beneficiary’s bank account. Grants Rightfoot permission to draw from the account backing this token. Either this and accountId are required or dwollaProcessorToken is required.   # noqa: E501

        :param plaid_public_token: The plaid_public_token of this CreateFundingSourceRequest.  # noqa: E501
        :type: str
        """

        self._plaid_public_token = plaid_public_token

    @property
    def account_id(self):
        """Gets the account_id of this CreateFundingSourceRequest.  # noqa: E501

        Account ID from Plaid Link when a user selects a specific checking or savings bank account from the bank institution they log into. Either this and plaidPublicToken are required or dwollaProcessorToken is required.   # noqa: E501

        :return: The account_id of this CreateFundingSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateFundingSourceRequest.

        Account ID from Plaid Link when a user selects a specific checking or savings bank account from the bank institution they log into. Either this and plaidPublicToken are required or dwollaProcessorToken is required.   # noqa: E501

        :param account_id: The account_id of this CreateFundingSourceRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def dwolla_processor_token(self):
        """Gets the dwolla_processor_token of this CreateFundingSourceRequest.  # noqa: E501

        Dwolla Processor Token generated from a Plaid Auth access token owned by the API application. Grants Rightfoot permission to draw from the account backing this token. Either this or plaidPublicToken and accountId is required.   # noqa: E501

        :return: The dwolla_processor_token of this CreateFundingSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._dwolla_processor_token

    @dwolla_processor_token.setter
    def dwolla_processor_token(self, dwolla_processor_token):
        """Sets the dwolla_processor_token of this CreateFundingSourceRequest.

        Dwolla Processor Token generated from a Plaid Auth access token owned by the API application. Grants Rightfoot permission to draw from the account backing this token. Either this or plaidPublicToken and accountId is required.   # noqa: E501

        :param dwolla_processor_token: The dwolla_processor_token of this CreateFundingSourceRequest.  # noqa: E501
        :type: str
        """

        self._dwolla_processor_token = dwolla_processor_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFundingSourceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFundingSourceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
