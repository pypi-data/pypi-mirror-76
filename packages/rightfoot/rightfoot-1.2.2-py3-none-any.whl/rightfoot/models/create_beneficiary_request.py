# coding: utf-8

"""
    Rightfoot Student Loan Repayment

    This API provides student loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.2.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateBeneficiaryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'date_of_birth': 'date',
        'phone_number': 'str',
        'mailing_address': 'MailingAddress'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'date_of_birth': 'dateOfBirth',
        'phone_number': 'phoneNumber',
        'mailing_address': 'mailingAddress'
    }

    def __init__(self, first_name=None, last_name=None, date_of_birth=None, phone_number=None, mailing_address=None):  # noqa: E501
        """CreateBeneficiaryRequest - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._date_of_birth = None
        self._phone_number = None
        self._mailing_address = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if phone_number is not None:
            self.phone_number = phone_number
        if mailing_address is not None:
            self.mailing_address = mailing_address

    @property
    def first_name(self):
        """Gets the first_name of this CreateBeneficiaryRequest.  # noqa: E501

        The given name of the beneficiary.  # noqa: E501

        :return: The first_name of this CreateBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreateBeneficiaryRequest.

        The given name of the beneficiary.  # noqa: E501

        :param first_name: The first_name of this CreateBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CreateBeneficiaryRequest.  # noqa: E501

        The family name of the beneficiary.  # noqa: E501

        :return: The last_name of this CreateBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreateBeneficiaryRequest.

        The family name of the beneficiary.  # noqa: E501

        :param last_name: The last_name of this CreateBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this CreateBeneficiaryRequest.  # noqa: E501

        Birth date for the beneficiary formatted as YYYY-MM-DD.  # noqa: E501

        :return: The date_of_birth of this CreateBeneficiaryRequest.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this CreateBeneficiaryRequest.

        Birth date for the beneficiary formatted as YYYY-MM-DD.  # noqa: E501

        :param date_of_birth: The date_of_birth of this CreateBeneficiaryRequest.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def phone_number(self):
        """Gets the phone_number of this CreateBeneficiaryRequest.  # noqa: E501

        Phone number for the beneficiary formatted internationally with spacing such as +1 555 555 5555.   # noqa: E501

        :return: The phone_number of this CreateBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CreateBeneficiaryRequest.

        Phone number for the beneficiary formatted internationally with spacing such as +1 555 555 5555.   # noqa: E501

        :param phone_number: The phone_number of this CreateBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def mailing_address(self):
        """Gets the mailing_address of this CreateBeneficiaryRequest.  # noqa: E501


        :return: The mailing_address of this CreateBeneficiaryRequest.  # noqa: E501
        :rtype: MailingAddress
        """
        return self._mailing_address

    @mailing_address.setter
    def mailing_address(self, mailing_address):
        """Sets the mailing_address of this CreateBeneficiaryRequest.


        :param mailing_address: The mailing_address of this CreateBeneficiaryRequest.  # noqa: E501
        :type: MailingAddress
        """

        self._mailing_address = mailing_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBeneficiaryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBeneficiaryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
