# coding: utf-8

"""
    Rightfoot Student Loan Repayment

    This API provides student loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.2.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AddGenericLoanToBeneficiaryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'plaid_institution_id': 'str',
        'account_number': 'str',
        'sequence_number': 'str',
        'payment_reference_number': 'str',
        'guarantor': 'str',
        'guarantor_name': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'plaid_institution_id': 'plaidInstitutionId',
        'account_number': 'accountNumber',
        'sequence_number': 'sequenceNumber',
        'payment_reference_number': 'paymentReferenceNumber',
        'guarantor': 'guarantor',
        'guarantor_name': 'guarantorName'
    }

    def __init__(self, uuid=None, plaid_institution_id=None, account_number=None, sequence_number=None, payment_reference_number=None, guarantor=None, guarantor_name=None):  # noqa: E501
        """AddGenericLoanToBeneficiaryRequest - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._plaid_institution_id = None
        self._account_number = None
        self._sequence_number = None
        self._payment_reference_number = None
        self._guarantor = None
        self._guarantor_name = None
        self.discriminator = None
        if uuid is not None:
            self.uuid = uuid
        if plaid_institution_id is not None:
            self.plaid_institution_id = plaid_institution_id
        if account_number is not None:
            self.account_number = account_number
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if payment_reference_number is not None:
            self.payment_reference_number = payment_reference_number
        if guarantor is not None:
            self.guarantor = guarantor
        if guarantor_name is not None:
            self.guarantor_name = guarantor_name

    @property
    def uuid(self):
        """Gets the uuid of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501

        Unique identifier generated by Rightfoot.  # noqa: E501

        :return: The uuid of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AddGenericLoanToBeneficiaryRequest.

        Unique identifier generated by Rightfoot.  # noqa: E501

        :param uuid: The uuid of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def plaid_institution_id(self):
        """Gets the plaid_institution_id of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501

        Unique identifier used by Plaid for the loan servicer institution.   # noqa: E501

        :return: The plaid_institution_id of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._plaid_institution_id

    @plaid_institution_id.setter
    def plaid_institution_id(self, plaid_institution_id):
        """Sets the plaid_institution_id of this AddGenericLoanToBeneficiaryRequest.

        Unique identifier used by Plaid for the loan servicer institution.   # noqa: E501

        :param plaid_institution_id: The plaid_institution_id of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._plaid_institution_id = plaid_institution_id

    @property
    def account_number(self):
        """Gets the account_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501

        The root account number for the loan.  # noqa: E501

        :return: The account_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AddGenericLoanToBeneficiaryRequest.

        The root account number for the loan.  # noqa: E501

        :param account_number: The account_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def sequence_number(self):
        """Gets the sequence_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501

        If available, the sub-loan sequence number within the account.   # noqa: E501

        :return: The sequence_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this AddGenericLoanToBeneficiaryRequest.

        If available, the sub-loan sequence number within the account.   # noqa: E501

        :param sequence_number: The sequence_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._sequence_number = sequence_number

    @property
    def payment_reference_number(self):
        """Gets the payment_reference_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501

        If a different payment reference number is available for accounts, identifies the loan account for payment purposes. Often the same as accountNumber but can be specified when known to be different.   # noqa: E501

        :return: The payment_reference_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_reference_number

    @payment_reference_number.setter
    def payment_reference_number(self, payment_reference_number):
        """Sets the payment_reference_number of this AddGenericLoanToBeneficiaryRequest.

        If a different payment reference number is available for accounts, identifies the loan account for payment purposes. Often the same as accountNumber but can be specified when known to be different.   # noqa: E501

        :param payment_reference_number: The payment_reference_number of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._payment_reference_number = payment_reference_number

    @property
    def guarantor(self):
        """Gets the guarantor of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501

        NOTE: This was incorrectly named in earlier SDK versions, will be supported by our API, but will be removed in future SDK versions. The name of the guarantor of the loan if used at the loan servicer.   # noqa: E501

        :return: The guarantor of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._guarantor

    @guarantor.setter
    def guarantor(self, guarantor):
        """Sets the guarantor of this AddGenericLoanToBeneficiaryRequest.

        NOTE: This was incorrectly named in earlier SDK versions, will be supported by our API, but will be removed in future SDK versions. The name of the guarantor of the loan if used at the loan servicer.   # noqa: E501

        :param guarantor: The guarantor of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._guarantor = guarantor

    @property
    def guarantor_name(self):
        """Gets the guarantor_name of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501

        The name of the guarantor of the loan if used at the loan servicer.   # noqa: E501

        :return: The guarantor_name of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._guarantor_name

    @guarantor_name.setter
    def guarantor_name(self, guarantor_name):
        """Sets the guarantor_name of this AddGenericLoanToBeneficiaryRequest.

        The name of the guarantor of the loan if used at the loan servicer.   # noqa: E501

        :param guarantor_name: The guarantor_name of this AddGenericLoanToBeneficiaryRequest.  # noqa: E501
        :type: str
        """

        self._guarantor_name = guarantor_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddGenericLoanToBeneficiaryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddGenericLoanToBeneficiaryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
