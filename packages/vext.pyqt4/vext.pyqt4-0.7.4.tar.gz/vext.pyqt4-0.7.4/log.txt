False
setuptools.sandbox
109
running install
running bdist_egg
running egg_info
creating vext.pyqt4.egg-info
writing requirements to vext.pyqt4.egg-info/requires.txt
writing vext.pyqt4.egg-info/PKG-INFO
writing top-level names to vext.pyqt4.egg-info/top_level.txt
writing dependency_links to vext.pyqt4.egg-info/dependency_links.txt
writing manifest file 'vext.pyqt4.egg-info/SOURCES.txt'
reading manifest file 'vext.pyqt4.egg-info/SOURCES.txt'
reading manifest template 'MANIFEST.in'
writing manifest file 'vext.pyqt4.egg-info/SOURCES.txt'
installing library code to build/bdist.linux-x86_64/egg
running install_lib
installing package data to build/bdist.linux-x86_64/egg
running install_data
creating build
creating build/bdist.linux-x86_64
creating build/bdist.linux-x86_64/egg
copying pyqt4.vext -> /mnt/data/home/stu/.virtualenvs/tmpv3/lib/python2.7/site-packages/vext/specs
creating build/bdist.linux-x86_64/egg/EGG-INFO
copying vext.pyqt4.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
copying vext.pyqt4.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying vext.pyqt4.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying vext.pyqt4.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying vext.pyqt4.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
creating dist
creating 'dist/vext.pyqt4-0.2.1-py2.7.egg' and adding 'build/bdist.linux-x86_64/egg' to it
removing 'build/bdist.linux-x86_64/egg' (and everything under it)
Processing vext.pyqt4-0.2.1-py2.7.egg
Copying vext.pyqt4-0.2.1-py2.7.egg to /mnt/data/home/stu/.virtualenvs/tmpv3/lib/python2.7/site-packages
Adding vext.pyqt4 0.2.1 to easy-install.pth file

Installed /mnt/data/home/stu/.virtualenvs/tmpv3/lib/python2.7/site-packages/vext.pyqt4-0.2.1-py2.7.egg
Processing dependencies for vext.pyqt4==0.2.1
Searching for vext
Reading https://pypi.python.org/simple/vext/
Best match: vext 0.2.2
Downloading https://pypi.python.org/packages/source/v/vext/vext-0.2.2.tar.gz#md5=83b15aa35e60ccdcfc77645b80a7bf6b
Processing vext-0.2.2.tar.gz
('build_and_install ', '/tmp/easy_install-9tJU1T/vext-0.2.2/setup.py', '/tmp/easy_install-9tJU1T')
Writing /tmp/easy_install-9tJU1T/vext-0.2.2/setup.cfg
Running vext-0.2.2/setup.py -q bdist_egg --dist-dir /tmp/easy_install-9tJU1T/vext-0.2.2/egg-dist-tmp-VgHKHz
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
24M:73M:setuptools.sandbox:107:         try:
24M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
24M:73M:pickle:1373:     file = StringIO()
24M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
24M:73M:pickle:197:         if protocol is None:
24M:73M:pickle:198:             protocol = 0
24M:73M:pickle:199:         if protocol < 0:
24M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
24M:73M:pickle:203:         self.write = file.write
24M:73M:pickle:204:         self.memo = {}
24M:73M:pickle:205:         self.proto = int(protocol)
24M:73M:pickle:206:         self.bin = protocol >= 1
24M:73M:pickle:207:         self.fast = 0
24M:73M:pickle:222:         if self.proto >= 2:
24M:73M:pickle:224:         self.save(obj)
24M:73M:pickle:271:         pid = self.persistent_id(obj)
24M:73M:pickle:335:         return None
24M:73M:pickle:272:         if pid is not None:
24M:73M:pickle:277:         x = self.memo.get(id(obj))
24M:73M:pickle:278:         if x:
24M:73M:pickle:283:         t = type(obj)
24M:73M:pickle:284:         f = self.dispatch.get(t)
24M:73M:pickle:285:         if f:
24M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
24M:73M:pickle:731:         write = self.write
24M:73M:pickle:732:         memo = self.memo
24M:73M:pickle:734:         if name is None:
24M:73M:pickle:735:             name = obj.__name__
24M:73M:pickle:737:         module = getattr(obj, "__module__", None)
24M:73M:pickle:738:         if module is None:
24M:73M:pickle:741:         try:
24M:73M:pickle:742:             __import__(module)
24M:73M:pickle:743:             mod = sys.modules[module]
24M:73M:pickle:744:             klass = getattr(mod, name)
24M:73M:pickle:750:             if klass is not obj:
24M:73M:pickle:751:                 raise PicklingError(
24M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
24M:73M:pickle:753:                     (obj, module, name))
24M:73M:setuptools.sandbox:109:         except Exception:
24M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
25M:73M:setuptools.sandbox:107:         try:
25M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
25M:73M:pickle:1373:     file = StringIO()
25M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
25M:73M:pickle:197:         if protocol is None:
25M:73M:pickle:198:             protocol = 0
25M:73M:pickle:199:         if protocol < 0:
25M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
25M:73M:pickle:203:         self.write = file.write
25M:73M:pickle:204:         self.memo = {}
25M:73M:pickle:205:         self.proto = int(protocol)
25M:73M:pickle:206:         self.bin = protocol >= 1
25M:73M:pickle:207:         self.fast = 0
25M:73M:pickle:222:         if self.proto >= 2:
25M:73M:pickle:224:         self.save(obj)
25M:73M:pickle:271:         pid = self.persistent_id(obj)
25M:73M:pickle:335:         return None
25M:73M:pickle:272:         if pid is not None:
25M:73M:pickle:277:         x = self.memo.get(id(obj))
25M:73M:pickle:278:         if x:
25M:73M:pickle:283:         t = type(obj)
25M:73M:pickle:284:         f = self.dispatch.get(t)
25M:73M:pickle:285:         if f:
25M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
25M:73M:pickle:731:         write = self.write
25M:73M:pickle:732:         memo = self.memo
25M:73M:pickle:734:         if name is None:
25M:73M:pickle:735:             name = obj.__name__
25M:73M:pickle:737:         module = getattr(obj, "__module__", None)
25M:73M:pickle:738:         if module is None:
25M:73M:pickle:741:         try:
25M:73M:pickle:742:             __import__(module)
25M:73M:pickle:743:             mod = sys.modules[module]
25M:73M:pickle:744:             klass = getattr(mod, name)
25M:73M:pickle:750:             if klass is not obj:
25M:73M:pickle:751:                 raise PicklingError(
25M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
25M:73M:pickle:753:                     (obj, module, name))
25M:73M:setuptools.sandbox:109:         except Exception:
25M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
25M:73M:setuptools.sandbox:107:         try:
25M:73M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
25M:73M:pickle:1373:     file = StringIO()
25M:73M:pickle:1374:     Pickler(file, protocol).dump(obj)
25M:73M:pickle:197:         if protocol is None:
25M:73M:pickle:198:             protocol = 0
25M:73M:pickle:199:         if protocol < 0:
25M:73M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
25M:73M:pickle:203:         self.write = file.write
25M:73M:pickle:204:         self.memo = {}
25M:73M:pickle:205:         self.proto = int(protocol)
25M:73M:pickle:206:         self.bin = protocol >= 1
25M:73M:pickle:207:         self.fast = 0
25M:73M:pickle:222:         if self.proto >= 2:
25M:73M:pickle:224:         self.save(obj)
25M:73M:pickle:271:         pid = self.persistent_id(obj)
25M:73M:pickle:335:         return None
25M:73M:pickle:272:         if pid is not None:
25M:73M:pickle:277:         x = self.memo.get(id(obj))
25M:73M:pickle:278:         if x:
25M:73M:pickle:283:         t = type(obj)
25M:73M:pickle:284:         f = self.dispatch.get(t)
25M:73M:pickle:285:         if f:
25M:73M:pickle:286:             f(self, obj) # Call unbound method with explicit self
25M:73M:pickle:731:         write = self.write
25M:73M:pickle:732:         memo = self.memo
25M:73M:pickle:734:         if name is None:
25M:73M:pickle:735:             name = obj.__name__
25M:73M:pickle:737:         module = getattr(obj, "__module__", None)
25M:73M:pickle:738:         if module is None:
25M:73M:pickle:741:         try:
25M:73M:pickle:742:             __import__(module)
25M:73M:pickle:743:             mod = sys.modules[module]
25M:73M:pickle:744:             klass = getattr(mod, name)
25M:73M:pickle:750:             if klass is not obj:
25M:73M:pickle:751:                 raise PicklingError(
25M:73M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
25M:73M:pickle:753:                     (obj, module, name))
25M:73M:setuptools.sandbox:109:         except Exception:
25M:73M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
26M:74M:setuptools.sandbox:107:         try:
26M:74M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
26M:74M:pickle:1373:     file = StringIO()
26M:74M:pickle:1374:     Pickler(file, protocol).dump(obj)
26M:74M:pickle:197:         if protocol is None:
26M:74M:pickle:198:             protocol = 0
26M:74M:pickle:199:         if protocol < 0:
26M:74M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
26M:74M:pickle:203:         self.write = file.write
26M:74M:pickle:204:         self.memo = {}
26M:74M:pickle:205:         self.proto = int(protocol)
26M:74M:pickle:206:         self.bin = protocol >= 1
26M:74M:pickle:207:         self.fast = 0
26M:74M:pickle:222:         if self.proto >= 2:
26M:74M:pickle:224:         self.save(obj)
26M:74M:pickle:271:         pid = self.persistent_id(obj)
26M:74M:pickle:335:         return None
26M:74M:pickle:272:         if pid is not None:
26M:74M:pickle:277:         x = self.memo.get(id(obj))
26M:74M:pickle:278:         if x:
26M:74M:pickle:283:         t = type(obj)
26M:74M:pickle:284:         f = self.dispatch.get(t)
26M:74M:pickle:285:         if f:
26M:74M:pickle:286:             f(self, obj) # Call unbound method with explicit self
26M:74M:pickle:731:         write = self.write
26M:74M:pickle:732:         memo = self.memo
26M:74M:pickle:734:         if name is None:
26M:74M:pickle:735:             name = obj.__name__
26M:74M:pickle:737:         module = getattr(obj, "__module__", None)
26M:74M:pickle:738:         if module is None:
26M:74M:pickle:741:         try:
26M:74M:pickle:742:             __import__(module)
26M:74M:pickle:743:             mod = sys.modules[module]
26M:74M:pickle:744:             klass = getattr(mod, name)
26M:74M:pickle:750:             if klass is not obj:
26M:74M:pickle:751:                 raise PicklingError(
26M:74M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
26M:74M:pickle:753:                     (obj, module, name))
26M:74M:setuptools.sandbox:109:         except Exception:
26M:74M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
27M:75M:setuptools.sandbox:107:         try:
27M:75M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
27M:75M:pickle:1373:     file = StringIO()
27M:75M:pickle:1374:     Pickler(file, protocol).dump(obj)
27M:75M:pickle:197:         if protocol is None:
27M:75M:pickle:198:             protocol = 0
27M:75M:pickle:199:         if protocol < 0:
27M:75M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
27M:75M:pickle:203:         self.write = file.write
27M:75M:pickle:204:         self.memo = {}
27M:75M:pickle:205:         self.proto = int(protocol)
27M:75M:pickle:206:         self.bin = protocol >= 1
27M:75M:pickle:207:         self.fast = 0
27M:75M:pickle:222:         if self.proto >= 2:
27M:75M:pickle:224:         self.save(obj)
27M:75M:pickle:271:         pid = self.persistent_id(obj)
27M:75M:pickle:335:         return None
27M:75M:pickle:272:         if pid is not None:
27M:75M:pickle:277:         x = self.memo.get(id(obj))
27M:75M:pickle:278:         if x:
27M:75M:pickle:283:         t = type(obj)
27M:75M:pickle:284:         f = self.dispatch.get(t)
27M:75M:pickle:285:         if f:
27M:75M:pickle:286:             f(self, obj) # Call unbound method with explicit self
27M:75M:pickle:731:         write = self.write
27M:75M:pickle:732:         memo = self.memo
27M:75M:pickle:734:         if name is None:
27M:75M:pickle:735:             name = obj.__name__
27M:75M:pickle:737:         module = getattr(obj, "__module__", None)
27M:75M:pickle:738:         if module is None:
27M:75M:pickle:741:         try:
27M:75M:pickle:742:             __import__(module)
27M:75M:pickle:743:             mod = sys.modules[module]
27M:75M:pickle:744:             klass = getattr(mod, name)
27M:75M:pickle:750:             if klass is not obj:
27M:75M:pickle:751:                 raise PicklingError(
27M:75M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
27M:75M:pickle:753:                     (obj, module, name))
27M:75M:setuptools.sandbox:109:         except Exception:
27M:75M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
31M:79M:setuptools.sandbox:107:         try:
31M:79M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
31M:79M:pickle:1373:     file = StringIO()
31M:79M:pickle:1374:     Pickler(file, protocol).dump(obj)
31M:79M:pickle:197:         if protocol is None:
31M:79M:pickle:198:             protocol = 0
31M:79M:pickle:199:         if protocol < 0:
31M:79M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
31M:79M:pickle:203:         self.write = file.write
31M:79M:pickle:204:         self.memo = {}
31M:79M:pickle:205:         self.proto = int(protocol)
31M:79M:pickle:206:         self.bin = protocol >= 1
31M:79M:pickle:207:         self.fast = 0
31M:79M:pickle:222:         if self.proto >= 2:
31M:79M:pickle:224:         self.save(obj)
31M:79M:pickle:271:         pid = self.persistent_id(obj)
31M:79M:pickle:335:         return None
31M:79M:pickle:272:         if pid is not None:
31M:79M:pickle:277:         x = self.memo.get(id(obj))
31M:79M:pickle:278:         if x:
31M:79M:pickle:283:         t = type(obj)
31M:79M:pickle:284:         f = self.dispatch.get(t)
31M:79M:pickle:285:         if f:
31M:79M:pickle:286:             f(self, obj) # Call unbound method with explicit self
31M:79M:pickle:731:         write = self.write
31M:79M:pickle:732:         memo = self.memo
31M:79M:pickle:734:         if name is None:
31M:79M:pickle:735:             name = obj.__name__
31M:79M:pickle:737:         module = getattr(obj, "__module__", None)
31M:79M:pickle:738:         if module is None:
31M:79M:pickle:741:         try:
31M:79M:pickle:742:             __import__(module)
31M:79M:pickle:743:             mod = sys.modules[module]
31M:79M:pickle:744:             klass = getattr(mod, name)
31M:79M:pickle:750:             if klass is not obj:
31M:79M:pickle:751:                 raise PicklingError(
31M:79M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
31M:79M:pickle:753:                     (obj, module, name))
31M:79M:setuptools.sandbox:109:         except Exception:
31M:79M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
39M:87M:setuptools.sandbox:107:         try:
39M:87M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
39M:87M:pickle:1373:     file = StringIO()
39M:87M:pickle:1374:     Pickler(file, protocol).dump(obj)
39M:87M:pickle:197:         if protocol is None:
39M:87M:pickle:198:             protocol = 0
39M:87M:pickle:199:         if protocol < 0:
39M:87M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
39M:87M:pickle:203:         self.write = file.write
39M:87M:pickle:204:         self.memo = {}
39M:87M:pickle:205:         self.proto = int(protocol)
39M:87M:pickle:206:         self.bin = protocol >= 1
39M:87M:pickle:207:         self.fast = 0
39M:87M:pickle:222:         if self.proto >= 2:
39M:87M:pickle:224:         self.save(obj)
39M:87M:pickle:271:         pid = self.persistent_id(obj)
39M:87M:pickle:335:         return None
39M:87M:pickle:272:         if pid is not None:
39M:87M:pickle:277:         x = self.memo.get(id(obj))
39M:87M:pickle:278:         if x:
39M:87M:pickle:283:         t = type(obj)
39M:87M:pickle:284:         f = self.dispatch.get(t)
39M:87M:pickle:285:         if f:
39M:87M:pickle:286:             f(self, obj) # Call unbound method with explicit self
39M:87M:pickle:731:         write = self.write
39M:87M:pickle:732:         memo = self.memo
39M:87M:pickle:734:         if name is None:
39M:87M:pickle:735:             name = obj.__name__
39M:87M:pickle:737:         module = getattr(obj, "__module__", None)
39M:87M:pickle:738:         if module is None:
39M:87M:pickle:741:         try:
39M:87M:pickle:742:             __import__(module)
39M:87M:pickle:743:             mod = sys.modules[module]
39M:87M:pickle:744:             klass = getattr(mod, name)
39M:87M:pickle:750:             if klass is not obj:
39M:87M:pickle:751:                 raise PicklingError(
39M:87M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
39M:87M:pickle:753:                     (obj, module, name))
39M:87M:setuptools.sandbox:109:         except Exception:
39M:87M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
55M:103M:setuptools.sandbox:107:         try:
55M:103M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
55M:103M:pickle:1373:     file = StringIO()
55M:103M:pickle:1374:     Pickler(file, protocol).dump(obj)
55M:103M:pickle:197:         if protocol is None:
55M:103M:pickle:198:             protocol = 0
55M:103M:pickle:199:         if protocol < 0:
55M:103M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
55M:103M:pickle:203:         self.write = file.write
55M:103M:pickle:204:         self.memo = {}
55M:103M:pickle:205:         self.proto = int(protocol)
55M:103M:pickle:206:         self.bin = protocol >= 1
55M:103M:pickle:207:         self.fast = 0
55M:103M:pickle:222:         if self.proto >= 2:
55M:103M:pickle:224:         self.save(obj)
55M:103M:pickle:271:         pid = self.persistent_id(obj)
55M:103M:pickle:335:         return None
55M:103M:pickle:272:         if pid is not None:
55M:103M:pickle:277:         x = self.memo.get(id(obj))
55M:103M:pickle:278:         if x:
55M:103M:pickle:283:         t = type(obj)
55M:103M:pickle:284:         f = self.dispatch.get(t)
55M:103M:pickle:285:         if f:
55M:103M:pickle:286:             f(self, obj) # Call unbound method with explicit self
55M:103M:pickle:731:         write = self.write
55M:103M:pickle:732:         memo = self.memo
55M:103M:pickle:734:         if name is None:
55M:103M:pickle:735:             name = obj.__name__
55M:103M:pickle:737:         module = getattr(obj, "__module__", None)
55M:103M:pickle:738:         if module is None:
55M:103M:pickle:741:         try:
55M:103M:pickle:742:             __import__(module)
55M:103M:pickle:743:             mod = sys.modules[module]
55M:103M:pickle:744:             klass = getattr(mod, name)
55M:103M:pickle:750:             if klass is not obj:
55M:103M:pickle:751:                 raise PicklingError(
55M:103M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
55M:103M:pickle:753:                     (obj, module, name))
55M:103M:setuptools.sandbox:109:         except Exception:
55M:103M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
87M:135M:setuptools.sandbox:107:         try:
87M:135M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
87M:135M:pickle:1373:     file = StringIO()
87M:135M:pickle:1374:     Pickler(file, protocol).dump(obj)
87M:135M:pickle:197:         if protocol is None:
87M:135M:pickle:198:             protocol = 0
87M:135M:pickle:199:         if protocol < 0:
87M:135M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
87M:135M:pickle:203:         self.write = file.write
87M:135M:pickle:204:         self.memo = {}
87M:135M:pickle:205:         self.proto = int(protocol)
87M:135M:pickle:206:         self.bin = protocol >= 1
87M:135M:pickle:207:         self.fast = 0
87M:135M:pickle:222:         if self.proto >= 2:
87M:135M:pickle:224:         self.save(obj)
87M:135M:pickle:271:         pid = self.persistent_id(obj)
87M:135M:pickle:335:         return None
87M:135M:pickle:272:         if pid is not None:
87M:135M:pickle:277:         x = self.memo.get(id(obj))
87M:135M:pickle:278:         if x:
87M:135M:pickle:283:         t = type(obj)
87M:135M:pickle:284:         f = self.dispatch.get(t)
87M:135M:pickle:285:         if f:
87M:135M:pickle:286:             f(self, obj) # Call unbound method with explicit self
87M:135M:pickle:731:         write = self.write
87M:135M:pickle:732:         memo = self.memo
87M:135M:pickle:734:         if name is None:
87M:135M:pickle:735:             name = obj.__name__
87M:135M:pickle:737:         module = getattr(obj, "__module__", None)
87M:135M:pickle:738:         if module is None:
87M:135M:pickle:741:         try:
87M:135M:pickle:742:             __import__(module)
87M:135M:pickle:743:             mod = sys.modules[module]
87M:135M:pickle:744:             klass = getattr(mod, name)
87M:135M:pickle:750:             if klass is not obj:
87M:135M:pickle:751:                 raise PicklingError(
87M:135M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
87M:135M:pickle:753:                     (obj, module, name))
87M:135M:setuptools.sandbox:109:         except Exception:
87M:135M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
119M:167M:setuptools.sandbox:107:         try:
119M:167M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
119M:167M:pickle:1373:     file = StringIO()
119M:167M:pickle:1374:     Pickler(file, protocol).dump(obj)
119M:167M:pickle:197:         if protocol is None:
119M:167M:pickle:198:             protocol = 0
119M:167M:pickle:199:         if protocol < 0:
119M:167M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
119M:167M:pickle:203:         self.write = file.write
119M:167M:pickle:204:         self.memo = {}
119M:167M:pickle:205:         self.proto = int(protocol)
119M:167M:pickle:206:         self.bin = protocol >= 1
119M:167M:pickle:207:         self.fast = 0
119M:167M:pickle:222:         if self.proto >= 2:
119M:167M:pickle:224:         self.save(obj)
119M:167M:pickle:271:         pid = self.persistent_id(obj)
119M:167M:pickle:335:         return None
119M:167M:pickle:272:         if pid is not None:
119M:167M:pickle:277:         x = self.memo.get(id(obj))
119M:167M:pickle:278:         if x:
119M:167M:pickle:283:         t = type(obj)
119M:167M:pickle:284:         f = self.dispatch.get(t)
119M:167M:pickle:285:         if f:
119M:167M:pickle:286:             f(self, obj) # Call unbound method with explicit self
119M:167M:pickle:731:         write = self.write
119M:167M:pickle:732:         memo = self.memo
119M:167M:pickle:734:         if name is None:
119M:167M:pickle:735:             name = obj.__name__
119M:167M:pickle:737:         module = getattr(obj, "__module__", None)
119M:167M:pickle:738:         if module is None:
119M:167M:pickle:741:         try:
119M:167M:pickle:742:             __import__(module)
119M:167M:pickle:743:             mod = sys.modules[module]
119M:167M:pickle:744:             klass = getattr(mod, name)
119M:167M:pickle:750:             if klass is not obj:
119M:167M:pickle:751:                 raise PicklingError(
119M:167M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
119M:167M:pickle:753:                     (obj, module, name))
119M:167M:setuptools.sandbox:109:         except Exception:
119M:167M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
183M:231M:setuptools.sandbox:107:         try:
183M:231M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
183M:231M:pickle:1373:     file = StringIO()
183M:231M:pickle:1374:     Pickler(file, protocol).dump(obj)
183M:231M:pickle:197:         if protocol is None:
183M:231M:pickle:198:             protocol = 0
183M:231M:pickle:199:         if protocol < 0:
183M:231M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
183M:231M:pickle:203:         self.write = file.write
183M:231M:pickle:204:         self.memo = {}
183M:231M:pickle:205:         self.proto = int(protocol)
183M:231M:pickle:206:         self.bin = protocol >= 1
183M:231M:pickle:207:         self.fast = 0
183M:231M:pickle:222:         if self.proto >= 2:
183M:231M:pickle:224:         self.save(obj)
183M:231M:pickle:271:         pid = self.persistent_id(obj)
183M:231M:pickle:335:         return None
183M:231M:pickle:272:         if pid is not None:
183M:231M:pickle:277:         x = self.memo.get(id(obj))
183M:231M:pickle:278:         if x:
183M:231M:pickle:283:         t = type(obj)
183M:231M:pickle:284:         f = self.dispatch.get(t)
183M:231M:pickle:285:         if f:
183M:231M:pickle:286:             f(self, obj) # Call unbound method with explicit self
183M:231M:pickle:731:         write = self.write
183M:231M:pickle:732:         memo = self.memo
183M:231M:pickle:734:         if name is None:
183M:231M:pickle:735:             name = obj.__name__
183M:231M:pickle:737:         module = getattr(obj, "__module__", None)
183M:231M:pickle:738:         if module is None:
183M:231M:pickle:741:         try:
183M:231M:pickle:742:             __import__(module)
183M:231M:pickle:743:             mod = sys.modules[module]
183M:231M:pickle:744:             klass = getattr(mod, name)
183M:231M:pickle:750:             if klass is not obj:
183M:231M:pickle:751:                 raise PicklingError(
183M:231M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
183M:231M:pickle:753:                     (obj, module, name))
183M:231M:setuptools.sandbox:109:         except Exception:
183M:231M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
311M:359M:setuptools.sandbox:107:         try:
311M:359M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
311M:359M:pickle:1373:     file = StringIO()
311M:359M:pickle:1374:     Pickler(file, protocol).dump(obj)
311M:359M:pickle:197:         if protocol is None:
311M:359M:pickle:198:             protocol = 0
311M:359M:pickle:199:         if protocol < 0:
311M:359M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
311M:359M:pickle:203:         self.write = file.write
311M:359M:pickle:204:         self.memo = {}
311M:359M:pickle:205:         self.proto = int(protocol)
311M:359M:pickle:206:         self.bin = protocol >= 1
311M:359M:pickle:207:         self.fast = 0
311M:359M:pickle:222:         if self.proto >= 2:
311M:359M:pickle:224:         self.save(obj)
311M:359M:pickle:271:         pid = self.persistent_id(obj)
311M:359M:pickle:335:         return None
311M:359M:pickle:272:         if pid is not None:
311M:359M:pickle:277:         x = self.memo.get(id(obj))
311M:359M:pickle:278:         if x:
311M:359M:pickle:283:         t = type(obj)
311M:359M:pickle:284:         f = self.dispatch.get(t)
311M:359M:pickle:285:         if f:
311M:359M:pickle:286:             f(self, obj) # Call unbound method with explicit self
311M:359M:pickle:731:         write = self.write
311M:359M:pickle:732:         memo = self.memo
311M:359M:pickle:734:         if name is None:
311M:359M:pickle:735:             name = obj.__name__
311M:359M:pickle:737:         module = getattr(obj, "__module__", None)
311M:359M:pickle:738:         if module is None:
311M:359M:pickle:741:         try:
311M:359M:pickle:742:             __import__(module)
311M:359M:pickle:743:             mod = sys.modules[module]
311M:359M:pickle:744:             klass = getattr(mod, name)
311M:359M:pickle:750:             if klass is not obj:
311M:359M:pickle:751:                 raise PicklingError(
311M:359M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
311M:359M:pickle:753:                     (obj, module, name))
311M:359M:setuptools.sandbox:109:         except Exception:
311M:359M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
567M:615M:setuptools.sandbox:107:         try:
567M:615M:setuptools.sandbox:108:             return pickle.dumps(type), pickle.dumps(exc)
567M:615M:pickle:1373:     file = StringIO()
567M:615M:pickle:1374:     Pickler(file, protocol).dump(obj)
567M:615M:pickle:197:         if protocol is None:
567M:615M:pickle:198:             protocol = 0
567M:615M:pickle:199:         if protocol < 0:
567M:615M:pickle:201:         elif not 0 <= protocol <= HIGHEST_PROTOCOL:
567M:615M:pickle:203:         self.write = file.write
567M:615M:pickle:204:         self.memo = {}
567M:615M:pickle:205:         self.proto = int(protocol)
567M:615M:pickle:206:         self.bin = protocol >= 1
567M:615M:pickle:207:         self.fast = 0
567M:615M:pickle:222:         if self.proto >= 2:
567M:615M:pickle:224:         self.save(obj)
567M:615M:pickle:271:         pid = self.persistent_id(obj)
567M:615M:pickle:335:         return None
567M:615M:pickle:272:         if pid is not None:
567M:615M:pickle:277:         x = self.memo.get(id(obj))
567M:615M:pickle:278:         if x:
567M:615M:pickle:283:         t = type(obj)
567M:615M:pickle:284:         f = self.dispatch.get(t)
567M:615M:pickle:285:         if f:
567M:615M:pickle:286:             f(self, obj) # Call unbound method with explicit self
567M:615M:pickle:731:         write = self.write
567M:615M:pickle:732:         memo = self.memo
567M:615M:pickle:734:         if name is None:
567M:615M:pickle:735:             name = obj.__name__
567M:615M:pickle:737:         module = getattr(obj, "__module__", None)
567M:615M:pickle:738:         if module is None:
567M:615M:pickle:741:         try:
567M:615M:pickle:742:             __import__(module)
567M:615M:pickle:743:             mod = sys.modules[module]
567M:615M:pickle:744:             klass = getattr(mod, name)
567M:615M:pickle:750:             if klass is not obj:
567M:615M:pickle:751:                 raise PicklingError(
567M:615M:pickle:752:                     "Can't pickle %r: it's not the same object as %s.%s" %
567M:615M:pickle:753:                     (obj, module, name))
567M:615M:setuptools.sandbox:109:         except Exception:
567M:615M:setuptools.sandbox:110:             return cls.dump(cls, cls(repr(exc)))
EXCEPTION IN (/mnt/data/home/stu/.virtualenvs/tmpv3/local/lib/python2.7/site-packages/memwatch-0.0.1-py2.7.egg/memwatch/memwatch.py, LINE 200 "exec(code, _globals, dict())"): VMS Exceeded 943718400 bytes [900M]
