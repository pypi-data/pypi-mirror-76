# coding: utf-8

"""
    Tekton

    Python SDK for Tekton Pipeline  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client import V1Container  # noqa: F401,E501
from kubernetes.client import V1Volume  # noqa: F401,E501
from tekton.models.v1beta1_param_spec import V1beta1ParamSpec  # noqa: F401,E501
from tekton.models.v1beta1_step import V1beta1Step  # noqa: F401,E501
from tekton.models.v1beta1_task_resources import V1beta1TaskResources  # noqa: F401,E501
from tekton.models.v1beta1_task_result import V1beta1TaskResult  # noqa: F401,E501
from tekton.models.v1beta1_workspace_declaration import V1beta1WorkspaceDeclaration  # noqa: F401,E501


class V1beta1TaskSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'params': 'list[V1beta1ParamSpec]',
        'resources': 'V1beta1TaskResources',
        'results': 'list[V1beta1TaskResult]',
        'sidecars': 'list[V1beta1Step]',
        'step_template': 'V1Container',
        'steps': 'list[V1beta1Step]',
        'volumes': 'list[V1Volume]',
        'workspaces': 'list[V1beta1WorkspaceDeclaration]'
    }

    attribute_map = {
        'description': 'description',
        'params': 'params',
        'resources': 'resources',
        'results': 'results',
        'sidecars': 'sidecars',
        'step_template': 'stepTemplate',
        'steps': 'steps',
        'volumes': 'volumes',
        'workspaces': 'workspaces'
    }

    def __init__(self, description=None, params=None, resources=None, results=None, sidecars=None, step_template=None, steps=None, volumes=None, workspaces=None):  # noqa: E501
        """V1beta1TaskSpec - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._params = None
        self._resources = None
        self._results = None
        self._sidecars = None
        self._step_template = None
        self._steps = None
        self._volumes = None
        self._workspaces = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if params is not None:
            self.params = params
        if resources is not None:
            self.resources = resources
        if results is not None:
            self.results = results
        if sidecars is not None:
            self.sidecars = sidecars
        if step_template is not None:
            self.step_template = step_template
        if steps is not None:
            self.steps = steps
        if volumes is not None:
            self.volumes = volumes
        if workspaces is not None:
            self.workspaces = workspaces

    @property
    def description(self):
        """Gets the description of this V1beta1TaskSpec.  # noqa: E501

        Description is a user-facing description of the task that may be used to populate a UI.  # noqa: E501

        :return: The description of this V1beta1TaskSpec.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1beta1TaskSpec.

        Description is a user-facing description of the task that may be used to populate a UI.  # noqa: E501

        :param description: The description of this V1beta1TaskSpec.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def params(self):
        """Gets the params of this V1beta1TaskSpec.  # noqa: E501

        Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.  # noqa: E501

        :return: The params of this V1beta1TaskSpec.  # noqa: E501
        :rtype: list[V1beta1ParamSpec]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this V1beta1TaskSpec.

        Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.  # noqa: E501

        :param params: The params of this V1beta1TaskSpec.  # noqa: E501
        :type: list[V1beta1ParamSpec]
        """

        self._params = params

    @property
    def resources(self):
        """Gets the resources of this V1beta1TaskSpec.  # noqa: E501

        Resources is a list input and output resource to run the task Resources are represented in TaskRuns as bindings to instances of PipelineResources.  # noqa: E501

        :return: The resources of this V1beta1TaskSpec.  # noqa: E501
        :rtype: V1beta1TaskResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this V1beta1TaskSpec.

        Resources is a list input and output resource to run the task Resources are represented in TaskRuns as bindings to instances of PipelineResources.  # noqa: E501

        :param resources: The resources of this V1beta1TaskSpec.  # noqa: E501
        :type: V1beta1TaskResources
        """

        self._resources = resources

    @property
    def results(self):
        """Gets the results of this V1beta1TaskSpec.  # noqa: E501

        Results are values that this Task can output  # noqa: E501

        :return: The results of this V1beta1TaskSpec.  # noqa: E501
        :rtype: list[V1beta1TaskResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this V1beta1TaskSpec.

        Results are values that this Task can output  # noqa: E501

        :param results: The results of this V1beta1TaskSpec.  # noqa: E501
        :type: list[V1beta1TaskResult]
        """

        self._results = results

    @property
    def sidecars(self):
        """Gets the sidecars of this V1beta1TaskSpec.  # noqa: E501

        Sidecars are run alongside the Task's step containers. They begin before the steps start and end after the steps complete.  # noqa: E501

        :return: The sidecars of this V1beta1TaskSpec.  # noqa: E501
        :rtype: list[V1beta1Step]
        """
        return self._sidecars

    @sidecars.setter
    def sidecars(self, sidecars):
        """Sets the sidecars of this V1beta1TaskSpec.

        Sidecars are run alongside the Task's step containers. They begin before the steps start and end after the steps complete.  # noqa: E501

        :param sidecars: The sidecars of this V1beta1TaskSpec.  # noqa: E501
        :type: list[V1beta1Step]
        """

        self._sidecars = sidecars

    @property
    def step_template(self):
        """Gets the step_template of this V1beta1TaskSpec.  # noqa: E501

        StepTemplate can be used as the basis for all step containers within the Task, so that the steps inherit settings on the base container.  # noqa: E501

        :return: The step_template of this V1beta1TaskSpec.  # noqa: E501
        :rtype: V1Container
        """
        return self._step_template

    @step_template.setter
    def step_template(self, step_template):
        """Sets the step_template of this V1beta1TaskSpec.

        StepTemplate can be used as the basis for all step containers within the Task, so that the steps inherit settings on the base container.  # noqa: E501

        :param step_template: The step_template of this V1beta1TaskSpec.  # noqa: E501
        :type: V1Container
        """

        self._step_template = step_template

    @property
    def steps(self):
        """Gets the steps of this V1beta1TaskSpec.  # noqa: E501

        Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.  # noqa: E501

        :return: The steps of this V1beta1TaskSpec.  # noqa: E501
        :rtype: list[V1beta1Step]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this V1beta1TaskSpec.

        Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.  # noqa: E501

        :param steps: The steps of this V1beta1TaskSpec.  # noqa: E501
        :type: list[V1beta1Step]
        """

        self._steps = steps

    @property
    def volumes(self):
        """Gets the volumes of this V1beta1TaskSpec.  # noqa: E501

        Volumes is a collection of volumes that are available to mount into the steps of the build.  # noqa: E501

        :return: The volumes of this V1beta1TaskSpec.  # noqa: E501
        :rtype: list[V1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this V1beta1TaskSpec.

        Volumes is a collection of volumes that are available to mount into the steps of the build.  # noqa: E501

        :param volumes: The volumes of this V1beta1TaskSpec.  # noqa: E501
        :type: list[V1Volume]
        """

        self._volumes = volumes

    @property
    def workspaces(self):
        """Gets the workspaces of this V1beta1TaskSpec.  # noqa: E501

        Workspaces are the volumes that this Task requires.  # noqa: E501

        :return: The workspaces of this V1beta1TaskSpec.  # noqa: E501
        :rtype: list[V1beta1WorkspaceDeclaration]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this V1beta1TaskSpec.

        Workspaces are the volumes that this Task requires.  # noqa: E501

        :param workspaces: The workspaces of this V1beta1TaskSpec.  # noqa: E501
        :type: list[V1beta1WorkspaceDeclaration]
        """

        self._workspaces = workspaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1TaskSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1TaskSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
