# coding: utf-8

"""
    Tekton

    Python SDK for Tekton Pipeline  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tekton.models.pod_template import PodTemplate  # noqa: F401,E501


class V1beta1PipelineTaskRunSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pipeline_task_name': 'str',
        'task_pod_template': 'PodTemplate',
        'task_service_account_name': 'str'
    }

    attribute_map = {
        'pipeline_task_name': 'pipelineTaskName',
        'task_pod_template': 'taskPodTemplate',
        'task_service_account_name': 'taskServiceAccountName'
    }

    def __init__(self, pipeline_task_name=None, task_pod_template=None, task_service_account_name=None):  # noqa: E501
        """V1beta1PipelineTaskRunSpec - a model defined in Swagger"""  # noqa: E501

        self._pipeline_task_name = None
        self._task_pod_template = None
        self._task_service_account_name = None
        self.discriminator = None

        if pipeline_task_name is not None:
            self.pipeline_task_name = pipeline_task_name
        if task_pod_template is not None:
            self.task_pod_template = task_pod_template
        if task_service_account_name is not None:
            self.task_service_account_name = task_service_account_name

    @property
    def pipeline_task_name(self):
        """Gets the pipeline_task_name of this V1beta1PipelineTaskRunSpec.  # noqa: E501


        :return: The pipeline_task_name of this V1beta1PipelineTaskRunSpec.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_task_name

    @pipeline_task_name.setter
    def pipeline_task_name(self, pipeline_task_name):
        """Sets the pipeline_task_name of this V1beta1PipelineTaskRunSpec.


        :param pipeline_task_name: The pipeline_task_name of this V1beta1PipelineTaskRunSpec.  # noqa: E501
        :type: str
        """

        self._pipeline_task_name = pipeline_task_name

    @property
    def task_pod_template(self):
        """Gets the task_pod_template of this V1beta1PipelineTaskRunSpec.  # noqa: E501


        :return: The task_pod_template of this V1beta1PipelineTaskRunSpec.  # noqa: E501
        :rtype: PodTemplate
        """
        return self._task_pod_template

    @task_pod_template.setter
    def task_pod_template(self, task_pod_template):
        """Sets the task_pod_template of this V1beta1PipelineTaskRunSpec.


        :param task_pod_template: The task_pod_template of this V1beta1PipelineTaskRunSpec.  # noqa: E501
        :type: PodTemplate
        """

        self._task_pod_template = task_pod_template

    @property
    def task_service_account_name(self):
        """Gets the task_service_account_name of this V1beta1PipelineTaskRunSpec.  # noqa: E501


        :return: The task_service_account_name of this V1beta1PipelineTaskRunSpec.  # noqa: E501
        :rtype: str
        """
        return self._task_service_account_name

    @task_service_account_name.setter
    def task_service_account_name(self, task_service_account_name):
        """Sets the task_service_account_name of this V1beta1PipelineTaskRunSpec.


        :param task_service_account_name: The task_service_account_name of this V1beta1PipelineTaskRunSpec.  # noqa: E501
        :type: str
        """

        self._task_service_account_name = task_service_account_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1PipelineTaskRunSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1PipelineTaskRunSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
