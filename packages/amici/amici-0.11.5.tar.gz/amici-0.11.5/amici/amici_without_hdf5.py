# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
Core C++ bindings
-----------------
This module encompasses the complete public C++ API of AMICI, which was
exposed via swig. All functions listed here are directly accessible in the
main amici package, i.e., `amici.amici.ExpData` is available as `amici
.ExpData`. Usage of functions and classes from the base `amici` package is
generally recommended as they often include convenience wrappers that avoid
common pitfalls when accessing C++ types from python and implement some
nonstandard type conversions.
"""

from typing import Iterable



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_amici')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_amici')
    _amici = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_amici', [dirname(__file__)])
        except ImportError:
            import _amici
            return _amici
        try:
            _mod = imp.load_module('_amici', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _amici = swig_import_helper()
    del swig_import_helper
else:
    import _amici
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _amici.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _amici.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _amici.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _amici.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _amici.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _amici.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _amici.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _amici.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _amici.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _amici.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _amici.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _amici.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _amici.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _amici.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _amici.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _amici.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _amici.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amici.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amici.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amici.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _amici.DoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _amici.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amici.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _amici.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amici.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _amici.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amici.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _amici.DoubleVector_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _amici.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _amici.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _amici.DoubleVector_size(self)

    def swap(self, v: 'DoubleVector') -> "void":
        return _amici.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _amici.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _amici.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _amici.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _amici.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _amici.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _amici.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _amici.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _amici.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _amici.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _amici.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _amici.DoubleVector_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _amici.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amici.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amici.DoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _amici.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _amici.DoubleVector_capacity(self)
    __swig_destroy__ = _amici.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _amici.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amici.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amici.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amici.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _amici.IntVector___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _amici.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amici.IntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _amici.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amici.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _amici.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amici.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _amici.IntVector_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _amici.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _amici.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _amici.IntVector_size(self)

    def swap(self, v: 'IntVector') -> "void":
        return _amici.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _amici.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _amici.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _amici.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _amici.IntVector_rend(self)

    def clear(self) -> "void":
        return _amici.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _amici.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _amici.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _amici.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _amici.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _amici.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _amici.IntVector_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _amici.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amici.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amici.IntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _amici.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _amici.IntVector_capacity(self)
    __swig_destroy__ = _amici.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _amici.IntVector_swigregister
IntVector_swigregister(IntVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amici.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amici.BoolVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amici.BoolVector___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _amici.BoolVector___len__(self)

    def __getslice__(self, i: 'std::vector< bool >::difference_type', j: 'std::vector< bool >::difference_type') -> "std::vector< bool,std::allocator< bool > > *":
        return _amici.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amici.BoolVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< bool >::difference_type', j: 'std::vector< bool >::difference_type') -> "void":
        return _amici.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amici.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _amici.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amici.BoolVector___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _amici.BoolVector_pop(self)

    def append(self, x: 'std::vector< bool >::value_type') -> "void":
        return _amici.BoolVector_append(self, x)

    def empty(self) -> "bool":
        return _amici.BoolVector_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _amici.BoolVector_size(self)

    def swap(self, v: 'BoolVector') -> "void":
        return _amici.BoolVector_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _amici.BoolVector_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _amici.BoolVector_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _amici.BoolVector_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _amici.BoolVector_rend(self)

    def clear(self) -> "void":
        return _amici.BoolVector_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _amici.BoolVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _amici.BoolVector_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _amici.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_BoolVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< bool >::value_type') -> "void":
        return _amici.BoolVector_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _amici.BoolVector_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _amici.BoolVector_back(self)

    def assign(self, n: 'std::vector< bool >::size_type', x: 'std::vector< bool >::value_type') -> "void":
        return _amici.BoolVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amici.BoolVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amici.BoolVector_insert(self, *args)

    def reserve(self, n: 'std::vector< bool >::size_type') -> "void":
        return _amici.BoolVector_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _amici.BoolVector_capacity(self)
    __swig_destroy__ = _amici.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _amici.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amici.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amici.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amici.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _amici.StringVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _amici.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amici.StringVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _amici.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amici.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _amici.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amici.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _amici.StringVector_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _amici.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _amici.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _amici.StringVector_size(self)

    def swap(self, v: 'StringVector') -> "void":
        return _amici.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _amici.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _amici.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _amici.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _amici.StringVector_rend(self)

    def clear(self) -> "void":
        return _amici.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _amici.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _amici.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _amici.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _amici.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _amici.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _amici.StringVector_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _amici.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amici.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amici.StringVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _amici.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _amici.StringVector_capacity(self)
    __swig_destroy__ = _amici.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _amici.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringDoubleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringDoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringDoubleMap, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amici.StringDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amici.StringDoubleMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amici.StringDoubleMap___bool__(self)

    def __len__(self) -> "std::map< std::string,double >::size_type":
        return _amici.StringDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::string,double >::key_type const &') -> "std::map< std::string,double >::mapped_type const &":
        return _amici.StringDoubleMap___getitem__(self, key)

    def __delitem__(self, key: 'std::map< std::string,double >::key_type const &') -> "void":
        return _amici.StringDoubleMap___delitem__(self, key)

    def has_key(self, key: 'std::map< std::string,double >::key_type const &') -> "bool":
        return _amici.StringDoubleMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _amici.StringDoubleMap_keys(self)

    def values(self) -> "PyObject *":
        return _amici.StringDoubleMap_values(self)

    def items(self) -> "PyObject *":
        return _amici.StringDoubleMap_items(self)

    def __contains__(self, key: 'std::map< std::string,double >::key_type const &') -> "bool":
        return _amici.StringDoubleMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _amici.StringDoubleMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _amici.StringDoubleMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _amici.StringDoubleMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _amici.StringDoubleMap_asdict(self)

    def __init__(self, *args):
        this = _amici.new_StringDoubleMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _amici.StringDoubleMap_empty(self)

    def size(self) -> "std::map< std::string,double >::size_type":
        return _amici.StringDoubleMap_size(self)

    def swap(self, v: 'StringDoubleMap') -> "void":
        return _amici.StringDoubleMap_swap(self, v)

    def begin(self) -> "std::map< std::string,double >::iterator":
        return _amici.StringDoubleMap_begin(self)

    def end(self) -> "std::map< std::string,double >::iterator":
        return _amici.StringDoubleMap_end(self)

    def rbegin(self) -> "std::map< std::string,double >::reverse_iterator":
        return _amici.StringDoubleMap_rbegin(self)

    def rend(self) -> "std::map< std::string,double >::reverse_iterator":
        return _amici.StringDoubleMap_rend(self)

    def clear(self) -> "void":
        return _amici.StringDoubleMap_clear(self)

    def get_allocator(self) -> "std::map< std::string,double >::allocator_type":
        return _amici.StringDoubleMap_get_allocator(self)

    def count(self, x: 'std::map< std::string,double >::key_type const &') -> "std::map< std::string,double >::size_type":
        return _amici.StringDoubleMap_count(self, x)

    def erase(self, *args) -> "void":
        return _amici.StringDoubleMap_erase(self, *args)

    def find(self, x: 'std::map< std::string,double >::key_type const &') -> "std::map< std::string,double >::iterator":
        return _amici.StringDoubleMap_find(self, x)

    def lower_bound(self, x: 'std::map< std::string,double >::key_type const &') -> "std::map< std::string,double >::iterator":
        return _amici.StringDoubleMap_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< std::string,double >::key_type const &') -> "std::map< std::string,double >::iterator":
        return _amici.StringDoubleMap_upper_bound(self, x)
    __swig_destroy__ = _amici.delete_StringDoubleMap
    __del__ = lambda self: None
StringDoubleMap_swigregister = _amici.StringDoubleMap_swigregister
StringDoubleMap_swigregister(StringDoubleMap)


def stdVec2ndarray(*args) -> "PyObject *":
    return _amici.stdVec2ndarray(*args)
stdVec2ndarray = _amici.stdVec2ndarray
class SolverPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolverPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_SolverPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "std::unique_ptr< amici::Solver >::pointer":
        return _amici.SolverPtr___deref__(self)

    def release(self) -> "std::unique_ptr< amici::Solver >::pointer":
        return _amici.SolverPtr_release(self)

    def reset(self, *args) -> "void":
        return _amici.SolverPtr_reset(self, *args)

    def swap(self, __u: 'SolverPtr') -> "void":
        return _amici.SolverPtr_swap(self, __u)

    def get(self) -> "std::unique_ptr< amici::Solver >::pointer":
        return _amici.SolverPtr_get(self)

    def __nonzero__(self):
        return _amici.SolverPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _amici.delete_SolverPtr
    __del__ = lambda self: None

    def clone(self) -> "amici::Solver *":
        return _amici.SolverPtr_clone(self)

    def run(self, tout: 'amici::realtype') -> "int":
        return _amici.SolverPtr_run(self, tout)

    def step(self, tout: 'amici::realtype') -> "int":
        return _amici.SolverPtr_step(self, tout)

    def runB(self, tout: 'amici::realtype') -> "void":
        return _amici.SolverPtr_runB(self, tout)

    def updateAndReinitStatesAndSensitivities(self, model: 'Model') -> "void":
        return _amici.SolverPtr_updateAndReinitStatesAndSensitivities(self, model)

    def getRootInfo(self, rootsfound: 'int *') -> "void":
        return _amici.SolverPtr_getRootInfo(self, rootsfound)

    def calcIC(self, tout1: 'amici::realtype') -> "void":
        return _amici.SolverPtr_calcIC(self, tout1)

    def calcICB(self, which: 'int', tout1: 'amici::realtype') -> "void":
        return _amici.SolverPtr_calcICB(self, which, tout1)

    def solveB(self, tBout: 'amici::realtype', itaskB: 'int') -> "void":
        return _amici.SolverPtr_solveB(self, tBout, itaskB)

    def turnOffRootFinding(self) -> "void":
        return _amici.SolverPtr_turnOffRootFinding(self)

    def getSensitivityMethod(self) -> "amici::SensitivityMethod":
        return _amici.SolverPtr_getSensitivityMethod(self)

    def setSensitivityMethod(self, sensi_meth: 'amici::SensitivityMethod') -> "void":
        return _amici.SolverPtr_setSensitivityMethod(self, sensi_meth)

    def getSensitivityMethodPreequilibration(self) -> "amici::SensitivityMethod":
        return _amici.SolverPtr_getSensitivityMethodPreequilibration(self)

    def setSensitivityMethodPreequilibration(self, sensi_meth_preeq: 'amici::SensitivityMethod') -> "void":
        return _amici.SolverPtr_setSensitivityMethodPreequilibration(self, sensi_meth_preeq)

    def switchForwardSensisOff(self) -> "void":
        return _amici.SolverPtr_switchForwardSensisOff(self)

    def getNewtonMaxSteps(self) -> "int":
        return _amici.SolverPtr_getNewtonMaxSteps(self)

    def setNewtonMaxSteps(self, newton_maxsteps: 'int') -> "void":
        return _amici.SolverPtr_setNewtonMaxSteps(self, newton_maxsteps)

    def getPreequilibration(self) -> "bool":
        return _amici.SolverPtr_getPreequilibration(self)

    def setPreequilibration(self, require_preequilibration: 'bool') -> "void":
        return _amici.SolverPtr_setPreequilibration(self, require_preequilibration)

    def getNewtonMaxLinearSteps(self) -> "int":
        return _amici.SolverPtr_getNewtonMaxLinearSteps(self)

    def setNewtonMaxLinearSteps(self, newton_maxlinsteps: 'int') -> "void":
        return _amici.SolverPtr_setNewtonMaxLinearSteps(self, newton_maxlinsteps)

    def getNewtonDampingFactorMode(self) -> "amici::NewtonDampingFactorMode":
        return _amici.SolverPtr_getNewtonDampingFactorMode(self)

    def setNewtonDampingFactorMode(self, dampingFactorMode: 'amici::NewtonDampingFactorMode') -> "void":
        return _amici.SolverPtr_setNewtonDampingFactorMode(self, dampingFactorMode)

    def getNewtonDampingFactorLowerBound(self) -> "double":
        return _amici.SolverPtr_getNewtonDampingFactorLowerBound(self)

    def setNewtonDampingFactorLowerBound(self, dampingFactorLowerBound: 'double') -> "void":
        return _amici.SolverPtr_setNewtonDampingFactorLowerBound(self, dampingFactorLowerBound)

    def getSensitivityOrder(self) -> "amici::SensitivityOrder":
        return _amici.SolverPtr_getSensitivityOrder(self)

    def setSensitivityOrder(self, sensi: 'amici::SensitivityOrder') -> "void":
        return _amici.SolverPtr_setSensitivityOrder(self, sensi)

    def getRelativeTolerance(self) -> "double":
        return _amici.SolverPtr_getRelativeTolerance(self)

    def setRelativeTolerance(self, rtol: 'double') -> "void":
        return _amici.SolverPtr_setRelativeTolerance(self, rtol)

    def getAbsoluteTolerance(self) -> "double":
        return _amici.SolverPtr_getAbsoluteTolerance(self)

    def setAbsoluteTolerance(self, atol: 'double') -> "void":
        return _amici.SolverPtr_setAbsoluteTolerance(self, atol)

    def getRelativeToleranceFSA(self) -> "double":
        return _amici.SolverPtr_getRelativeToleranceFSA(self)

    def setRelativeToleranceFSA(self, rtol: 'double') -> "void":
        return _amici.SolverPtr_setRelativeToleranceFSA(self, rtol)

    def getAbsoluteToleranceFSA(self) -> "double":
        return _amici.SolverPtr_getAbsoluteToleranceFSA(self)

    def setAbsoluteToleranceFSA(self, atol: 'double') -> "void":
        return _amici.SolverPtr_setAbsoluteToleranceFSA(self, atol)

    def getRelativeToleranceB(self) -> "double":
        return _amici.SolverPtr_getRelativeToleranceB(self)

    def setRelativeToleranceB(self, rtol: 'double') -> "void":
        return _amici.SolverPtr_setRelativeToleranceB(self, rtol)

    def getAbsoluteToleranceB(self) -> "double":
        return _amici.SolverPtr_getAbsoluteToleranceB(self)

    def setAbsoluteToleranceB(self, atol: 'double') -> "void":
        return _amici.SolverPtr_setAbsoluteToleranceB(self, atol)

    def getRelativeToleranceQuadratures(self) -> "double":
        return _amici.SolverPtr_getRelativeToleranceQuadratures(self)

    def setRelativeToleranceQuadratures(self, rtol: 'double') -> "void":
        return _amici.SolverPtr_setRelativeToleranceQuadratures(self, rtol)

    def getAbsoluteToleranceQuadratures(self) -> "double":
        return _amici.SolverPtr_getAbsoluteToleranceQuadratures(self)

    def setAbsoluteToleranceQuadratures(self, atol: 'double') -> "void":
        return _amici.SolverPtr_setAbsoluteToleranceQuadratures(self, atol)

    def getRelativeToleranceSteadyState(self) -> "double":
        return _amici.SolverPtr_getRelativeToleranceSteadyState(self)

    def setRelativeToleranceSteadyState(self, rtol: 'double') -> "void":
        return _amici.SolverPtr_setRelativeToleranceSteadyState(self, rtol)

    def getAbsoluteToleranceSteadyState(self) -> "double":
        return _amici.SolverPtr_getAbsoluteToleranceSteadyState(self)

    def setAbsoluteToleranceSteadyState(self, atol: 'double') -> "void":
        return _amici.SolverPtr_setAbsoluteToleranceSteadyState(self, atol)

    def getRelativeToleranceSteadyStateSensi(self) -> "double":
        return _amici.SolverPtr_getRelativeToleranceSteadyStateSensi(self)

    def setRelativeToleranceSteadyStateSensi(self, rtol: 'double') -> "void":
        return _amici.SolverPtr_setRelativeToleranceSteadyStateSensi(self, rtol)

    def getAbsoluteToleranceSteadyStateSensi(self) -> "double":
        return _amici.SolverPtr_getAbsoluteToleranceSteadyStateSensi(self)

    def setAbsoluteToleranceSteadyStateSensi(self, atol: 'double') -> "void":
        return _amici.SolverPtr_setAbsoluteToleranceSteadyStateSensi(self, atol)

    def getMaxSteps(self) -> "long":
        return _amici.SolverPtr_getMaxSteps(self)

    def setMaxSteps(self, maxsteps: 'long') -> "void":
        return _amici.SolverPtr_setMaxSteps(self, maxsteps)

    def getMaxStepsBackwardProblem(self) -> "long":
        return _amici.SolverPtr_getMaxStepsBackwardProblem(self)

    def setMaxStepsBackwardProblem(self, maxsteps: 'long') -> "void":
        return _amici.SolverPtr_setMaxStepsBackwardProblem(self, maxsteps)

    def getLinearMultistepMethod(self) -> "amici::LinearMultistepMethod":
        return _amici.SolverPtr_getLinearMultistepMethod(self)

    def setLinearMultistepMethod(self, lmm: 'amici::LinearMultistepMethod') -> "void":
        return _amici.SolverPtr_setLinearMultistepMethod(self, lmm)

    def getNonlinearSolverIteration(self) -> "amici::NonlinearSolverIteration":
        return _amici.SolverPtr_getNonlinearSolverIteration(self)

    def setNonlinearSolverIteration(self, iter: 'amici::NonlinearSolverIteration') -> "void":
        return _amici.SolverPtr_setNonlinearSolverIteration(self, iter)

    def getInterpolationType(self) -> "amici::InterpolationType":
        return _amici.SolverPtr_getInterpolationType(self)

    def setInterpolationType(self, interpType: 'amici::InterpolationType') -> "void":
        return _amici.SolverPtr_setInterpolationType(self, interpType)

    def getStateOrdering(self) -> "int":
        return _amici.SolverPtr_getStateOrdering(self)

    def setStateOrdering(self, ordering: 'int') -> "void":
        return _amici.SolverPtr_setStateOrdering(self, ordering)

    def getStabilityLimitFlag(self) -> "bool":
        return _amici.SolverPtr_getStabilityLimitFlag(self)

    def setStabilityLimitFlag(self, stldet: 'bool') -> "void":
        return _amici.SolverPtr_setStabilityLimitFlag(self, stldet)

    def getLinearSolver(self) -> "amici::LinearSolver":
        return _amici.SolverPtr_getLinearSolver(self)

    def setLinearSolver(self, linsol: 'amici::LinearSolver') -> "void":
        return _amici.SolverPtr_setLinearSolver(self, linsol)

    def getInternalSensitivityMethod(self) -> "amici::InternalSensitivityMethod":
        return _amici.SolverPtr_getInternalSensitivityMethod(self)

    def setInternalSensitivityMethod(self, ism: 'amici::InternalSensitivityMethod') -> "void":
        return _amici.SolverPtr_setInternalSensitivityMethod(self, ism)

    def getReturnDataReportingMode(self) -> "amici::RDataReporting":
        return _amici.SolverPtr_getReturnDataReportingMode(self)

    def setReturnDataReportingMode(self, rdrm: 'amici::RDataReporting') -> "void":
        return _amici.SolverPtr_setReturnDataReportingMode(self, rdrm)

    def sensToggleOff(self) -> "void":
        return _amici.SolverPtr_sensToggleOff(self)

    def gett(self) -> "amici::realtype":
        return _amici.SolverPtr_gett(self)

    def getCpuTime(self) -> "amici::realtype":
        return _amici.SolverPtr_getCpuTime(self)

    def getCpuTimeB(self) -> "amici::realtype":
        return _amici.SolverPtr_getCpuTimeB(self)

    def nx(self) -> "int":
        return _amici.SolverPtr_nx(self)

    def nplist(self) -> "int":
        return _amici.SolverPtr_nplist(self)

    def nquad(self) -> "int":
        return _amici.SolverPtr_nquad(self)

    def computingFSA(self) -> "bool":
        return _amici.SolverPtr_computingFSA(self)

    def computingASA(self) -> "bool":
        return _amici.SolverPtr_computingASA(self)

    def resetDiagnosis(self) -> "void":
        return _amici.SolverPtr_resetDiagnosis(self)

    def storeDiagnosis(self) -> "void":
        return _amici.SolverPtr_storeDiagnosis(self)

    def storeDiagnosisB(self, which: 'int') -> "void":
        return _amici.SolverPtr_storeDiagnosisB(self, which)

    def getNumSteps(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getNumSteps(self)

    def getNumStepsB(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getNumStepsB(self)

    def getNumRhsEvals(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getNumRhsEvals(self)

    def getNumRhsEvalsB(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getNumRhsEvalsB(self)

    def getNumErrTestFails(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getNumErrTestFails(self)

    def getNumErrTestFailsB(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getNumErrTestFailsB(self)

    def getNumNonlinSolvConvFails(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getNumNonlinSolvConvFails(self)

    def getNumNonlinSolvConvFailsB(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getNumNonlinSolvConvFailsB(self)

    def getLastOrder(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.SolverPtr_getLastOrder(self)
    __swig_setmethods__["app"] = _amici.SolverPtr_app_set
    __swig_getmethods__["app"] = _amici.SolverPtr_app_get
    if _newclass:
        app = _swig_property(_amici.SolverPtr_app_get, _amici.SolverPtr_app_set)
SolverPtr_swigregister = _amici.SolverPtr_swigregister
SolverPtr_swigregister(SolverPtr)

class ReturnDataPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnDataPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnDataPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ReturnDataPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "std::unique_ptr< amici::ReturnData >::pointer":
        return _amici.ReturnDataPtr___deref__(self)

    def release(self) -> "std::unique_ptr< amici::ReturnData >::pointer":
        return _amici.ReturnDataPtr_release(self)

    def reset(self, *args) -> "void":
        return _amici.ReturnDataPtr_reset(self, *args)

    def swap(self, __u: 'ReturnDataPtr') -> "void":
        return _amici.ReturnDataPtr_swap(self, __u)

    def get(self) -> "std::unique_ptr< amici::ReturnData >::pointer":
        return _amici.ReturnDataPtr_get(self)

    def __nonzero__(self):
        return _amici.ReturnDataPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _amici.delete_ReturnDataPtr
    __del__ = lambda self: None
    __swig_setmethods__["ts"] = _amici.ReturnDataPtr_ts_set
    __swig_getmethods__["ts"] = _amici.ReturnDataPtr_ts_get
    if _newclass:
        ts = _swig_property(_amici.ReturnDataPtr_ts_get, _amici.ReturnDataPtr_ts_set)
    __swig_setmethods__["xdot"] = _amici.ReturnDataPtr_xdot_set
    __swig_getmethods__["xdot"] = _amici.ReturnDataPtr_xdot_get
    if _newclass:
        xdot = _swig_property(_amici.ReturnDataPtr_xdot_get, _amici.ReturnDataPtr_xdot_set)
    __swig_setmethods__["J"] = _amici.ReturnDataPtr_J_set
    __swig_getmethods__["J"] = _amici.ReturnDataPtr_J_get
    if _newclass:
        J = _swig_property(_amici.ReturnDataPtr_J_get, _amici.ReturnDataPtr_J_set)
    __swig_setmethods__["w"] = _amici.ReturnDataPtr_w_set
    __swig_getmethods__["w"] = _amici.ReturnDataPtr_w_get
    if _newclass:
        w = _swig_property(_amici.ReturnDataPtr_w_get, _amici.ReturnDataPtr_w_set)
    __swig_setmethods__["z"] = _amici.ReturnDataPtr_z_set
    __swig_getmethods__["z"] = _amici.ReturnDataPtr_z_get
    if _newclass:
        z = _swig_property(_amici.ReturnDataPtr_z_get, _amici.ReturnDataPtr_z_set)
    __swig_setmethods__["sigmaz"] = _amici.ReturnDataPtr_sigmaz_set
    __swig_getmethods__["sigmaz"] = _amici.ReturnDataPtr_sigmaz_get
    if _newclass:
        sigmaz = _swig_property(_amici.ReturnDataPtr_sigmaz_get, _amici.ReturnDataPtr_sigmaz_set)
    __swig_setmethods__["sz"] = _amici.ReturnDataPtr_sz_set
    __swig_getmethods__["sz"] = _amici.ReturnDataPtr_sz_get
    if _newclass:
        sz = _swig_property(_amici.ReturnDataPtr_sz_get, _amici.ReturnDataPtr_sz_set)
    __swig_setmethods__["ssigmaz"] = _amici.ReturnDataPtr_ssigmaz_set
    __swig_getmethods__["ssigmaz"] = _amici.ReturnDataPtr_ssigmaz_get
    if _newclass:
        ssigmaz = _swig_property(_amici.ReturnDataPtr_ssigmaz_get, _amici.ReturnDataPtr_ssigmaz_set)
    __swig_setmethods__["rz"] = _amici.ReturnDataPtr_rz_set
    __swig_getmethods__["rz"] = _amici.ReturnDataPtr_rz_get
    if _newclass:
        rz = _swig_property(_amici.ReturnDataPtr_rz_get, _amici.ReturnDataPtr_rz_set)
    __swig_setmethods__["srz"] = _amici.ReturnDataPtr_srz_set
    __swig_getmethods__["srz"] = _amici.ReturnDataPtr_srz_get
    if _newclass:
        srz = _swig_property(_amici.ReturnDataPtr_srz_get, _amici.ReturnDataPtr_srz_set)
    __swig_setmethods__["s2rz"] = _amici.ReturnDataPtr_s2rz_set
    __swig_getmethods__["s2rz"] = _amici.ReturnDataPtr_s2rz_get
    if _newclass:
        s2rz = _swig_property(_amici.ReturnDataPtr_s2rz_get, _amici.ReturnDataPtr_s2rz_set)
    __swig_setmethods__["x"] = _amici.ReturnDataPtr_x_set
    __swig_getmethods__["x"] = _amici.ReturnDataPtr_x_get
    if _newclass:
        x = _swig_property(_amici.ReturnDataPtr_x_get, _amici.ReturnDataPtr_x_set)
    __swig_setmethods__["sx"] = _amici.ReturnDataPtr_sx_set
    __swig_getmethods__["sx"] = _amici.ReturnDataPtr_sx_get
    if _newclass:
        sx = _swig_property(_amici.ReturnDataPtr_sx_get, _amici.ReturnDataPtr_sx_set)
    __swig_setmethods__["y"] = _amici.ReturnDataPtr_y_set
    __swig_getmethods__["y"] = _amici.ReturnDataPtr_y_get
    if _newclass:
        y = _swig_property(_amici.ReturnDataPtr_y_get, _amici.ReturnDataPtr_y_set)
    __swig_setmethods__["sigmay"] = _amici.ReturnDataPtr_sigmay_set
    __swig_getmethods__["sigmay"] = _amici.ReturnDataPtr_sigmay_get
    if _newclass:
        sigmay = _swig_property(_amici.ReturnDataPtr_sigmay_get, _amici.ReturnDataPtr_sigmay_set)
    __swig_setmethods__["sy"] = _amici.ReturnDataPtr_sy_set
    __swig_getmethods__["sy"] = _amici.ReturnDataPtr_sy_get
    if _newclass:
        sy = _swig_property(_amici.ReturnDataPtr_sy_get, _amici.ReturnDataPtr_sy_set)
    __swig_setmethods__["ssigmay"] = _amici.ReturnDataPtr_ssigmay_set
    __swig_getmethods__["ssigmay"] = _amici.ReturnDataPtr_ssigmay_get
    if _newclass:
        ssigmay = _swig_property(_amici.ReturnDataPtr_ssigmay_get, _amici.ReturnDataPtr_ssigmay_set)
    __swig_setmethods__["res"] = _amici.ReturnDataPtr_res_set
    __swig_getmethods__["res"] = _amici.ReturnDataPtr_res_get
    if _newclass:
        res = _swig_property(_amici.ReturnDataPtr_res_get, _amici.ReturnDataPtr_res_set)
    __swig_setmethods__["sres"] = _amici.ReturnDataPtr_sres_set
    __swig_getmethods__["sres"] = _amici.ReturnDataPtr_sres_get
    if _newclass:
        sres = _swig_property(_amici.ReturnDataPtr_sres_get, _amici.ReturnDataPtr_sres_set)
    __swig_setmethods__["FIM"] = _amici.ReturnDataPtr_FIM_set
    __swig_getmethods__["FIM"] = _amici.ReturnDataPtr_FIM_get
    if _newclass:
        FIM = _swig_property(_amici.ReturnDataPtr_FIM_get, _amici.ReturnDataPtr_FIM_set)
    __swig_setmethods__["numsteps"] = _amici.ReturnDataPtr_numsteps_set
    __swig_getmethods__["numsteps"] = _amici.ReturnDataPtr_numsteps_get
    if _newclass:
        numsteps = _swig_property(_amici.ReturnDataPtr_numsteps_get, _amici.ReturnDataPtr_numsteps_set)
    __swig_setmethods__["numstepsB"] = _amici.ReturnDataPtr_numstepsB_set
    __swig_getmethods__["numstepsB"] = _amici.ReturnDataPtr_numstepsB_get
    if _newclass:
        numstepsB = _swig_property(_amici.ReturnDataPtr_numstepsB_get, _amici.ReturnDataPtr_numstepsB_set)
    __swig_setmethods__["numrhsevals"] = _amici.ReturnDataPtr_numrhsevals_set
    __swig_getmethods__["numrhsevals"] = _amici.ReturnDataPtr_numrhsevals_get
    if _newclass:
        numrhsevals = _swig_property(_amici.ReturnDataPtr_numrhsevals_get, _amici.ReturnDataPtr_numrhsevals_set)
    __swig_setmethods__["numrhsevalsB"] = _amici.ReturnDataPtr_numrhsevalsB_set
    __swig_getmethods__["numrhsevalsB"] = _amici.ReturnDataPtr_numrhsevalsB_get
    if _newclass:
        numrhsevalsB = _swig_property(_amici.ReturnDataPtr_numrhsevalsB_get, _amici.ReturnDataPtr_numrhsevalsB_set)
    __swig_setmethods__["numerrtestfails"] = _amici.ReturnDataPtr_numerrtestfails_set
    __swig_getmethods__["numerrtestfails"] = _amici.ReturnDataPtr_numerrtestfails_get
    if _newclass:
        numerrtestfails = _swig_property(_amici.ReturnDataPtr_numerrtestfails_get, _amici.ReturnDataPtr_numerrtestfails_set)
    __swig_setmethods__["numerrtestfailsB"] = _amici.ReturnDataPtr_numerrtestfailsB_set
    __swig_getmethods__["numerrtestfailsB"] = _amici.ReturnDataPtr_numerrtestfailsB_get
    if _newclass:
        numerrtestfailsB = _swig_property(_amici.ReturnDataPtr_numerrtestfailsB_get, _amici.ReturnDataPtr_numerrtestfailsB_set)
    __swig_setmethods__["numnonlinsolvconvfails"] = _amici.ReturnDataPtr_numnonlinsolvconvfails_set
    __swig_getmethods__["numnonlinsolvconvfails"] = _amici.ReturnDataPtr_numnonlinsolvconvfails_get
    if _newclass:
        numnonlinsolvconvfails = _swig_property(_amici.ReturnDataPtr_numnonlinsolvconvfails_get, _amici.ReturnDataPtr_numnonlinsolvconvfails_set)
    __swig_setmethods__["numnonlinsolvconvfailsB"] = _amici.ReturnDataPtr_numnonlinsolvconvfailsB_set
    __swig_getmethods__["numnonlinsolvconvfailsB"] = _amici.ReturnDataPtr_numnonlinsolvconvfailsB_get
    if _newclass:
        numnonlinsolvconvfailsB = _swig_property(_amici.ReturnDataPtr_numnonlinsolvconvfailsB_get, _amici.ReturnDataPtr_numnonlinsolvconvfailsB_set)
    __swig_setmethods__["order"] = _amici.ReturnDataPtr_order_set
    __swig_getmethods__["order"] = _amici.ReturnDataPtr_order_get
    if _newclass:
        order = _swig_property(_amici.ReturnDataPtr_order_get, _amici.ReturnDataPtr_order_set)
    __swig_setmethods__["cpu_time"] = _amici.ReturnDataPtr_cpu_time_set
    __swig_getmethods__["cpu_time"] = _amici.ReturnDataPtr_cpu_time_get
    if _newclass:
        cpu_time = _swig_property(_amici.ReturnDataPtr_cpu_time_get, _amici.ReturnDataPtr_cpu_time_set)
    __swig_setmethods__["cpu_timeB"] = _amici.ReturnDataPtr_cpu_timeB_set
    __swig_getmethods__["cpu_timeB"] = _amici.ReturnDataPtr_cpu_timeB_get
    if _newclass:
        cpu_timeB = _swig_property(_amici.ReturnDataPtr_cpu_timeB_get, _amici.ReturnDataPtr_cpu_timeB_set)
    __swig_setmethods__["preeq_status"] = _amici.ReturnDataPtr_preeq_status_set
    __swig_getmethods__["preeq_status"] = _amici.ReturnDataPtr_preeq_status_get
    if _newclass:
        preeq_status = _swig_property(_amici.ReturnDataPtr_preeq_status_get, _amici.ReturnDataPtr_preeq_status_set)
    __swig_setmethods__["preeq_cpu_time"] = _amici.ReturnDataPtr_preeq_cpu_time_set
    __swig_getmethods__["preeq_cpu_time"] = _amici.ReturnDataPtr_preeq_cpu_time_get
    if _newclass:
        preeq_cpu_time = _swig_property(_amici.ReturnDataPtr_preeq_cpu_time_get, _amici.ReturnDataPtr_preeq_cpu_time_set)
    __swig_setmethods__["preeq_cpu_timeB"] = _amici.ReturnDataPtr_preeq_cpu_timeB_set
    __swig_getmethods__["preeq_cpu_timeB"] = _amici.ReturnDataPtr_preeq_cpu_timeB_get
    if _newclass:
        preeq_cpu_timeB = _swig_property(_amici.ReturnDataPtr_preeq_cpu_timeB_get, _amici.ReturnDataPtr_preeq_cpu_timeB_set)
    __swig_setmethods__["posteq_status"] = _amici.ReturnDataPtr_posteq_status_set
    __swig_getmethods__["posteq_status"] = _amici.ReturnDataPtr_posteq_status_get
    if _newclass:
        posteq_status = _swig_property(_amici.ReturnDataPtr_posteq_status_get, _amici.ReturnDataPtr_posteq_status_set)
    __swig_setmethods__["posteq_cpu_time"] = _amici.ReturnDataPtr_posteq_cpu_time_set
    __swig_getmethods__["posteq_cpu_time"] = _amici.ReturnDataPtr_posteq_cpu_time_get
    if _newclass:
        posteq_cpu_time = _swig_property(_amici.ReturnDataPtr_posteq_cpu_time_get, _amici.ReturnDataPtr_posteq_cpu_time_set)
    __swig_setmethods__["posteq_cpu_timeB"] = _amici.ReturnDataPtr_posteq_cpu_timeB_set
    __swig_getmethods__["posteq_cpu_timeB"] = _amici.ReturnDataPtr_posteq_cpu_timeB_get
    if _newclass:
        posteq_cpu_timeB = _swig_property(_amici.ReturnDataPtr_posteq_cpu_timeB_get, _amici.ReturnDataPtr_posteq_cpu_timeB_set)
    __swig_setmethods__["preeq_numsteps"] = _amici.ReturnDataPtr_preeq_numsteps_set
    __swig_getmethods__["preeq_numsteps"] = _amici.ReturnDataPtr_preeq_numsteps_get
    if _newclass:
        preeq_numsteps = _swig_property(_amici.ReturnDataPtr_preeq_numsteps_get, _amici.ReturnDataPtr_preeq_numsteps_set)
    __swig_setmethods__["preeq_numlinsteps"] = _amici.ReturnDataPtr_preeq_numlinsteps_set
    __swig_getmethods__["preeq_numlinsteps"] = _amici.ReturnDataPtr_preeq_numlinsteps_get
    if _newclass:
        preeq_numlinsteps = _swig_property(_amici.ReturnDataPtr_preeq_numlinsteps_get, _amici.ReturnDataPtr_preeq_numlinsteps_set)
    __swig_setmethods__["preeq_numstepsB"] = _amici.ReturnDataPtr_preeq_numstepsB_set
    __swig_getmethods__["preeq_numstepsB"] = _amici.ReturnDataPtr_preeq_numstepsB_get
    if _newclass:
        preeq_numstepsB = _swig_property(_amici.ReturnDataPtr_preeq_numstepsB_get, _amici.ReturnDataPtr_preeq_numstepsB_set)
    __swig_setmethods__["posteq_numsteps"] = _amici.ReturnDataPtr_posteq_numsteps_set
    __swig_getmethods__["posteq_numsteps"] = _amici.ReturnDataPtr_posteq_numsteps_get
    if _newclass:
        posteq_numsteps = _swig_property(_amici.ReturnDataPtr_posteq_numsteps_get, _amici.ReturnDataPtr_posteq_numsteps_set)
    __swig_setmethods__["posteq_numlinsteps"] = _amici.ReturnDataPtr_posteq_numlinsteps_set
    __swig_getmethods__["posteq_numlinsteps"] = _amici.ReturnDataPtr_posteq_numlinsteps_get
    if _newclass:
        posteq_numlinsteps = _swig_property(_amici.ReturnDataPtr_posteq_numlinsteps_get, _amici.ReturnDataPtr_posteq_numlinsteps_set)
    __swig_setmethods__["posteq_numstepsB"] = _amici.ReturnDataPtr_posteq_numstepsB_set
    __swig_getmethods__["posteq_numstepsB"] = _amici.ReturnDataPtr_posteq_numstepsB_get
    if _newclass:
        posteq_numstepsB = _swig_property(_amici.ReturnDataPtr_posteq_numstepsB_get, _amici.ReturnDataPtr_posteq_numstepsB_set)
    __swig_setmethods__["preeq_t"] = _amici.ReturnDataPtr_preeq_t_set
    __swig_getmethods__["preeq_t"] = _amici.ReturnDataPtr_preeq_t_get
    if _newclass:
        preeq_t = _swig_property(_amici.ReturnDataPtr_preeq_t_get, _amici.ReturnDataPtr_preeq_t_set)
    __swig_setmethods__["preeq_wrms"] = _amici.ReturnDataPtr_preeq_wrms_set
    __swig_getmethods__["preeq_wrms"] = _amici.ReturnDataPtr_preeq_wrms_get
    if _newclass:
        preeq_wrms = _swig_property(_amici.ReturnDataPtr_preeq_wrms_get, _amici.ReturnDataPtr_preeq_wrms_set)
    __swig_setmethods__["posteq_t"] = _amici.ReturnDataPtr_posteq_t_set
    __swig_getmethods__["posteq_t"] = _amici.ReturnDataPtr_posteq_t_get
    if _newclass:
        posteq_t = _swig_property(_amici.ReturnDataPtr_posteq_t_get, _amici.ReturnDataPtr_posteq_t_set)
    __swig_setmethods__["posteq_wrms"] = _amici.ReturnDataPtr_posteq_wrms_set
    __swig_getmethods__["posteq_wrms"] = _amici.ReturnDataPtr_posteq_wrms_get
    if _newclass:
        posteq_wrms = _swig_property(_amici.ReturnDataPtr_posteq_wrms_get, _amici.ReturnDataPtr_posteq_wrms_set)
    __swig_setmethods__["x0"] = _amici.ReturnDataPtr_x0_set
    __swig_getmethods__["x0"] = _amici.ReturnDataPtr_x0_get
    if _newclass:
        x0 = _swig_property(_amici.ReturnDataPtr_x0_get, _amici.ReturnDataPtr_x0_set)
    __swig_setmethods__["x_ss"] = _amici.ReturnDataPtr_x_ss_set
    __swig_getmethods__["x_ss"] = _amici.ReturnDataPtr_x_ss_get
    if _newclass:
        x_ss = _swig_property(_amici.ReturnDataPtr_x_ss_get, _amici.ReturnDataPtr_x_ss_set)
    __swig_setmethods__["sx0"] = _amici.ReturnDataPtr_sx0_set
    __swig_getmethods__["sx0"] = _amici.ReturnDataPtr_sx0_get
    if _newclass:
        sx0 = _swig_property(_amici.ReturnDataPtr_sx0_get, _amici.ReturnDataPtr_sx0_set)
    __swig_setmethods__["sx_ss"] = _amici.ReturnDataPtr_sx_ss_set
    __swig_getmethods__["sx_ss"] = _amici.ReturnDataPtr_sx_ss_get
    if _newclass:
        sx_ss = _swig_property(_amici.ReturnDataPtr_sx_ss_get, _amici.ReturnDataPtr_sx_ss_set)
    __swig_setmethods__["llh"] = _amici.ReturnDataPtr_llh_set
    __swig_getmethods__["llh"] = _amici.ReturnDataPtr_llh_get
    if _newclass:
        llh = _swig_property(_amici.ReturnDataPtr_llh_get, _amici.ReturnDataPtr_llh_set)
    __swig_setmethods__["chi2"] = _amici.ReturnDataPtr_chi2_set
    __swig_getmethods__["chi2"] = _amici.ReturnDataPtr_chi2_get
    if _newclass:
        chi2 = _swig_property(_amici.ReturnDataPtr_chi2_get, _amici.ReturnDataPtr_chi2_set)
    __swig_setmethods__["sllh"] = _amici.ReturnDataPtr_sllh_set
    __swig_getmethods__["sllh"] = _amici.ReturnDataPtr_sllh_get
    if _newclass:
        sllh = _swig_property(_amici.ReturnDataPtr_sllh_get, _amici.ReturnDataPtr_sllh_set)
    __swig_setmethods__["s2llh"] = _amici.ReturnDataPtr_s2llh_set
    __swig_getmethods__["s2llh"] = _amici.ReturnDataPtr_s2llh_get
    if _newclass:
        s2llh = _swig_property(_amici.ReturnDataPtr_s2llh_get, _amici.ReturnDataPtr_s2llh_set)
    __swig_setmethods__["status"] = _amici.ReturnDataPtr_status_set
    __swig_getmethods__["status"] = _amici.ReturnDataPtr_status_get
    if _newclass:
        status = _swig_property(_amici.ReturnDataPtr_status_get, _amici.ReturnDataPtr_status_set)
    __swig_setmethods__["np"] = _amici.ReturnDataPtr_np_set
    __swig_getmethods__["np"] = _amici.ReturnDataPtr_np_get
    if _newclass:
        np = _swig_property(_amici.ReturnDataPtr_np_get, _amici.ReturnDataPtr_np_set)
    __swig_setmethods__["nk"] = _amici.ReturnDataPtr_nk_set
    __swig_getmethods__["nk"] = _amici.ReturnDataPtr_nk_get
    if _newclass:
        nk = _swig_property(_amici.ReturnDataPtr_nk_get, _amici.ReturnDataPtr_nk_set)
    __swig_setmethods__["nx"] = _amici.ReturnDataPtr_nx_set
    __swig_getmethods__["nx"] = _amici.ReturnDataPtr_nx_get
    if _newclass:
        nx = _swig_property(_amici.ReturnDataPtr_nx_get, _amici.ReturnDataPtr_nx_set)
    __swig_setmethods__["nx_solver"] = _amici.ReturnDataPtr_nx_solver_set
    __swig_getmethods__["nx_solver"] = _amici.ReturnDataPtr_nx_solver_get
    if _newclass:
        nx_solver = _swig_property(_amici.ReturnDataPtr_nx_solver_get, _amici.ReturnDataPtr_nx_solver_set)
    __swig_setmethods__["nxtrue"] = _amici.ReturnDataPtr_nxtrue_set
    __swig_getmethods__["nxtrue"] = _amici.ReturnDataPtr_nxtrue_get
    if _newclass:
        nxtrue = _swig_property(_amici.ReturnDataPtr_nxtrue_get, _amici.ReturnDataPtr_nxtrue_set)
    __swig_setmethods__["nx_solver_reinit"] = _amici.ReturnDataPtr_nx_solver_reinit_set
    __swig_getmethods__["nx_solver_reinit"] = _amici.ReturnDataPtr_nx_solver_reinit_get
    if _newclass:
        nx_solver_reinit = _swig_property(_amici.ReturnDataPtr_nx_solver_reinit_get, _amici.ReturnDataPtr_nx_solver_reinit_set)
    __swig_setmethods__["ny"] = _amici.ReturnDataPtr_ny_set
    __swig_getmethods__["ny"] = _amici.ReturnDataPtr_ny_get
    if _newclass:
        ny = _swig_property(_amici.ReturnDataPtr_ny_get, _amici.ReturnDataPtr_ny_set)
    __swig_setmethods__["nytrue"] = _amici.ReturnDataPtr_nytrue_set
    __swig_getmethods__["nytrue"] = _amici.ReturnDataPtr_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.ReturnDataPtr_nytrue_get, _amici.ReturnDataPtr_nytrue_set)
    __swig_setmethods__["nz"] = _amici.ReturnDataPtr_nz_set
    __swig_getmethods__["nz"] = _amici.ReturnDataPtr_nz_get
    if _newclass:
        nz = _swig_property(_amici.ReturnDataPtr_nz_get, _amici.ReturnDataPtr_nz_set)
    __swig_setmethods__["nztrue"] = _amici.ReturnDataPtr_nztrue_set
    __swig_getmethods__["nztrue"] = _amici.ReturnDataPtr_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.ReturnDataPtr_nztrue_get, _amici.ReturnDataPtr_nztrue_set)
    __swig_setmethods__["ne"] = _amici.ReturnDataPtr_ne_set
    __swig_getmethods__["ne"] = _amici.ReturnDataPtr_ne_get
    if _newclass:
        ne = _swig_property(_amici.ReturnDataPtr_ne_get, _amici.ReturnDataPtr_ne_set)
    __swig_setmethods__["nJ"] = _amici.ReturnDataPtr_nJ_set
    __swig_getmethods__["nJ"] = _amici.ReturnDataPtr_nJ_get
    if _newclass:
        nJ = _swig_property(_amici.ReturnDataPtr_nJ_get, _amici.ReturnDataPtr_nJ_set)
    __swig_setmethods__["nplist"] = _amici.ReturnDataPtr_nplist_set
    __swig_getmethods__["nplist"] = _amici.ReturnDataPtr_nplist_get
    if _newclass:
        nplist = _swig_property(_amici.ReturnDataPtr_nplist_get, _amici.ReturnDataPtr_nplist_set)
    __swig_setmethods__["nmaxevent"] = _amici.ReturnDataPtr_nmaxevent_set
    __swig_getmethods__["nmaxevent"] = _amici.ReturnDataPtr_nmaxevent_get
    if _newclass:
        nmaxevent = _swig_property(_amici.ReturnDataPtr_nmaxevent_get, _amici.ReturnDataPtr_nmaxevent_set)
    __swig_setmethods__["nt"] = _amici.ReturnDataPtr_nt_set
    __swig_getmethods__["nt"] = _amici.ReturnDataPtr_nt_get
    if _newclass:
        nt = _swig_property(_amici.ReturnDataPtr_nt_get, _amici.ReturnDataPtr_nt_set)
    __swig_setmethods__["nw"] = _amici.ReturnDataPtr_nw_set
    __swig_getmethods__["nw"] = _amici.ReturnDataPtr_nw_get
    if _newclass:
        nw = _swig_property(_amici.ReturnDataPtr_nw_get, _amici.ReturnDataPtr_nw_set)
    __swig_setmethods__["newton_maxsteps"] = _amici.ReturnDataPtr_newton_maxsteps_set
    __swig_getmethods__["newton_maxsteps"] = _amici.ReturnDataPtr_newton_maxsteps_get
    if _newclass:
        newton_maxsteps = _swig_property(_amici.ReturnDataPtr_newton_maxsteps_get, _amici.ReturnDataPtr_newton_maxsteps_set)
    __swig_setmethods__["pscale"] = _amici.ReturnDataPtr_pscale_set
    __swig_getmethods__["pscale"] = _amici.ReturnDataPtr_pscale_get
    if _newclass:
        pscale = _swig_property(_amici.ReturnDataPtr_pscale_get, _amici.ReturnDataPtr_pscale_set)
    __swig_setmethods__["o2mode"] = _amici.ReturnDataPtr_o2mode_set
    __swig_getmethods__["o2mode"] = _amici.ReturnDataPtr_o2mode_get
    if _newclass:
        o2mode = _swig_property(_amici.ReturnDataPtr_o2mode_get, _amici.ReturnDataPtr_o2mode_set)
    __swig_setmethods__["sensi"] = _amici.ReturnDataPtr_sensi_set
    __swig_getmethods__["sensi"] = _amici.ReturnDataPtr_sensi_get
    if _newclass:
        sensi = _swig_property(_amici.ReturnDataPtr_sensi_get, _amici.ReturnDataPtr_sensi_set)
    __swig_setmethods__["sensi_meth"] = _amici.ReturnDataPtr_sensi_meth_set
    __swig_getmethods__["sensi_meth"] = _amici.ReturnDataPtr_sensi_meth_get
    if _newclass:
        sensi_meth = _swig_property(_amici.ReturnDataPtr_sensi_meth_get, _amici.ReturnDataPtr_sensi_meth_set)
    __swig_setmethods__["rdata_reporting"] = _amici.ReturnDataPtr_rdata_reporting_set
    __swig_getmethods__["rdata_reporting"] = _amici.ReturnDataPtr_rdata_reporting_get
    if _newclass:
        rdata_reporting = _swig_property(_amici.ReturnDataPtr_rdata_reporting_get, _amici.ReturnDataPtr_rdata_reporting_set)
ReturnDataPtr_swigregister = _amici.ReturnDataPtr_swigregister
ReturnDataPtr_swigregister(ReturnDataPtr)

class ModelPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ModelPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "std::unique_ptr< amici::Model >::pointer":
        return _amici.ModelPtr___deref__(self)

    def release(self) -> "std::unique_ptr< amici::Model >::pointer":
        return _amici.ModelPtr_release(self)

    def reset(self, *args) -> "void":
        return _amici.ModelPtr_reset(self, *args)

    def swap(self, __u: 'ModelPtr') -> "void":
        return _amici.ModelPtr_swap(self, __u)

    def get(self) -> "std::unique_ptr< amici::Model >::pointer":
        return _amici.ModelPtr_get(self)

    def __nonzero__(self):
        return _amici.ModelPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _amici.delete_ModelPtr
    __del__ = lambda self: None

    def clone(self) -> "amici::Model *":
        return _amici.ModelPtr_clone(self)

    def nplist(self) -> "int":
        return _amici.ModelPtr_nplist(self)

    def np(self) -> "int":
        return _amici.ModelPtr_np(self)

    def nk(self) -> "int":
        return _amici.ModelPtr_nk(self)

    def ncl(self) -> "int":
        return _amici.ModelPtr_ncl(self)

    def nx_reinit(self) -> "int":
        return _amici.ModelPtr_nx_reinit(self)

    def k(self) -> "double const *":
        return _amici.ModelPtr_k(self)

    def nMaxEvent(self) -> "int":
        return _amici.ModelPtr_nMaxEvent(self)

    def setNMaxEvent(self, nmaxevent: 'int') -> "void":
        return _amici.ModelPtr_setNMaxEvent(self, nmaxevent)

    def nt(self) -> "int":
        return _amici.ModelPtr_nt(self)

    def getParameterScale(self) -> "std::vector< amici::ParameterScaling,std::allocator< amici::ParameterScaling > > const &":
        return _amici.ModelPtr_getParameterScale(self)

    def setParameterScale(self, *args) -> "void":
        return _amici.ModelPtr_setParameterScale(self, *args)

    def getUnscaledParameters(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ModelPtr_getUnscaledParameters(self)

    def getParameters(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ModelPtr_getParameters(self)

    def getParameterById(self, par_id: 'std::string const &') -> "amici::realtype":
        return _amici.ModelPtr_getParameterById(self, par_id)

    def getParameterByName(self, par_name: 'std::string const &') -> "amici::realtype":
        return _amici.ModelPtr_getParameterByName(self, par_name)

    def setParameters(self, p: 'DoubleVector') -> "void":
        return _amici.ModelPtr_setParameters(self, p)

    def setParameterById(self, *args) -> "void":
        return _amici.ModelPtr_setParameterById(self, *args)

    def setParametersByIdRegex(self, par_id_regex: 'std::string const &', value: 'amici::realtype') -> "int":
        return _amici.ModelPtr_setParametersByIdRegex(self, par_id_regex, value)

    def setParameterByName(self, *args) -> "void":
        return _amici.ModelPtr_setParameterByName(self, *args)

    def setParametersByNameRegex(self, par_name_regex: 'std::string const &', value: 'amici::realtype') -> "int":
        return _amici.ModelPtr_setParametersByNameRegex(self, par_name_regex, value)

    def getFixedParameters(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ModelPtr_getFixedParameters(self)

    def getFixedParameterById(self, par_id: 'std::string const &') -> "amici::realtype":
        return _amici.ModelPtr_getFixedParameterById(self, par_id)

    def getFixedParameterByName(self, par_name: 'std::string const &') -> "amici::realtype":
        return _amici.ModelPtr_getFixedParameterByName(self, par_name)

    def setFixedParameters(self, k: 'DoubleVector') -> "void":
        return _amici.ModelPtr_setFixedParameters(self, k)

    def setFixedParameterById(self, par_id: 'std::string const &', value: 'amici::realtype') -> "void":
        return _amici.ModelPtr_setFixedParameterById(self, par_id, value)

    def setFixedParametersByIdRegex(self, par_id_regex: 'std::string const &', value: 'amici::realtype') -> "int":
        return _amici.ModelPtr_setFixedParametersByIdRegex(self, par_id_regex, value)

    def setFixedParameterByName(self, par_name: 'std::string const &', value: 'amici::realtype') -> "void":
        return _amici.ModelPtr_setFixedParameterByName(self, par_name, value)

    def setFixedParametersByNameRegex(self, par_name_regex: 'std::string const &', value: 'amici::realtype') -> "int":
        return _amici.ModelPtr_setFixedParametersByNameRegex(self, par_name_regex, value)

    def getName(self) -> "std::string":
        return _amici.ModelPtr_getName(self)

    def hasParameterNames(self) -> "bool":
        return _amici.ModelPtr_hasParameterNames(self)

    def getParameterNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.ModelPtr_getParameterNames(self)

    def hasStateNames(self) -> "bool":
        return _amici.ModelPtr_hasStateNames(self)

    def getStateNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.ModelPtr_getStateNames(self)

    def hasFixedParameterNames(self) -> "bool":
        return _amici.ModelPtr_hasFixedParameterNames(self)

    def getFixedParameterNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.ModelPtr_getFixedParameterNames(self)

    def hasObservableNames(self) -> "bool":
        return _amici.ModelPtr_hasObservableNames(self)

    def getObservableNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.ModelPtr_getObservableNames(self)

    def hasParameterIds(self) -> "bool":
        return _amici.ModelPtr_hasParameterIds(self)

    def getParameterIds(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.ModelPtr_getParameterIds(self)

    def hasStateIds(self) -> "bool":
        return _amici.ModelPtr_hasStateIds(self)

    def getStateIds(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.ModelPtr_getStateIds(self)

    def hasFixedParameterIds(self) -> "bool":
        return _amici.ModelPtr_hasFixedParameterIds(self)

    def getFixedParameterIds(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.ModelPtr_getFixedParameterIds(self)

    def hasObservableIds(self) -> "bool":
        return _amici.ModelPtr_hasObservableIds(self)

    def getObservableIds(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.ModelPtr_getObservableIds(self)

    def getTimepoints(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ModelPtr_getTimepoints(self)

    def getTimepoint(self, it: 'int') -> "amici::realtype":
        return _amici.ModelPtr_getTimepoint(self, it)

    def setTimepoints(self, ts: 'DoubleVector') -> "void":
        return _amici.ModelPtr_setTimepoints(self, ts)

    def t0(self) -> "double":
        return _amici.ModelPtr_t0(self)

    def setT0(self, t0: 'double') -> "void":
        return _amici.ModelPtr_setT0(self, t0)

    def getStateIsNonNegative(self) -> "std::vector< bool,std::allocator< bool > > const &":
        return _amici.ModelPtr_getStateIsNonNegative(self)

    def setStateIsNonNegative(self, stateIsNonNegative: 'BoolVector') -> "void":
        return _amici.ModelPtr_setStateIsNonNegative(self, stateIsNonNegative)

    def setAllStatesNonNegative(self) -> "void":
        return _amici.ModelPtr_setAllStatesNonNegative(self)

    def getParameterList(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.ModelPtr_getParameterList(self)

    def plist(self, pos: 'int') -> "int":
        return _amici.ModelPtr_plist(self, pos)

    def setParameterList(self, plist: 'IntVector') -> "void":
        return _amici.ModelPtr_setParameterList(self, plist)

    def getInitialStates(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > >":
        return _amici.ModelPtr_getInitialStates(self)

    def setInitialStates(self, x0: 'DoubleVector') -> "void":
        return _amici.ModelPtr_setInitialStates(self, x0)

    def hasCustomInitialStates(self) -> "bool":
        return _amici.ModelPtr_hasCustomInitialStates(self)

    def getInitialStateSensitivities(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > >":
        return _amici.ModelPtr_getInitialStateSensitivities(self)

    def setInitialStateSensitivities(self, sx0: 'DoubleVector') -> "void":
        return _amici.ModelPtr_setInitialStateSensitivities(self, sx0)

    def hasCustomInitialStateSensitivities(self) -> "bool":
        return _amici.ModelPtr_hasCustomInitialStateSensitivities(self)

    def setUnscaledInitialStateSensitivities(self, sx0: 'DoubleVector') -> "void":
        return _amici.ModelPtr_setUnscaledInitialStateSensitivities(self, sx0)

    def setSteadyStateSensitivityMode(self, mode: 'amici::SteadyStateSensitivityMode') -> "void":
        return _amici.ModelPtr_setSteadyStateSensitivityMode(self, mode)

    def getSteadyStateSensitivityMode(self) -> "amici::SteadyStateSensitivityMode":
        return _amici.ModelPtr_getSteadyStateSensitivityMode(self)

    def setReinitializeFixedParameterInitialStates(self, flag: 'bool') -> "void":
        return _amici.ModelPtr_setReinitializeFixedParameterInitialStates(self, flag)

    def getReinitializeFixedParameterInitialStates(self) -> "bool":
        return _amici.ModelPtr_getReinitializeFixedParameterInitialStates(self)

    def requireSensitivitiesForAllParameters(self) -> "void":
        return _amici.ModelPtr_requireSensitivitiesForAllParameters(self)

    def getObservableSigma(self, sigmay: 'gsl::span< amici::realtype >', it: 'int const', edata: 'ExpData') -> "void":
        return _amici.ModelPtr_getObservableSigma(self, sigmay, it, edata)

    def getObservableSigmaSensitivity(self, ssigmay: 'gsl::span< amici::realtype >', it: 'int const', edata: 'ExpData') -> "void":
        return _amici.ModelPtr_getObservableSigmaSensitivity(self, ssigmay, it, edata)

    def getUnobservedEventSensitivity(self, sz: 'gsl::span< amici::realtype >', ie: 'int const') -> "void":
        return _amici.ModelPtr_getUnobservedEventSensitivity(self, sz, ie)

    def getEventSigma(self, sigmaz: 'gsl::span< amici::realtype >', ie: 'int const', nroots: 'int const', t: 'amici::realtype const', edata: 'ExpData') -> "void":
        return _amici.ModelPtr_getEventSigma(self, sigmaz, ie, nroots, t, edata)

    def getEventSigmaSensitivity(self, ssigmaz: 'gsl::span< amici::realtype >', ie: 'int const', nroots: 'int const', t: 'amici::realtype const', edata: 'ExpData') -> "void":
        return _amici.ModelPtr_getEventSigmaSensitivity(self, ssigmaz, ie, nroots, t, edata)

    def updateHeaviside(self, rootsfound: 'IntVector') -> "void":
        return _amici.ModelPtr_updateHeaviside(self, rootsfound)

    def updateHeavisideB(self, rootsfound: 'int const *') -> "void":
        return _amici.ModelPtr_updateHeavisideB(self, rootsfound)

    def checkFinite(self, array: 'gsl::span< amici::realtype const >', fun: 'char const *') -> "int":
        return _amici.ModelPtr_checkFinite(self, array, fun)

    def setAlwaysCheckFinite(self, alwaysCheck: 'bool') -> "void":
        return _amici.ModelPtr_setAlwaysCheckFinite(self, alwaysCheck)

    def getAlwaysCheckFinite(self) -> "bool":
        return _amici.ModelPtr_getAlwaysCheckFinite(self)

    def fx0(self, *args) -> "void":
        return _amici.ModelPtr_fx0(self, *args)

    def fx0_fixedParameters(self, *args) -> "void":
        return _amici.ModelPtr_fx0_fixedParameters(self, *args)

    def fsx0(self, *args) -> "void":
        return _amici.ModelPtr_fsx0(self, *args)

    def fsx0_fixedParameters(self, *args) -> "void":
        return _amici.ModelPtr_fsx0_fixedParameters(self, *args)

    def fsdx0(self) -> "void":
        return _amici.ModelPtr_fsdx0(self)
    __swig_setmethods__["nx_rdata"] = _amici.ModelPtr_nx_rdata_set
    __swig_getmethods__["nx_rdata"] = _amici.ModelPtr_nx_rdata_get
    if _newclass:
        nx_rdata = _swig_property(_amici.ModelPtr_nx_rdata_get, _amici.ModelPtr_nx_rdata_set)
    __swig_setmethods__["nxtrue_rdata"] = _amici.ModelPtr_nxtrue_rdata_set
    __swig_getmethods__["nxtrue_rdata"] = _amici.ModelPtr_nxtrue_rdata_get
    if _newclass:
        nxtrue_rdata = _swig_property(_amici.ModelPtr_nxtrue_rdata_get, _amici.ModelPtr_nxtrue_rdata_set)
    __swig_setmethods__["nx_solver"] = _amici.ModelPtr_nx_solver_set
    __swig_getmethods__["nx_solver"] = _amici.ModelPtr_nx_solver_get
    if _newclass:
        nx_solver = _swig_property(_amici.ModelPtr_nx_solver_get, _amici.ModelPtr_nx_solver_set)
    __swig_setmethods__["nxtrue_solver"] = _amici.ModelPtr_nxtrue_solver_set
    __swig_getmethods__["nxtrue_solver"] = _amici.ModelPtr_nxtrue_solver_get
    if _newclass:
        nxtrue_solver = _swig_property(_amici.ModelPtr_nxtrue_solver_get, _amici.ModelPtr_nxtrue_solver_set)
    __swig_setmethods__["nx_solver_reinit"] = _amici.ModelPtr_nx_solver_reinit_set
    __swig_getmethods__["nx_solver_reinit"] = _amici.ModelPtr_nx_solver_reinit_get
    if _newclass:
        nx_solver_reinit = _swig_property(_amici.ModelPtr_nx_solver_reinit_get, _amici.ModelPtr_nx_solver_reinit_set)
    __swig_setmethods__["ny"] = _amici.ModelPtr_ny_set
    __swig_getmethods__["ny"] = _amici.ModelPtr_ny_get
    if _newclass:
        ny = _swig_property(_amici.ModelPtr_ny_get, _amici.ModelPtr_ny_set)
    __swig_setmethods__["nytrue"] = _amici.ModelPtr_nytrue_set
    __swig_getmethods__["nytrue"] = _amici.ModelPtr_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.ModelPtr_nytrue_get, _amici.ModelPtr_nytrue_set)
    __swig_setmethods__["nz"] = _amici.ModelPtr_nz_set
    __swig_getmethods__["nz"] = _amici.ModelPtr_nz_get
    if _newclass:
        nz = _swig_property(_amici.ModelPtr_nz_get, _amici.ModelPtr_nz_set)
    __swig_setmethods__["nztrue"] = _amici.ModelPtr_nztrue_set
    __swig_getmethods__["nztrue"] = _amici.ModelPtr_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.ModelPtr_nztrue_get, _amici.ModelPtr_nztrue_set)
    __swig_setmethods__["ne"] = _amici.ModelPtr_ne_set
    __swig_getmethods__["ne"] = _amici.ModelPtr_ne_get
    if _newclass:
        ne = _swig_property(_amici.ModelPtr_ne_get, _amici.ModelPtr_ne_set)
    __swig_setmethods__["nw"] = _amici.ModelPtr_nw_set
    __swig_getmethods__["nw"] = _amici.ModelPtr_nw_get
    if _newclass:
        nw = _swig_property(_amici.ModelPtr_nw_get, _amici.ModelPtr_nw_set)
    __swig_setmethods__["ndwdx"] = _amici.ModelPtr_ndwdx_set
    __swig_getmethods__["ndwdx"] = _amici.ModelPtr_ndwdx_get
    if _newclass:
        ndwdx = _swig_property(_amici.ModelPtr_ndwdx_get, _amici.ModelPtr_ndwdx_set)
    __swig_setmethods__["ndwdp"] = _amici.ModelPtr_ndwdp_set
    __swig_getmethods__["ndwdp"] = _amici.ModelPtr_ndwdp_get
    if _newclass:
        ndwdp = _swig_property(_amici.ModelPtr_ndwdp_get, _amici.ModelPtr_ndwdp_set)
    __swig_setmethods__["ndxdotdw"] = _amici.ModelPtr_ndxdotdw_set
    __swig_getmethods__["ndxdotdw"] = _amici.ModelPtr_ndxdotdw_get
    if _newclass:
        ndxdotdw = _swig_property(_amici.ModelPtr_ndxdotdw_get, _amici.ModelPtr_ndxdotdw_set)
    __swig_setmethods__["ndJydy"] = _amici.ModelPtr_ndJydy_set
    __swig_getmethods__["ndJydy"] = _amici.ModelPtr_ndJydy_get
    if _newclass:
        ndJydy = _swig_property(_amici.ModelPtr_ndJydy_get, _amici.ModelPtr_ndJydy_set)
    __swig_setmethods__["nnz"] = _amici.ModelPtr_nnz_set
    __swig_getmethods__["nnz"] = _amici.ModelPtr_nnz_get
    if _newclass:
        nnz = _swig_property(_amici.ModelPtr_nnz_get, _amici.ModelPtr_nnz_set)
    __swig_setmethods__["nJ"] = _amici.ModelPtr_nJ_set
    __swig_getmethods__["nJ"] = _amici.ModelPtr_nJ_get
    if _newclass:
        nJ = _swig_property(_amici.ModelPtr_nJ_get, _amici.ModelPtr_nJ_set)
    __swig_setmethods__["ubw"] = _amici.ModelPtr_ubw_set
    __swig_getmethods__["ubw"] = _amici.ModelPtr_ubw_get
    if _newclass:
        ubw = _swig_property(_amici.ModelPtr_ubw_get, _amici.ModelPtr_ubw_set)
    __swig_setmethods__["lbw"] = _amici.ModelPtr_lbw_set
    __swig_getmethods__["lbw"] = _amici.ModelPtr_lbw_get
    if _newclass:
        lbw = _swig_property(_amici.ModelPtr_lbw_get, _amici.ModelPtr_lbw_set)
    __swig_setmethods__["pythonGenerated"] = _amici.ModelPtr_pythonGenerated_set
    __swig_getmethods__["pythonGenerated"] = _amici.ModelPtr_pythonGenerated_get
    if _newclass:
        pythonGenerated = _swig_property(_amici.ModelPtr_pythonGenerated_get, _amici.ModelPtr_pythonGenerated_set)
    __swig_setmethods__["ndxdotdp_explicit"] = _amici.ModelPtr_ndxdotdp_explicit_set
    __swig_getmethods__["ndxdotdp_explicit"] = _amici.ModelPtr_ndxdotdp_explicit_get
    if _newclass:
        ndxdotdp_explicit = _swig_property(_amici.ModelPtr_ndxdotdp_explicit_get, _amici.ModelPtr_ndxdotdp_explicit_set)
    __swig_setmethods__["ndxdotdp_implicit"] = _amici.ModelPtr_ndxdotdp_implicit_set
    __swig_getmethods__["ndxdotdp_implicit"] = _amici.ModelPtr_ndxdotdp_implicit_get
    if _newclass:
        ndxdotdp_implicit = _swig_property(_amici.ModelPtr_ndxdotdp_implicit_get, _amici.ModelPtr_ndxdotdp_implicit_set)
    __swig_setmethods__["o2mode"] = _amici.ModelPtr_o2mode_set
    __swig_getmethods__["o2mode"] = _amici.ModelPtr_o2mode_get
    if _newclass:
        o2mode = _swig_property(_amici.ModelPtr_o2mode_get, _amici.ModelPtr_o2mode_set)
    __swig_setmethods__["idlist"] = _amici.ModelPtr_idlist_set
    __swig_getmethods__["idlist"] = _amici.ModelPtr_idlist_get
    if _newclass:
        idlist = _swig_property(_amici.ModelPtr_idlist_get, _amici.ModelPtr_idlist_set)
    __swig_setmethods__["app"] = _amici.ModelPtr_app_set
    __swig_getmethods__["app"] = _amici.ModelPtr_app_get
    if _newclass:
        app = _swig_property(_amici.ModelPtr_app_get, _amici.ModelPtr_app_set)

    def getSolver(self) -> "std::unique_ptr< amici::Solver >":
        return _amici.ModelPtr_getSolver(self)

    def getAmiciVersion(self) -> "std::string const":
        return _amici.ModelPtr_getAmiciVersion(self)

    def getAmiciCommit(self) -> "std::string const":
        return _amici.ModelPtr_getAmiciCommit(self)

    def isFixedParameterStateReinitializationAllowed(self) -> "bool":
        return _amici.ModelPtr_isFixedParameterStateReinitializationAllowed(self)

    def fstau(self, stau: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int', ie: 'int') -> "void":
        return _amici.ModelPtr_fstau(self, stau, t, x, p, k, h, sx, ip, ie)

    def fsz(self, sz: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.ModelPtr_fsz(self, sz, ie, t, x, p, k, h, sx, ip)

    def fsrz(self, srz: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.ModelPtr_fsrz(self, srz, ie, t, x, p, k, h, sx, ip)

    def fdeltax(self, deltax: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *') -> "void":
        return _amici.ModelPtr_fdeltax(self, deltax, t, x, p, k, h, ie, xdot, xdot_old)

    def fdeltasx(self, deltasx: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *', ip: 'int', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', sx: 'amici::realtype const *', stau: 'amici::realtype const *') -> "void":
        return _amici.ModelPtr_fdeltasx(self, deltasx, t, x, p, k, h, w, ip, ie, xdot, xdot_old, sx, stau)

    def fdeltaxB(self, deltaxB: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', xB: 'amici::realtype const *') -> "void":
        return _amici.ModelPtr_fdeltaxB(self, deltaxB, t, x, p, k, h, ie, xdot, xdot_old, xB)

    def fdeltaqB(self, deltaqB: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', xB: 'amici::realtype const *') -> "void":
        return _amici.ModelPtr_fdeltaqB(self, deltaqB, t, x, p, k, h, ip, ie, xdot, xdot_old, xB)

    def fdwdp_colptrs(self, indexptrs: 'sunindextype *') -> "void":
        return _amici.ModelPtr_fdwdp_colptrs(self, indexptrs)

    def fdwdp_rowvals(self, indexvals: 'sunindextype *') -> "void":
        return _amici.ModelPtr_fdwdp_rowvals(self, indexvals)

    def fdwdx_colptrs(self, indexptrs: 'sunindextype *') -> "void":
        return _amici.ModelPtr_fdwdx_colptrs(self, indexptrs)

    def fdwdx_rowvals(self, indexvals: 'sunindextype *') -> "void":
        return _amici.ModelPtr_fdwdx_rowvals(self, indexvals)
ModelPtr_swigregister = _amici.ModelPtr_swigregister
ModelPtr_swigregister(ModelPtr)

class ExpDataPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpDataPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpDataPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ExpDataPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "std::unique_ptr< amici::ExpData >::pointer":
        return _amici.ExpDataPtr___deref__(self)

    def release(self) -> "std::unique_ptr< amici::ExpData >::pointer":
        return _amici.ExpDataPtr_release(self)

    def reset(self, *args) -> "void":
        return _amici.ExpDataPtr_reset(self, *args)

    def swap(self, __u: 'ExpDataPtr') -> "void":
        return _amici.ExpDataPtr_swap(self, __u)

    def get(self) -> "std::unique_ptr< amici::ExpData >::pointer":
        return _amici.ExpDataPtr_get(self)

    def __nonzero__(self):
        return _amici.ExpDataPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _amici.delete_ExpDataPtr
    __del__ = lambda self: None

    def nytrue(self) -> "int":
        return _amici.ExpDataPtr_nytrue(self)

    def nztrue(self) -> "int":
        return _amici.ExpDataPtr_nztrue(self)

    def nmaxevent(self) -> "int":
        return _amici.ExpDataPtr_nmaxevent(self)

    def nt(self) -> "int":
        return _amici.ExpDataPtr_nt(self)

    def setTimepoints(self, ts: 'DoubleVector') -> "void":
        return _amici.ExpDataPtr_setTimepoints(self, ts)

    def getTimepoints(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpDataPtr_getTimepoints(self)

    def getTimepoint(self, it: 'int') -> "amici::realtype":
        return _amici.ExpDataPtr_getTimepoint(self, it)

    def setObservedData(self, *args) -> "void":
        return _amici.ExpDataPtr_setObservedData(self, *args)

    def isSetObservedData(self, it: 'int', iy: 'int') -> "bool":
        return _amici.ExpDataPtr_isSetObservedData(self, it, iy)

    def getObservedData(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpDataPtr_getObservedData(self)

    def getObservedDataPtr(self, it: 'int') -> "amici::realtype const *":
        return _amici.ExpDataPtr_getObservedDataPtr(self, it)

    def setObservedDataStdDev(self, *args) -> "void":
        return _amici.ExpDataPtr_setObservedDataStdDev(self, *args)

    def isSetObservedDataStdDev(self, it: 'int', iy: 'int') -> "bool":
        return _amici.ExpDataPtr_isSetObservedDataStdDev(self, it, iy)

    def getObservedDataStdDev(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpDataPtr_getObservedDataStdDev(self)

    def getObservedDataStdDevPtr(self, it: 'int') -> "amici::realtype const *":
        return _amici.ExpDataPtr_getObservedDataStdDevPtr(self, it)

    def setObservedEvents(self, *args) -> "void":
        return _amici.ExpDataPtr_setObservedEvents(self, *args)

    def isSetObservedEvents(self, ie: 'int', iz: 'int') -> "bool":
        return _amici.ExpDataPtr_isSetObservedEvents(self, ie, iz)

    def getObservedEvents(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpDataPtr_getObservedEvents(self)

    def getObservedEventsPtr(self, ie: 'int') -> "amici::realtype const *":
        return _amici.ExpDataPtr_getObservedEventsPtr(self, ie)

    def setObservedEventsStdDev(self, *args) -> "void":
        return _amici.ExpDataPtr_setObservedEventsStdDev(self, *args)

    def isSetObservedEventsStdDev(self, ie: 'int', iz: 'int') -> "bool":
        return _amici.ExpDataPtr_isSetObservedEventsStdDev(self, ie, iz)

    def getObservedEventsStdDev(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpDataPtr_getObservedEventsStdDev(self)

    def getObservedEventsStdDevPtr(self, ie: 'int') -> "amici::realtype const *":
        return _amici.ExpDataPtr_getObservedEventsStdDevPtr(self, ie)
    __swig_setmethods__["fixedParameters"] = _amici.ExpDataPtr_fixedParameters_set
    __swig_getmethods__["fixedParameters"] = _amici.ExpDataPtr_fixedParameters_get
    if _newclass:
        fixedParameters = _swig_property(_amici.ExpDataPtr_fixedParameters_get, _amici.ExpDataPtr_fixedParameters_set)
    __swig_setmethods__["fixedParametersPreequilibration"] = _amici.ExpDataPtr_fixedParametersPreequilibration_set
    __swig_getmethods__["fixedParametersPreequilibration"] = _amici.ExpDataPtr_fixedParametersPreequilibration_get
    if _newclass:
        fixedParametersPreequilibration = _swig_property(_amici.ExpDataPtr_fixedParametersPreequilibration_get, _amici.ExpDataPtr_fixedParametersPreequilibration_set)
    __swig_setmethods__["fixedParametersPresimulation"] = _amici.ExpDataPtr_fixedParametersPresimulation_set
    __swig_getmethods__["fixedParametersPresimulation"] = _amici.ExpDataPtr_fixedParametersPresimulation_get
    if _newclass:
        fixedParametersPresimulation = _swig_property(_amici.ExpDataPtr_fixedParametersPresimulation_get, _amici.ExpDataPtr_fixedParametersPresimulation_set)
    __swig_setmethods__["parameters"] = _amici.ExpDataPtr_parameters_set
    __swig_getmethods__["parameters"] = _amici.ExpDataPtr_parameters_get
    if _newclass:
        parameters = _swig_property(_amici.ExpDataPtr_parameters_get, _amici.ExpDataPtr_parameters_set)
    __swig_setmethods__["x0"] = _amici.ExpDataPtr_x0_set
    __swig_getmethods__["x0"] = _amici.ExpDataPtr_x0_get
    if _newclass:
        x0 = _swig_property(_amici.ExpDataPtr_x0_get, _amici.ExpDataPtr_x0_set)
    __swig_setmethods__["sx0"] = _amici.ExpDataPtr_sx0_set
    __swig_getmethods__["sx0"] = _amici.ExpDataPtr_sx0_get
    if _newclass:
        sx0 = _swig_property(_amici.ExpDataPtr_sx0_get, _amici.ExpDataPtr_sx0_set)
    __swig_setmethods__["pscale"] = _amici.ExpDataPtr_pscale_set
    __swig_getmethods__["pscale"] = _amici.ExpDataPtr_pscale_get
    if _newclass:
        pscale = _swig_property(_amici.ExpDataPtr_pscale_get, _amici.ExpDataPtr_pscale_set)
    __swig_setmethods__["plist"] = _amici.ExpDataPtr_plist_set
    __swig_getmethods__["plist"] = _amici.ExpDataPtr_plist_get
    if _newclass:
        plist = _swig_property(_amici.ExpDataPtr_plist_get, _amici.ExpDataPtr_plist_set)
    __swig_setmethods__["t_presim"] = _amici.ExpDataPtr_t_presim_set
    __swig_getmethods__["t_presim"] = _amici.ExpDataPtr_t_presim_get
    if _newclass:
        t_presim = _swig_property(_amici.ExpDataPtr_t_presim_get, _amici.ExpDataPtr_t_presim_set)
    __swig_setmethods__["reinitializeFixedParameterInitialStates"] = _amici.ExpDataPtr_reinitializeFixedParameterInitialStates_set
    __swig_getmethods__["reinitializeFixedParameterInitialStates"] = _amici.ExpDataPtr_reinitializeFixedParameterInitialStates_get
    if _newclass:
        reinitializeFixedParameterInitialStates = _swig_property(_amici.ExpDataPtr_reinitializeFixedParameterInitialStates_get, _amici.ExpDataPtr_reinitializeFixedParameterInitialStates_set)
ExpDataPtr_swigregister = _amici.ExpDataPtr_swigregister
ExpDataPtr_swigregister(ExpDataPtr)

M_E = _amici.M_E
M_LOG2E = _amici.M_LOG2E
M_LOG10E = _amici.M_LOG10E
M_LN2 = _amici.M_LN2
M_LN10 = _amici.M_LN10
M_PI = _amici.M_PI
M_PI_2 = _amici.M_PI_2
M_PI_4 = _amici.M_PI_4
M_1_PI = _amici.M_1_PI
M_2_PI = _amici.M_2_PI
M_2_SQRTPI = _amici.M_2_SQRTPI
M_SQRT2 = _amici.M_SQRT2
M_SQRT1_2 = _amici.M_SQRT1_2
BLASLayout_rowMajor = _amici.BLASLayout_rowMajor
BLASLayout_colMajor = _amici.BLASLayout_colMajor
BLASTranspose_noTrans = _amici.BLASTranspose_noTrans
BLASTranspose_trans = _amici.BLASTranspose_trans
BLASTranspose_conjTrans = _amici.BLASTranspose_conjTrans
ParameterScaling_none = _amici.ParameterScaling_none
ParameterScaling_ln = _amici.ParameterScaling_ln
ParameterScaling_log10 = _amici.ParameterScaling_log10
SecondOrderMode_none = _amici.SecondOrderMode_none
SecondOrderMode_full = _amici.SecondOrderMode_full
SecondOrderMode_directional = _amici.SecondOrderMode_directional
SensitivityOrder_none = _amici.SensitivityOrder_none
SensitivityOrder_first = _amici.SensitivityOrder_first
SensitivityOrder_second = _amici.SensitivityOrder_second
SensitivityMethod_none = _amici.SensitivityMethod_none
SensitivityMethod_forward = _amici.SensitivityMethod_forward
SensitivityMethod_adjoint = _amici.SensitivityMethod_adjoint
LinearSolver_dense = _amici.LinearSolver_dense
LinearSolver_band = _amici.LinearSolver_band
LinearSolver_LAPACKDense = _amici.LinearSolver_LAPACKDense
LinearSolver_LAPACKBand = _amici.LinearSolver_LAPACKBand
LinearSolver_diag = _amici.LinearSolver_diag
LinearSolver_SPGMR = _amici.LinearSolver_SPGMR
LinearSolver_SPBCG = _amici.LinearSolver_SPBCG
LinearSolver_SPTFQMR = _amici.LinearSolver_SPTFQMR
LinearSolver_KLU = _amici.LinearSolver_KLU
LinearSolver_SuperLUMT = _amici.LinearSolver_SuperLUMT
InternalSensitivityMethod_simultaneous = _amici.InternalSensitivityMethod_simultaneous
InternalSensitivityMethod_staggered = _amici.InternalSensitivityMethod_staggered
InternalSensitivityMethod_staggered1 = _amici.InternalSensitivityMethod_staggered1
InterpolationType_hermite = _amici.InterpolationType_hermite
InterpolationType_polynomial = _amici.InterpolationType_polynomial
LinearMultistepMethod_adams = _amici.LinearMultistepMethod_adams
LinearMultistepMethod_BDF = _amici.LinearMultistepMethod_BDF
NonlinearSolverIteration_functional = _amici.NonlinearSolverIteration_functional
NonlinearSolverIteration_fixedpoint = _amici.NonlinearSolverIteration_fixedpoint
NonlinearSolverIteration_newton = _amici.NonlinearSolverIteration_newton
SteadyStateSensitivityMode_newtonOnly = _amici.SteadyStateSensitivityMode_newtonOnly
SteadyStateSensitivityMode_simulationFSA = _amici.SteadyStateSensitivityMode_simulationFSA
SteadyStateStatus_failed_too_long_simulation = _amici.SteadyStateStatus_failed_too_long_simulation
SteadyStateStatus_failed_damping = _amici.SteadyStateStatus_failed_damping
SteadyStateStatus_failed_factorization = _amici.SteadyStateStatus_failed_factorization
SteadyStateStatus_failed_convergence = _amici.SteadyStateStatus_failed_convergence
SteadyStateStatus_failed = _amici.SteadyStateStatus_failed
SteadyStateStatus_not_run = _amici.SteadyStateStatus_not_run
SteadyStateStatus_success = _amici.SteadyStateStatus_success
SteadyStateContext_newtonSensi = _amici.SteadyStateContext_newtonSensi
SteadyStateContext_sensiStorage = _amici.SteadyStateContext_sensiStorage
SteadyStateContext_solverCreation = _amici.SteadyStateContext_solverCreation
NewtonDampingFactorMode_off = _amici.NewtonDampingFactorMode_off
NewtonDampingFactorMode_on = _amici.NewtonDampingFactorMode_on
FixedParameterContext_simulation = _amici.FixedParameterContext_simulation
FixedParameterContext_preequilibration = _amici.FixedParameterContext_preequilibration
FixedParameterContext_presimulation = _amici.FixedParameterContext_presimulation
RDataReporting_full = _amici.RDataReporting_full
RDataReporting_residuals = _amici.RDataReporting_residuals
RDataReporting_likelihood = _amici.RDataReporting_likelihood
class AbstractModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_AbstractModel
    __del__ = lambda self: None

    def getSolver(self) -> "std::unique_ptr< amici::Solver >":
        return _amici.AbstractModel_getSolver(self)

    def getAmiciVersion(self) -> "std::string const":
        return _amici.AbstractModel_getAmiciVersion(self)

    def getAmiciCommit(self) -> "std::string const":
        return _amici.AbstractModel_getAmiciCommit(self)

    def fx0(self, x0: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fx0(self, x0, t, p, k)

    def isFixedParameterStateReinitializationAllowed(self) -> "bool":
        return _amici.AbstractModel_isFixedParameterStateReinitializationAllowed(self)

    def fx0_fixedParameters(self, x0: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fx0_fixedParameters(self, x0, t, p, k)

    def fsx0_fixedParameters(self, sx0: 'amici::realtype *', t: 'amici::realtype const', x0: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.AbstractModel_fsx0_fixedParameters(self, sx0, t, x0, p, k, ip)

    def fsx0(self, sx0: 'amici::realtype *', t: 'amici::realtype const', x0: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.AbstractModel_fsx0(self, sx0, t, x0, p, k, ip)

    def fstau(self, stau: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int', ie: 'int') -> "void":
        return _amici.AbstractModel_fstau(self, stau, t, x, p, k, h, sx, ip, ie)

    def fy(self, y: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fy(self, y, t, x, p, k, h, w)

    def fdydp(self, dydp: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int', w: 'amici::realtype const *', dwdp: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdydp(self, dydp, t, x, p, k, h, ip, w, dwdp)

    def fdydx(self, dydx: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *', dwdx: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdydx(self, dydx, t, x, p, k, h, w, dwdx)

    def fz(self, z: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fz(self, z, ie, t, x, p, k, h)

    def fsz(self, sz: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.AbstractModel_fsz(self, sz, ie, t, x, p, k, h, sx, ip)

    def frz(self, rz: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_frz(self, rz, ie, t, x, p, k, h)

    def fsrz(self, srz: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.AbstractModel_fsrz(self, srz, ie, t, x, p, k, h, sx, ip)

    def fdzdp(self, dzdp: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.AbstractModel_fdzdp(self, dzdp, ie, t, x, p, k, h, ip)

    def fdzdx(self, dzdx: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdzdx(self, dzdx, ie, t, x, p, k, h)

    def fdrzdp(self, drzdp: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.AbstractModel_fdrzdp(self, drzdp, ie, t, x, p, k, h, ip)

    def fdrzdx(self, drzdx: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdrzdx(self, drzdx, ie, t, x, p, k, h)

    def fdeltax(self, deltax: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdeltax(self, deltax, t, x, p, k, h, ie, xdot, xdot_old)

    def fdeltasx(self, deltasx: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *', ip: 'int', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', sx: 'amici::realtype const *', stau: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdeltasx(self, deltasx, t, x, p, k, h, w, ip, ie, xdot, xdot_old, sx, stau)

    def fdeltaxB(self, deltaxB: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', xB: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdeltaxB(self, deltaxB, t, x, p, k, h, ie, xdot, xdot_old, xB)

    def fdeltaqB(self, deltaqB: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', xB: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdeltaqB(self, deltaqB, t, x, p, k, h, ip, ie, xdot, xdot_old, xB)

    def fsigmay(self, sigmay: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fsigmay(self, sigmay, t, p, k)

    def fdsigmaydp(self, dsigmaydp: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.AbstractModel_fdsigmaydp(self, dsigmaydp, t, p, k, ip)

    def fsigmaz(self, sigmaz: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fsigmaz(self, sigmaz, t, p, k)

    def fdsigmazdp(self, dsigmazdp: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.AbstractModel_fdsigmazdp(self, dsigmazdp, t, p, k, ip)

    def fJy(self, nllh: 'amici::realtype *', iy: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', y: 'amici::realtype const *', sigmay: 'amici::realtype const *', my: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fJy(self, nllh, iy, p, k, y, sigmay, my)

    def fJz(self, nllh: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', z: 'amici::realtype const *', sigmaz: 'amici::realtype const *', mz: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fJz(self, nllh, iz, p, k, z, sigmaz, mz)

    def fJrz(self, nllh: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', z: 'amici::realtype const *', sigmaz: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fJrz(self, nllh, iz, p, k, z, sigmaz)

    def fdJydy(self, dJydy: 'amici::realtype *', iy: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', y: 'amici::realtype const *', sigmay: 'amici::realtype const *', my: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdJydy(self, dJydy, iy, p, k, y, sigmay, my)

    def fdJydsigma(self, dJydsigma: 'amici::realtype *', iy: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', y: 'amici::realtype const *', sigmay: 'amici::realtype const *', my: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdJydsigma(self, dJydsigma, iy, p, k, y, sigmay, my)

    def fdJzdz(self, dJzdz: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', z: 'amici::realtype const *', sigmaz: 'amici::realtype const *', mz: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdJzdz(self, dJzdz, iz, p, k, z, sigmaz, mz)

    def fdJzdsigma(self, dJzdsigma: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', z: 'amici::realtype const *', sigmaz: 'amici::realtype const *', mz: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdJzdsigma(self, dJzdsigma, iz, p, k, z, sigmaz, mz)

    def fdJrzdz(self, dJrzdz: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', rz: 'amici::realtype const *', sigmaz: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdJrzdz(self, dJrzdz, iz, p, k, rz, sigmaz)

    def fdJrzdsigma(self, dJrzdsigma: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', rz: 'amici::realtype const *', sigmaz: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdJrzdsigma(self, dJrzdsigma, iz, p, k, rz, sigmaz)

    def fw(self, w: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', tcl: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fw(self, w, t, x, p, k, h, tcl)

    def fdwdp_colptrs(self, indexptrs: 'sunindextype *') -> "void":
        return _amici.AbstractModel_fdwdp_colptrs(self, indexptrs)

    def fdwdp_rowvals(self, indexvals: 'sunindextype *') -> "void":
        return _amici.AbstractModel_fdwdp_rowvals(self, indexvals)

    def fdwdp(self, *args) -> "void":
        return _amici.AbstractModel_fdwdp(self, *args)

    def fdwdx(self, dwdx: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *', tcl: 'amici::realtype const *') -> "void":
        return _amici.AbstractModel_fdwdx(self, dwdx, t, x, p, k, h, w, tcl)

    def fdwdx_colptrs(self, indexptrs: 'sunindextype *') -> "void":
        return _amici.AbstractModel_fdwdx_colptrs(self, indexptrs)

    def fdwdx_rowvals(self, indexvals: 'sunindextype *') -> "void":
        return _amici.AbstractModel_fdwdx_rowvals(self, indexvals)
AbstractModel_swigregister = _amici.AbstractModel_swigregister
AbstractModel_swigregister(AbstractModel)
cvar = _amici.cvar
pi = cvar.pi
AMICI_ONEOUTPUT = cvar.AMICI_ONEOUTPUT
AMICI_RECOVERABLE_ERROR = cvar.AMICI_RECOVERABLE_ERROR
AMICI_UNRECOVERABLE_ERROR = cvar.AMICI_UNRECOVERABLE_ERROR
AMICI_TOO_MUCH_WORK = cvar.AMICI_TOO_MUCH_WORK
AMICI_TOO_MUCH_ACC = cvar.AMICI_TOO_MUCH_ACC
AMICI_ERR_FAILURE = cvar.AMICI_ERR_FAILURE
AMICI_CONV_FAILURE = cvar.AMICI_CONV_FAILURE
AMICI_ILL_INPUT = cvar.AMICI_ILL_INPUT
AMICI_ERROR = cvar.AMICI_ERROR
AMICI_NO_STEADY_STATE = cvar.AMICI_NO_STEADY_STATE
AMICI_DAMPING_FACTOR_ERROR = cvar.AMICI_DAMPING_FACTOR_ERROR
AMICI_SINGULAR_JACOBIAN = cvar.AMICI_SINGULAR_JACOBIAN
AMICI_NOT_IMPLEMENTED = cvar.AMICI_NOT_IMPLEMENTED
AMICI_SUCCESS = cvar.AMICI_SUCCESS
AMICI_DATA_RETURN = cvar.AMICI_DATA_RETURN
AMICI_ROOT_RETURN = cvar.AMICI_ROOT_RETURN
AMICI_NORMAL = cvar.AMICI_NORMAL
AMICI_ONE_STEP = cvar.AMICI_ONE_STEP
AMICI_PREEQUILIBRATE = cvar.AMICI_PREEQUILIBRATE


def unscaleParameters(bufferScaled: 'gsl::span< amici::realtype const >', pscale: 'gsl::span< amici::ParameterScaling const >', bufferUnscaled: 'gsl::span< amici::realtype >') -> "void":
    return _amici.unscaleParameters(bufferScaled, pscale, bufferUnscaled)
unscaleParameters = _amici.unscaleParameters

def getUnscaledParameter(scaledParameter: 'double', scaling: 'amici::ParameterScaling') -> "double":
    return _amici.getUnscaledParameter(scaledParameter, scaling)
getUnscaledParameter = _amici.getUnscaledParameter

def getScaledParameter(unscaledParameter: 'double', scaling: 'amici::ParameterScaling') -> "double":
    return _amici.getScaledParameter(unscaledParameter, scaling)
getScaledParameter = _amici.getScaledParameter

def scaleParameters(bufferUnscaled: 'gsl::span< amici::realtype const >', pscale: 'gsl::span< amici::ParameterScaling const >', bufferScaled: 'gsl::span< amici::realtype >') -> "void":
    return _amici.scaleParameters(bufferUnscaled, pscale, bufferScaled)
scaleParameters = _amici.scaleParameters

def backtraceString(maxFrames: 'int') -> "std::string":
    return _amici.backtraceString(maxFrames)
backtraceString = _amici.backtraceString
class ContextManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContextManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContextManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _amici.new_ContextManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _amici.delete_ContextManager
    __del__ = lambda self: None
ContextManager_swigregister = _amici.ContextManager_swigregister
ContextManager_swigregister(ContextManager)

class ExpData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ExpData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _amici.delete_ExpData
    __del__ = lambda self: None

    def nytrue(self) -> "int":
        return _amici.ExpData_nytrue(self)

    def nztrue(self) -> "int":
        return _amici.ExpData_nztrue(self)

    def nmaxevent(self) -> "int":
        return _amici.ExpData_nmaxevent(self)

    def nt(self) -> "int":
        return _amici.ExpData_nt(self)

    def setTimepoints(self, ts: 'DoubleVector') -> "void":
        return _amici.ExpData_setTimepoints(self, ts)

    def getTimepoints(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpData_getTimepoints(self)

    def getTimepoint(self, it: 'int') -> "amici::realtype":
        return _amici.ExpData_getTimepoint(self, it)

    def setObservedData(self, *args) -> "void":
        return _amici.ExpData_setObservedData(self, *args)

    def isSetObservedData(self, it: 'int', iy: 'int') -> "bool":
        return _amici.ExpData_isSetObservedData(self, it, iy)

    def getObservedData(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpData_getObservedData(self)

    def getObservedDataPtr(self, it: 'int') -> "amici::realtype const *":
        return _amici.ExpData_getObservedDataPtr(self, it)

    def setObservedDataStdDev(self, *args) -> "void":
        return _amici.ExpData_setObservedDataStdDev(self, *args)

    def isSetObservedDataStdDev(self, it: 'int', iy: 'int') -> "bool":
        return _amici.ExpData_isSetObservedDataStdDev(self, it, iy)

    def getObservedDataStdDev(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpData_getObservedDataStdDev(self)

    def getObservedDataStdDevPtr(self, it: 'int') -> "amici::realtype const *":
        return _amici.ExpData_getObservedDataStdDevPtr(self, it)

    def setObservedEvents(self, *args) -> "void":
        return _amici.ExpData_setObservedEvents(self, *args)

    def isSetObservedEvents(self, ie: 'int', iz: 'int') -> "bool":
        return _amici.ExpData_isSetObservedEvents(self, ie, iz)

    def getObservedEvents(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpData_getObservedEvents(self)

    def getObservedEventsPtr(self, ie: 'int') -> "amici::realtype const *":
        return _amici.ExpData_getObservedEventsPtr(self, ie)

    def setObservedEventsStdDev(self, *args) -> "void":
        return _amici.ExpData_setObservedEventsStdDev(self, *args)

    def isSetObservedEventsStdDev(self, ie: 'int', iz: 'int') -> "bool":
        return _amici.ExpData_isSetObservedEventsStdDev(self, ie, iz)

    def getObservedEventsStdDev(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.ExpData_getObservedEventsStdDev(self)

    def getObservedEventsStdDevPtr(self, ie: 'int') -> "amici::realtype const *":
        return _amici.ExpData_getObservedEventsStdDevPtr(self, ie)
    __swig_setmethods__["fixedParameters"] = _amici.ExpData_fixedParameters_set
    __swig_getmethods__["fixedParameters"] = _amici.ExpData_fixedParameters_get
    if _newclass:
        fixedParameters = _swig_property(_amici.ExpData_fixedParameters_get, _amici.ExpData_fixedParameters_set)
    __swig_setmethods__["fixedParametersPreequilibration"] = _amici.ExpData_fixedParametersPreequilibration_set
    __swig_getmethods__["fixedParametersPreequilibration"] = _amici.ExpData_fixedParametersPreequilibration_get
    if _newclass:
        fixedParametersPreequilibration = _swig_property(_amici.ExpData_fixedParametersPreequilibration_get, _amici.ExpData_fixedParametersPreequilibration_set)
    __swig_setmethods__["fixedParametersPresimulation"] = _amici.ExpData_fixedParametersPresimulation_set
    __swig_getmethods__["fixedParametersPresimulation"] = _amici.ExpData_fixedParametersPresimulation_get
    if _newclass:
        fixedParametersPresimulation = _swig_property(_amici.ExpData_fixedParametersPresimulation_get, _amici.ExpData_fixedParametersPresimulation_set)
    __swig_setmethods__["parameters"] = _amici.ExpData_parameters_set
    __swig_getmethods__["parameters"] = _amici.ExpData_parameters_get
    if _newclass:
        parameters = _swig_property(_amici.ExpData_parameters_get, _amici.ExpData_parameters_set)
    __swig_setmethods__["x0"] = _amici.ExpData_x0_set
    __swig_getmethods__["x0"] = _amici.ExpData_x0_get
    if _newclass:
        x0 = _swig_property(_amici.ExpData_x0_get, _amici.ExpData_x0_set)
    __swig_setmethods__["sx0"] = _amici.ExpData_sx0_set
    __swig_getmethods__["sx0"] = _amici.ExpData_sx0_get
    if _newclass:
        sx0 = _swig_property(_amici.ExpData_sx0_get, _amici.ExpData_sx0_set)
    __swig_setmethods__["pscale"] = _amici.ExpData_pscale_set
    __swig_getmethods__["pscale"] = _amici.ExpData_pscale_get
    if _newclass:
        pscale = _swig_property(_amici.ExpData_pscale_get, _amici.ExpData_pscale_set)
    __swig_setmethods__["plist"] = _amici.ExpData_plist_set
    __swig_getmethods__["plist"] = _amici.ExpData_plist_get
    if _newclass:
        plist = _swig_property(_amici.ExpData_plist_get, _amici.ExpData_plist_set)
    __swig_setmethods__["t_presim"] = _amici.ExpData_t_presim_set
    __swig_getmethods__["t_presim"] = _amici.ExpData_t_presim_get
    if _newclass:
        t_presim = _swig_property(_amici.ExpData_t_presim_get, _amici.ExpData_t_presim_set)
    __swig_setmethods__["reinitializeFixedParameterInitialStates"] = _amici.ExpData_reinitializeFixedParameterInitialStates_set
    __swig_getmethods__["reinitializeFixedParameterInitialStates"] = _amici.ExpData_reinitializeFixedParameterInitialStates_get
    if _newclass:
        reinitializeFixedParameterInitialStates = _swig_property(_amici.ExpData_reinitializeFixedParameterInitialStates_get, _amici.ExpData_reinitializeFixedParameterInitialStates_set)
ExpData_swigregister = _amici.ExpData_swigregister
ExpData_swigregister(ExpData)


def checkSigmaPositivity(*args) -> "void":
    return _amici.checkSigmaPositivity(*args)
checkSigmaPositivity = _amici.checkSigmaPositivity
class ConditionContext(ContextManager):
    __swig_setmethods__ = {}
    for _s in [ContextManager]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConditionContext, name, value)
    __swig_getmethods__ = {}
    for _s in [ContextManager]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConditionContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ConditionContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _amici.delete_ConditionContext
    __del__ = lambda self: None

    def applyCondition(self, edata: 'ExpData', fpc: 'amici::FixedParameterContext') -> "void":
        return _amici.ConditionContext_applyCondition(self, edata, fpc)

    def restore(self) -> "void":
        return _amici.ConditionContext_restore(self)
ConditionContext_swigregister = _amici.ConditionContext_swigregister
ConditionContext_swigregister(ConditionContext)

class ReturnData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ReturnData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _amici.delete_ReturnData
    __del__ = lambda self: None
    __swig_setmethods__["ts"] = _amici.ReturnData_ts_set
    __swig_getmethods__["ts"] = _amici.ReturnData_ts_get
    if _newclass:
        ts = _swig_property(_amici.ReturnData_ts_get, _amici.ReturnData_ts_set)
    __swig_setmethods__["xdot"] = _amici.ReturnData_xdot_set
    __swig_getmethods__["xdot"] = _amici.ReturnData_xdot_get
    if _newclass:
        xdot = _swig_property(_amici.ReturnData_xdot_get, _amici.ReturnData_xdot_set)
    __swig_setmethods__["J"] = _amici.ReturnData_J_set
    __swig_getmethods__["J"] = _amici.ReturnData_J_get
    if _newclass:
        J = _swig_property(_amici.ReturnData_J_get, _amici.ReturnData_J_set)
    __swig_setmethods__["w"] = _amici.ReturnData_w_set
    __swig_getmethods__["w"] = _amici.ReturnData_w_get
    if _newclass:
        w = _swig_property(_amici.ReturnData_w_get, _amici.ReturnData_w_set)
    __swig_setmethods__["z"] = _amici.ReturnData_z_set
    __swig_getmethods__["z"] = _amici.ReturnData_z_get
    if _newclass:
        z = _swig_property(_amici.ReturnData_z_get, _amici.ReturnData_z_set)
    __swig_setmethods__["sigmaz"] = _amici.ReturnData_sigmaz_set
    __swig_getmethods__["sigmaz"] = _amici.ReturnData_sigmaz_get
    if _newclass:
        sigmaz = _swig_property(_amici.ReturnData_sigmaz_get, _amici.ReturnData_sigmaz_set)
    __swig_setmethods__["sz"] = _amici.ReturnData_sz_set
    __swig_getmethods__["sz"] = _amici.ReturnData_sz_get
    if _newclass:
        sz = _swig_property(_amici.ReturnData_sz_get, _amici.ReturnData_sz_set)
    __swig_setmethods__["ssigmaz"] = _amici.ReturnData_ssigmaz_set
    __swig_getmethods__["ssigmaz"] = _amici.ReturnData_ssigmaz_get
    if _newclass:
        ssigmaz = _swig_property(_amici.ReturnData_ssigmaz_get, _amici.ReturnData_ssigmaz_set)
    __swig_setmethods__["rz"] = _amici.ReturnData_rz_set
    __swig_getmethods__["rz"] = _amici.ReturnData_rz_get
    if _newclass:
        rz = _swig_property(_amici.ReturnData_rz_get, _amici.ReturnData_rz_set)
    __swig_setmethods__["srz"] = _amici.ReturnData_srz_set
    __swig_getmethods__["srz"] = _amici.ReturnData_srz_get
    if _newclass:
        srz = _swig_property(_amici.ReturnData_srz_get, _amici.ReturnData_srz_set)
    __swig_setmethods__["s2rz"] = _amici.ReturnData_s2rz_set
    __swig_getmethods__["s2rz"] = _amici.ReturnData_s2rz_get
    if _newclass:
        s2rz = _swig_property(_amici.ReturnData_s2rz_get, _amici.ReturnData_s2rz_set)
    __swig_setmethods__["x"] = _amici.ReturnData_x_set
    __swig_getmethods__["x"] = _amici.ReturnData_x_get
    if _newclass:
        x = _swig_property(_amici.ReturnData_x_get, _amici.ReturnData_x_set)
    __swig_setmethods__["sx"] = _amici.ReturnData_sx_set
    __swig_getmethods__["sx"] = _amici.ReturnData_sx_get
    if _newclass:
        sx = _swig_property(_amici.ReturnData_sx_get, _amici.ReturnData_sx_set)
    __swig_setmethods__["y"] = _amici.ReturnData_y_set
    __swig_getmethods__["y"] = _amici.ReturnData_y_get
    if _newclass:
        y = _swig_property(_amici.ReturnData_y_get, _amici.ReturnData_y_set)
    __swig_setmethods__["sigmay"] = _amici.ReturnData_sigmay_set
    __swig_getmethods__["sigmay"] = _amici.ReturnData_sigmay_get
    if _newclass:
        sigmay = _swig_property(_amici.ReturnData_sigmay_get, _amici.ReturnData_sigmay_set)
    __swig_setmethods__["sy"] = _amici.ReturnData_sy_set
    __swig_getmethods__["sy"] = _amici.ReturnData_sy_get
    if _newclass:
        sy = _swig_property(_amici.ReturnData_sy_get, _amici.ReturnData_sy_set)
    __swig_setmethods__["ssigmay"] = _amici.ReturnData_ssigmay_set
    __swig_getmethods__["ssigmay"] = _amici.ReturnData_ssigmay_get
    if _newclass:
        ssigmay = _swig_property(_amici.ReturnData_ssigmay_get, _amici.ReturnData_ssigmay_set)
    __swig_setmethods__["res"] = _amici.ReturnData_res_set
    __swig_getmethods__["res"] = _amici.ReturnData_res_get
    if _newclass:
        res = _swig_property(_amici.ReturnData_res_get, _amici.ReturnData_res_set)
    __swig_setmethods__["sres"] = _amici.ReturnData_sres_set
    __swig_getmethods__["sres"] = _amici.ReturnData_sres_get
    if _newclass:
        sres = _swig_property(_amici.ReturnData_sres_get, _amici.ReturnData_sres_set)
    __swig_setmethods__["FIM"] = _amici.ReturnData_FIM_set
    __swig_getmethods__["FIM"] = _amici.ReturnData_FIM_get
    if _newclass:
        FIM = _swig_property(_amici.ReturnData_FIM_get, _amici.ReturnData_FIM_set)
    __swig_setmethods__["numsteps"] = _amici.ReturnData_numsteps_set
    __swig_getmethods__["numsteps"] = _amici.ReturnData_numsteps_get
    if _newclass:
        numsteps = _swig_property(_amici.ReturnData_numsteps_get, _amici.ReturnData_numsteps_set)
    __swig_setmethods__["numstepsB"] = _amici.ReturnData_numstepsB_set
    __swig_getmethods__["numstepsB"] = _amici.ReturnData_numstepsB_get
    if _newclass:
        numstepsB = _swig_property(_amici.ReturnData_numstepsB_get, _amici.ReturnData_numstepsB_set)
    __swig_setmethods__["numrhsevals"] = _amici.ReturnData_numrhsevals_set
    __swig_getmethods__["numrhsevals"] = _amici.ReturnData_numrhsevals_get
    if _newclass:
        numrhsevals = _swig_property(_amici.ReturnData_numrhsevals_get, _amici.ReturnData_numrhsevals_set)
    __swig_setmethods__["numrhsevalsB"] = _amici.ReturnData_numrhsevalsB_set
    __swig_getmethods__["numrhsevalsB"] = _amici.ReturnData_numrhsevalsB_get
    if _newclass:
        numrhsevalsB = _swig_property(_amici.ReturnData_numrhsevalsB_get, _amici.ReturnData_numrhsevalsB_set)
    __swig_setmethods__["numerrtestfails"] = _amici.ReturnData_numerrtestfails_set
    __swig_getmethods__["numerrtestfails"] = _amici.ReturnData_numerrtestfails_get
    if _newclass:
        numerrtestfails = _swig_property(_amici.ReturnData_numerrtestfails_get, _amici.ReturnData_numerrtestfails_set)
    __swig_setmethods__["numerrtestfailsB"] = _amici.ReturnData_numerrtestfailsB_set
    __swig_getmethods__["numerrtestfailsB"] = _amici.ReturnData_numerrtestfailsB_get
    if _newclass:
        numerrtestfailsB = _swig_property(_amici.ReturnData_numerrtestfailsB_get, _amici.ReturnData_numerrtestfailsB_set)
    __swig_setmethods__["numnonlinsolvconvfails"] = _amici.ReturnData_numnonlinsolvconvfails_set
    __swig_getmethods__["numnonlinsolvconvfails"] = _amici.ReturnData_numnonlinsolvconvfails_get
    if _newclass:
        numnonlinsolvconvfails = _swig_property(_amici.ReturnData_numnonlinsolvconvfails_get, _amici.ReturnData_numnonlinsolvconvfails_set)
    __swig_setmethods__["numnonlinsolvconvfailsB"] = _amici.ReturnData_numnonlinsolvconvfailsB_set
    __swig_getmethods__["numnonlinsolvconvfailsB"] = _amici.ReturnData_numnonlinsolvconvfailsB_get
    if _newclass:
        numnonlinsolvconvfailsB = _swig_property(_amici.ReturnData_numnonlinsolvconvfailsB_get, _amici.ReturnData_numnonlinsolvconvfailsB_set)
    __swig_setmethods__["order"] = _amici.ReturnData_order_set
    __swig_getmethods__["order"] = _amici.ReturnData_order_get
    if _newclass:
        order = _swig_property(_amici.ReturnData_order_get, _amici.ReturnData_order_set)
    __swig_setmethods__["cpu_time"] = _amici.ReturnData_cpu_time_set
    __swig_getmethods__["cpu_time"] = _amici.ReturnData_cpu_time_get
    if _newclass:
        cpu_time = _swig_property(_amici.ReturnData_cpu_time_get, _amici.ReturnData_cpu_time_set)
    __swig_setmethods__["cpu_timeB"] = _amici.ReturnData_cpu_timeB_set
    __swig_getmethods__["cpu_timeB"] = _amici.ReturnData_cpu_timeB_get
    if _newclass:
        cpu_timeB = _swig_property(_amici.ReturnData_cpu_timeB_get, _amici.ReturnData_cpu_timeB_set)
    __swig_setmethods__["preeq_status"] = _amici.ReturnData_preeq_status_set
    __swig_getmethods__["preeq_status"] = _amici.ReturnData_preeq_status_get
    if _newclass:
        preeq_status = _swig_property(_amici.ReturnData_preeq_status_get, _amici.ReturnData_preeq_status_set)
    __swig_setmethods__["preeq_cpu_time"] = _amici.ReturnData_preeq_cpu_time_set
    __swig_getmethods__["preeq_cpu_time"] = _amici.ReturnData_preeq_cpu_time_get
    if _newclass:
        preeq_cpu_time = _swig_property(_amici.ReturnData_preeq_cpu_time_get, _amici.ReturnData_preeq_cpu_time_set)
    __swig_setmethods__["preeq_cpu_timeB"] = _amici.ReturnData_preeq_cpu_timeB_set
    __swig_getmethods__["preeq_cpu_timeB"] = _amici.ReturnData_preeq_cpu_timeB_get
    if _newclass:
        preeq_cpu_timeB = _swig_property(_amici.ReturnData_preeq_cpu_timeB_get, _amici.ReturnData_preeq_cpu_timeB_set)
    __swig_setmethods__["posteq_status"] = _amici.ReturnData_posteq_status_set
    __swig_getmethods__["posteq_status"] = _amici.ReturnData_posteq_status_get
    if _newclass:
        posteq_status = _swig_property(_amici.ReturnData_posteq_status_get, _amici.ReturnData_posteq_status_set)
    __swig_setmethods__["posteq_cpu_time"] = _amici.ReturnData_posteq_cpu_time_set
    __swig_getmethods__["posteq_cpu_time"] = _amici.ReturnData_posteq_cpu_time_get
    if _newclass:
        posteq_cpu_time = _swig_property(_amici.ReturnData_posteq_cpu_time_get, _amici.ReturnData_posteq_cpu_time_set)
    __swig_setmethods__["posteq_cpu_timeB"] = _amici.ReturnData_posteq_cpu_timeB_set
    __swig_getmethods__["posteq_cpu_timeB"] = _amici.ReturnData_posteq_cpu_timeB_get
    if _newclass:
        posteq_cpu_timeB = _swig_property(_amici.ReturnData_posteq_cpu_timeB_get, _amici.ReturnData_posteq_cpu_timeB_set)
    __swig_setmethods__["preeq_numsteps"] = _amici.ReturnData_preeq_numsteps_set
    __swig_getmethods__["preeq_numsteps"] = _amici.ReturnData_preeq_numsteps_get
    if _newclass:
        preeq_numsteps = _swig_property(_amici.ReturnData_preeq_numsteps_get, _amici.ReturnData_preeq_numsteps_set)
    __swig_setmethods__["preeq_numlinsteps"] = _amici.ReturnData_preeq_numlinsteps_set
    __swig_getmethods__["preeq_numlinsteps"] = _amici.ReturnData_preeq_numlinsteps_get
    if _newclass:
        preeq_numlinsteps = _swig_property(_amici.ReturnData_preeq_numlinsteps_get, _amici.ReturnData_preeq_numlinsteps_set)
    __swig_setmethods__["preeq_numstepsB"] = _amici.ReturnData_preeq_numstepsB_set
    __swig_getmethods__["preeq_numstepsB"] = _amici.ReturnData_preeq_numstepsB_get
    if _newclass:
        preeq_numstepsB = _swig_property(_amici.ReturnData_preeq_numstepsB_get, _amici.ReturnData_preeq_numstepsB_set)
    __swig_setmethods__["posteq_numsteps"] = _amici.ReturnData_posteq_numsteps_set
    __swig_getmethods__["posteq_numsteps"] = _amici.ReturnData_posteq_numsteps_get
    if _newclass:
        posteq_numsteps = _swig_property(_amici.ReturnData_posteq_numsteps_get, _amici.ReturnData_posteq_numsteps_set)
    __swig_setmethods__["posteq_numlinsteps"] = _amici.ReturnData_posteq_numlinsteps_set
    __swig_getmethods__["posteq_numlinsteps"] = _amici.ReturnData_posteq_numlinsteps_get
    if _newclass:
        posteq_numlinsteps = _swig_property(_amici.ReturnData_posteq_numlinsteps_get, _amici.ReturnData_posteq_numlinsteps_set)
    __swig_setmethods__["posteq_numstepsB"] = _amici.ReturnData_posteq_numstepsB_set
    __swig_getmethods__["posteq_numstepsB"] = _amici.ReturnData_posteq_numstepsB_get
    if _newclass:
        posteq_numstepsB = _swig_property(_amici.ReturnData_posteq_numstepsB_get, _amici.ReturnData_posteq_numstepsB_set)
    __swig_setmethods__["preeq_t"] = _amici.ReturnData_preeq_t_set
    __swig_getmethods__["preeq_t"] = _amici.ReturnData_preeq_t_get
    if _newclass:
        preeq_t = _swig_property(_amici.ReturnData_preeq_t_get, _amici.ReturnData_preeq_t_set)
    __swig_setmethods__["preeq_wrms"] = _amici.ReturnData_preeq_wrms_set
    __swig_getmethods__["preeq_wrms"] = _amici.ReturnData_preeq_wrms_get
    if _newclass:
        preeq_wrms = _swig_property(_amici.ReturnData_preeq_wrms_get, _amici.ReturnData_preeq_wrms_set)
    __swig_setmethods__["posteq_t"] = _amici.ReturnData_posteq_t_set
    __swig_getmethods__["posteq_t"] = _amici.ReturnData_posteq_t_get
    if _newclass:
        posteq_t = _swig_property(_amici.ReturnData_posteq_t_get, _amici.ReturnData_posteq_t_set)
    __swig_setmethods__["posteq_wrms"] = _amici.ReturnData_posteq_wrms_set
    __swig_getmethods__["posteq_wrms"] = _amici.ReturnData_posteq_wrms_get
    if _newclass:
        posteq_wrms = _swig_property(_amici.ReturnData_posteq_wrms_get, _amici.ReturnData_posteq_wrms_set)
    __swig_setmethods__["x0"] = _amici.ReturnData_x0_set
    __swig_getmethods__["x0"] = _amici.ReturnData_x0_get
    if _newclass:
        x0 = _swig_property(_amici.ReturnData_x0_get, _amici.ReturnData_x0_set)
    __swig_setmethods__["x_ss"] = _amici.ReturnData_x_ss_set
    __swig_getmethods__["x_ss"] = _amici.ReturnData_x_ss_get
    if _newclass:
        x_ss = _swig_property(_amici.ReturnData_x_ss_get, _amici.ReturnData_x_ss_set)
    __swig_setmethods__["sx0"] = _amici.ReturnData_sx0_set
    __swig_getmethods__["sx0"] = _amici.ReturnData_sx0_get
    if _newclass:
        sx0 = _swig_property(_amici.ReturnData_sx0_get, _amici.ReturnData_sx0_set)
    __swig_setmethods__["sx_ss"] = _amici.ReturnData_sx_ss_set
    __swig_getmethods__["sx_ss"] = _amici.ReturnData_sx_ss_get
    if _newclass:
        sx_ss = _swig_property(_amici.ReturnData_sx_ss_get, _amici.ReturnData_sx_ss_set)
    __swig_setmethods__["llh"] = _amici.ReturnData_llh_set
    __swig_getmethods__["llh"] = _amici.ReturnData_llh_get
    if _newclass:
        llh = _swig_property(_amici.ReturnData_llh_get, _amici.ReturnData_llh_set)
    __swig_setmethods__["chi2"] = _amici.ReturnData_chi2_set
    __swig_getmethods__["chi2"] = _amici.ReturnData_chi2_get
    if _newclass:
        chi2 = _swig_property(_amici.ReturnData_chi2_get, _amici.ReturnData_chi2_set)
    __swig_setmethods__["sllh"] = _amici.ReturnData_sllh_set
    __swig_getmethods__["sllh"] = _amici.ReturnData_sllh_get
    if _newclass:
        sllh = _swig_property(_amici.ReturnData_sllh_get, _amici.ReturnData_sllh_set)
    __swig_setmethods__["s2llh"] = _amici.ReturnData_s2llh_set
    __swig_getmethods__["s2llh"] = _amici.ReturnData_s2llh_get
    if _newclass:
        s2llh = _swig_property(_amici.ReturnData_s2llh_get, _amici.ReturnData_s2llh_set)
    __swig_setmethods__["status"] = _amici.ReturnData_status_set
    __swig_getmethods__["status"] = _amici.ReturnData_status_get
    if _newclass:
        status = _swig_property(_amici.ReturnData_status_get, _amici.ReturnData_status_set)
    __swig_setmethods__["np"] = _amici.ReturnData_np_set
    __swig_getmethods__["np"] = _amici.ReturnData_np_get
    if _newclass:
        np = _swig_property(_amici.ReturnData_np_get, _amici.ReturnData_np_set)
    __swig_setmethods__["nk"] = _amici.ReturnData_nk_set
    __swig_getmethods__["nk"] = _amici.ReturnData_nk_get
    if _newclass:
        nk = _swig_property(_amici.ReturnData_nk_get, _amici.ReturnData_nk_set)
    __swig_setmethods__["nx"] = _amici.ReturnData_nx_set
    __swig_getmethods__["nx"] = _amici.ReturnData_nx_get
    if _newclass:
        nx = _swig_property(_amici.ReturnData_nx_get, _amici.ReturnData_nx_set)
    __swig_setmethods__["nx_solver"] = _amici.ReturnData_nx_solver_set
    __swig_getmethods__["nx_solver"] = _amici.ReturnData_nx_solver_get
    if _newclass:
        nx_solver = _swig_property(_amici.ReturnData_nx_solver_get, _amici.ReturnData_nx_solver_set)
    __swig_setmethods__["nxtrue"] = _amici.ReturnData_nxtrue_set
    __swig_getmethods__["nxtrue"] = _amici.ReturnData_nxtrue_get
    if _newclass:
        nxtrue = _swig_property(_amici.ReturnData_nxtrue_get, _amici.ReturnData_nxtrue_set)
    __swig_setmethods__["nx_solver_reinit"] = _amici.ReturnData_nx_solver_reinit_set
    __swig_getmethods__["nx_solver_reinit"] = _amici.ReturnData_nx_solver_reinit_get
    if _newclass:
        nx_solver_reinit = _swig_property(_amici.ReturnData_nx_solver_reinit_get, _amici.ReturnData_nx_solver_reinit_set)
    __swig_setmethods__["ny"] = _amici.ReturnData_ny_set
    __swig_getmethods__["ny"] = _amici.ReturnData_ny_get
    if _newclass:
        ny = _swig_property(_amici.ReturnData_ny_get, _amici.ReturnData_ny_set)
    __swig_setmethods__["nytrue"] = _amici.ReturnData_nytrue_set
    __swig_getmethods__["nytrue"] = _amici.ReturnData_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.ReturnData_nytrue_get, _amici.ReturnData_nytrue_set)
    __swig_setmethods__["nz"] = _amici.ReturnData_nz_set
    __swig_getmethods__["nz"] = _amici.ReturnData_nz_get
    if _newclass:
        nz = _swig_property(_amici.ReturnData_nz_get, _amici.ReturnData_nz_set)
    __swig_setmethods__["nztrue"] = _amici.ReturnData_nztrue_set
    __swig_getmethods__["nztrue"] = _amici.ReturnData_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.ReturnData_nztrue_get, _amici.ReturnData_nztrue_set)
    __swig_setmethods__["ne"] = _amici.ReturnData_ne_set
    __swig_getmethods__["ne"] = _amici.ReturnData_ne_get
    if _newclass:
        ne = _swig_property(_amici.ReturnData_ne_get, _amici.ReturnData_ne_set)
    __swig_setmethods__["nJ"] = _amici.ReturnData_nJ_set
    __swig_getmethods__["nJ"] = _amici.ReturnData_nJ_get
    if _newclass:
        nJ = _swig_property(_amici.ReturnData_nJ_get, _amici.ReturnData_nJ_set)
    __swig_setmethods__["nplist"] = _amici.ReturnData_nplist_set
    __swig_getmethods__["nplist"] = _amici.ReturnData_nplist_get
    if _newclass:
        nplist = _swig_property(_amici.ReturnData_nplist_get, _amici.ReturnData_nplist_set)
    __swig_setmethods__["nmaxevent"] = _amici.ReturnData_nmaxevent_set
    __swig_getmethods__["nmaxevent"] = _amici.ReturnData_nmaxevent_get
    if _newclass:
        nmaxevent = _swig_property(_amici.ReturnData_nmaxevent_get, _amici.ReturnData_nmaxevent_set)
    __swig_setmethods__["nt"] = _amici.ReturnData_nt_set
    __swig_getmethods__["nt"] = _amici.ReturnData_nt_get
    if _newclass:
        nt = _swig_property(_amici.ReturnData_nt_get, _amici.ReturnData_nt_set)
    __swig_setmethods__["nw"] = _amici.ReturnData_nw_set
    __swig_getmethods__["nw"] = _amici.ReturnData_nw_get
    if _newclass:
        nw = _swig_property(_amici.ReturnData_nw_get, _amici.ReturnData_nw_set)
    __swig_setmethods__["newton_maxsteps"] = _amici.ReturnData_newton_maxsteps_set
    __swig_getmethods__["newton_maxsteps"] = _amici.ReturnData_newton_maxsteps_get
    if _newclass:
        newton_maxsteps = _swig_property(_amici.ReturnData_newton_maxsteps_get, _amici.ReturnData_newton_maxsteps_set)
    __swig_setmethods__["pscale"] = _amici.ReturnData_pscale_set
    __swig_getmethods__["pscale"] = _amici.ReturnData_pscale_get
    if _newclass:
        pscale = _swig_property(_amici.ReturnData_pscale_get, _amici.ReturnData_pscale_set)
    __swig_setmethods__["o2mode"] = _amici.ReturnData_o2mode_set
    __swig_getmethods__["o2mode"] = _amici.ReturnData_o2mode_get
    if _newclass:
        o2mode = _swig_property(_amici.ReturnData_o2mode_get, _amici.ReturnData_o2mode_set)
    __swig_setmethods__["sensi"] = _amici.ReturnData_sensi_set
    __swig_getmethods__["sensi"] = _amici.ReturnData_sensi_get
    if _newclass:
        sensi = _swig_property(_amici.ReturnData_sensi_get, _amici.ReturnData_sensi_set)
    __swig_setmethods__["sensi_meth"] = _amici.ReturnData_sensi_meth_set
    __swig_getmethods__["sensi_meth"] = _amici.ReturnData_sensi_meth_get
    if _newclass:
        sensi_meth = _swig_property(_amici.ReturnData_sensi_meth_get, _amici.ReturnData_sensi_meth_set)
    __swig_setmethods__["rdata_reporting"] = _amici.ReturnData_rdata_reporting_set
    __swig_getmethods__["rdata_reporting"] = _amici.ReturnData_rdata_reporting_get
    if _newclass:
        rdata_reporting = _swig_property(_amici.ReturnData_rdata_reporting_get, _amici.ReturnData_rdata_reporting_set)
ReturnData_swigregister = _amici.ReturnData_swigregister
ReturnData_swigregister(ReturnData)

class ModelContext(ContextManager):
    __swig_setmethods__ = {}
    for _s in [ContextManager]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelContext, name, value)
    __swig_getmethods__ = {}
    for _s in [ContextManager]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelContext, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _amici.new_ModelContext(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _amici.delete_ModelContext
    __del__ = lambda self: None

    def restore(self) -> "void":
        return _amici.ModelContext_restore(self)
ModelContext_swigregister = _amici.ModelContext_swigregister
ModelContext_swigregister(ModelContext)

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_Solver
    __del__ = lambda self: None

    def clone(self) -> "amici::Solver *":
        return _amici.Solver_clone(self)

    def run(self, tout: 'amici::realtype') -> "int":
        return _amici.Solver_run(self, tout)

    def step(self, tout: 'amici::realtype') -> "int":
        return _amici.Solver_step(self, tout)

    def runB(self, tout: 'amici::realtype') -> "void":
        return _amici.Solver_runB(self, tout)

    def updateAndReinitStatesAndSensitivities(self, model: 'Model') -> "void":
        return _amici.Solver_updateAndReinitStatesAndSensitivities(self, model)

    def getRootInfo(self, rootsfound: 'int *') -> "void":
        return _amici.Solver_getRootInfo(self, rootsfound)

    def calcIC(self, tout1: 'amici::realtype') -> "void":
        return _amici.Solver_calcIC(self, tout1)

    def calcICB(self, which: 'int', tout1: 'amici::realtype') -> "void":
        return _amici.Solver_calcICB(self, which, tout1)

    def solveB(self, tBout: 'amici::realtype', itaskB: 'int') -> "void":
        return _amici.Solver_solveB(self, tBout, itaskB)

    def turnOffRootFinding(self) -> "void":
        return _amici.Solver_turnOffRootFinding(self)

    def getSensitivityMethod(self) -> "amici::SensitivityMethod":
        return _amici.Solver_getSensitivityMethod(self)

    def setSensitivityMethod(self, sensi_meth: 'amici::SensitivityMethod') -> "void":
        return _amici.Solver_setSensitivityMethod(self, sensi_meth)

    def getSensitivityMethodPreequilibration(self) -> "amici::SensitivityMethod":
        return _amici.Solver_getSensitivityMethodPreequilibration(self)

    def setSensitivityMethodPreequilibration(self, sensi_meth_preeq: 'amici::SensitivityMethod') -> "void":
        return _amici.Solver_setSensitivityMethodPreequilibration(self, sensi_meth_preeq)

    def switchForwardSensisOff(self) -> "void":
        return _amici.Solver_switchForwardSensisOff(self)

    def getNewtonMaxSteps(self) -> "int":
        return _amici.Solver_getNewtonMaxSteps(self)

    def setNewtonMaxSteps(self, newton_maxsteps: 'int') -> "void":
        return _amici.Solver_setNewtonMaxSteps(self, newton_maxsteps)

    def getPreequilibration(self) -> "bool":
        return _amici.Solver_getPreequilibration(self)

    def setPreequilibration(self, require_preequilibration: 'bool') -> "void":
        return _amici.Solver_setPreequilibration(self, require_preequilibration)

    def getNewtonMaxLinearSteps(self) -> "int":
        return _amici.Solver_getNewtonMaxLinearSteps(self)

    def setNewtonMaxLinearSteps(self, newton_maxlinsteps: 'int') -> "void":
        return _amici.Solver_setNewtonMaxLinearSteps(self, newton_maxlinsteps)

    def getNewtonDampingFactorMode(self) -> "amici::NewtonDampingFactorMode":
        return _amici.Solver_getNewtonDampingFactorMode(self)

    def setNewtonDampingFactorMode(self, dampingFactorMode: 'amici::NewtonDampingFactorMode') -> "void":
        return _amici.Solver_setNewtonDampingFactorMode(self, dampingFactorMode)

    def getNewtonDampingFactorLowerBound(self) -> "double":
        return _amici.Solver_getNewtonDampingFactorLowerBound(self)

    def setNewtonDampingFactorLowerBound(self, dampingFactorLowerBound: 'double') -> "void":
        return _amici.Solver_setNewtonDampingFactorLowerBound(self, dampingFactorLowerBound)

    def getSensitivityOrder(self) -> "amici::SensitivityOrder":
        return _amici.Solver_getSensitivityOrder(self)

    def setSensitivityOrder(self, sensi: 'amici::SensitivityOrder') -> "void":
        return _amici.Solver_setSensitivityOrder(self, sensi)

    def getRelativeTolerance(self) -> "double":
        return _amici.Solver_getRelativeTolerance(self)

    def setRelativeTolerance(self, rtol: 'double') -> "void":
        return _amici.Solver_setRelativeTolerance(self, rtol)

    def getAbsoluteTolerance(self) -> "double":
        return _amici.Solver_getAbsoluteTolerance(self)

    def setAbsoluteTolerance(self, atol: 'double') -> "void":
        return _amici.Solver_setAbsoluteTolerance(self, atol)

    def getRelativeToleranceFSA(self) -> "double":
        return _amici.Solver_getRelativeToleranceFSA(self)

    def setRelativeToleranceFSA(self, rtol: 'double') -> "void":
        return _amici.Solver_setRelativeToleranceFSA(self, rtol)

    def getAbsoluteToleranceFSA(self) -> "double":
        return _amici.Solver_getAbsoluteToleranceFSA(self)

    def setAbsoluteToleranceFSA(self, atol: 'double') -> "void":
        return _amici.Solver_setAbsoluteToleranceFSA(self, atol)

    def getRelativeToleranceB(self) -> "double":
        return _amici.Solver_getRelativeToleranceB(self)

    def setRelativeToleranceB(self, rtol: 'double') -> "void":
        return _amici.Solver_setRelativeToleranceB(self, rtol)

    def getAbsoluteToleranceB(self) -> "double":
        return _amici.Solver_getAbsoluteToleranceB(self)

    def setAbsoluteToleranceB(self, atol: 'double') -> "void":
        return _amici.Solver_setAbsoluteToleranceB(self, atol)

    def getRelativeToleranceQuadratures(self) -> "double":
        return _amici.Solver_getRelativeToleranceQuadratures(self)

    def setRelativeToleranceQuadratures(self, rtol: 'double') -> "void":
        return _amici.Solver_setRelativeToleranceQuadratures(self, rtol)

    def getAbsoluteToleranceQuadratures(self) -> "double":
        return _amici.Solver_getAbsoluteToleranceQuadratures(self)

    def setAbsoluteToleranceQuadratures(self, atol: 'double') -> "void":
        return _amici.Solver_setAbsoluteToleranceQuadratures(self, atol)

    def getRelativeToleranceSteadyState(self) -> "double":
        return _amici.Solver_getRelativeToleranceSteadyState(self)

    def setRelativeToleranceSteadyState(self, rtol: 'double') -> "void":
        return _amici.Solver_setRelativeToleranceSteadyState(self, rtol)

    def getAbsoluteToleranceSteadyState(self) -> "double":
        return _amici.Solver_getAbsoluteToleranceSteadyState(self)

    def setAbsoluteToleranceSteadyState(self, atol: 'double') -> "void":
        return _amici.Solver_setAbsoluteToleranceSteadyState(self, atol)

    def getRelativeToleranceSteadyStateSensi(self) -> "double":
        return _amici.Solver_getRelativeToleranceSteadyStateSensi(self)

    def setRelativeToleranceSteadyStateSensi(self, rtol: 'double') -> "void":
        return _amici.Solver_setRelativeToleranceSteadyStateSensi(self, rtol)

    def getAbsoluteToleranceSteadyStateSensi(self) -> "double":
        return _amici.Solver_getAbsoluteToleranceSteadyStateSensi(self)

    def setAbsoluteToleranceSteadyStateSensi(self, atol: 'double') -> "void":
        return _amici.Solver_setAbsoluteToleranceSteadyStateSensi(self, atol)

    def getMaxSteps(self) -> "long":
        return _amici.Solver_getMaxSteps(self)

    def setMaxSteps(self, maxsteps: 'long') -> "void":
        return _amici.Solver_setMaxSteps(self, maxsteps)

    def getMaxStepsBackwardProblem(self) -> "long":
        return _amici.Solver_getMaxStepsBackwardProblem(self)

    def setMaxStepsBackwardProblem(self, maxsteps: 'long') -> "void":
        return _amici.Solver_setMaxStepsBackwardProblem(self, maxsteps)

    def getLinearMultistepMethod(self) -> "amici::LinearMultistepMethod":
        return _amici.Solver_getLinearMultistepMethod(self)

    def setLinearMultistepMethod(self, lmm: 'amici::LinearMultistepMethod') -> "void":
        return _amici.Solver_setLinearMultistepMethod(self, lmm)

    def getNonlinearSolverIteration(self) -> "amici::NonlinearSolverIteration":
        return _amici.Solver_getNonlinearSolverIteration(self)

    def setNonlinearSolverIteration(self, iter: 'amici::NonlinearSolverIteration') -> "void":
        return _amici.Solver_setNonlinearSolverIteration(self, iter)

    def getInterpolationType(self) -> "amici::InterpolationType":
        return _amici.Solver_getInterpolationType(self)

    def setInterpolationType(self, interpType: 'amici::InterpolationType') -> "void":
        return _amici.Solver_setInterpolationType(self, interpType)

    def getStateOrdering(self) -> "int":
        return _amici.Solver_getStateOrdering(self)

    def setStateOrdering(self, ordering: 'int') -> "void":
        return _amici.Solver_setStateOrdering(self, ordering)

    def getStabilityLimitFlag(self) -> "bool":
        return _amici.Solver_getStabilityLimitFlag(self)

    def setStabilityLimitFlag(self, stldet: 'bool') -> "void":
        return _amici.Solver_setStabilityLimitFlag(self, stldet)

    def getLinearSolver(self) -> "amici::LinearSolver":
        return _amici.Solver_getLinearSolver(self)

    def setLinearSolver(self, linsol: 'amici::LinearSolver') -> "void":
        return _amici.Solver_setLinearSolver(self, linsol)

    def getInternalSensitivityMethod(self) -> "amici::InternalSensitivityMethod":
        return _amici.Solver_getInternalSensitivityMethod(self)

    def setInternalSensitivityMethod(self, ism: 'amici::InternalSensitivityMethod') -> "void":
        return _amici.Solver_setInternalSensitivityMethod(self, ism)

    def getReturnDataReportingMode(self) -> "amici::RDataReporting":
        return _amici.Solver_getReturnDataReportingMode(self)

    def setReturnDataReportingMode(self, rdrm: 'amici::RDataReporting') -> "void":
        return _amici.Solver_setReturnDataReportingMode(self, rdrm)

    def sensToggleOff(self) -> "void":
        return _amici.Solver_sensToggleOff(self)

    def gett(self) -> "amici::realtype":
        return _amici.Solver_gett(self)

    def getCpuTime(self) -> "amici::realtype":
        return _amici.Solver_getCpuTime(self)

    def getCpuTimeB(self) -> "amici::realtype":
        return _amici.Solver_getCpuTimeB(self)

    def nx(self) -> "int":
        return _amici.Solver_nx(self)

    def nplist(self) -> "int":
        return _amici.Solver_nplist(self)

    def nquad(self) -> "int":
        return _amici.Solver_nquad(self)

    def computingFSA(self) -> "bool":
        return _amici.Solver_computingFSA(self)

    def computingASA(self) -> "bool":
        return _amici.Solver_computingASA(self)

    def resetDiagnosis(self) -> "void":
        return _amici.Solver_resetDiagnosis(self)

    def storeDiagnosis(self) -> "void":
        return _amici.Solver_storeDiagnosis(self)

    def storeDiagnosisB(self, which: 'int') -> "void":
        return _amici.Solver_storeDiagnosisB(self, which)

    def getNumSteps(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getNumSteps(self)

    def getNumStepsB(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getNumStepsB(self)

    def getNumRhsEvals(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getNumRhsEvals(self)

    def getNumRhsEvalsB(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getNumRhsEvalsB(self)

    def getNumErrTestFails(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getNumErrTestFails(self)

    def getNumErrTestFailsB(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getNumErrTestFailsB(self)

    def getNumNonlinSolvConvFails(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getNumNonlinSolvConvFails(self)

    def getNumNonlinSolvConvFailsB(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getNumNonlinSolvConvFailsB(self)

    def getLastOrder(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Solver_getLastOrder(self)
    __swig_setmethods__["app"] = _amici.Solver_app_set
    __swig_getmethods__["app"] = _amici.Solver_app_get
    if _newclass:
        app = _swig_property(_amici.Solver_app_get, _amici.Solver_app_set)
Solver_swigregister = _amici.Solver_swigregister
Solver_swigregister(Solver)


def wrapErrHandlerFn(error_code: 'int', module: 'char const *', function: 'char const *', msg: 'char *', eh_data: 'void *') -> "void":
    return _amici.wrapErrHandlerFn(error_code, module, function, msg, eh_data)
wrapErrHandlerFn = _amici.wrapErrHandlerFn
class IDASolver(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDASolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDASolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_IDASolver
    __del__ = lambda self: None

    def clone(self) -> "amici::Solver *":
        return _amici.IDASolver_clone(self)

    def reInitPostProcessF(self, tnext: 'amici::realtype') -> "void":
        return _amici.IDASolver_reInitPostProcessF(self, tnext)

    def reInitPostProcessB(self, tnext: 'amici::realtype') -> "void":
        return _amici.IDASolver_reInitPostProcessB(self, tnext)

    def sensToggleOff(self) -> "void":
        return _amici.IDASolver_sensToggleOff(self)

    def quadSStolerancesB(self, which: 'int', reltolQB: 'amici::realtype', abstolQB: 'amici::realtype') -> "void":
        return _amici.IDASolver_quadSStolerancesB(self, which, reltolQB, abstolQB)

    def quadSStolerances(self, reltolQ: 'amici::realtype', abstolQ: 'amici::realtype') -> "void":
        return _amici.IDASolver_quadSStolerances(self, reltolQ, abstolQ)

    def solve(self, tout: 'amici::realtype', itask: 'int') -> "int":
        return _amici.IDASolver_solve(self, tout, itask)

    def solveF(self, tout: 'amici::realtype', itask: 'int', ncheckPtr: 'int *') -> "int":
        return _amici.IDASolver_solveF(self, tout, itask, ncheckPtr)

    def solveB(self, tBout: 'amici::realtype', itaskB: 'int') -> "void":
        return _amici.IDASolver_solveB(self, tBout, itaskB)

    def getRootInfo(self, rootsfound: 'int *') -> "void":
        return _amici.IDASolver_getRootInfo(self, rootsfound)

    def getDky(self, t: 'amici::realtype', k: 'int') -> "void":
        return _amici.IDASolver_getDky(self, t, k)

    def getSens(self) -> "void":
        return _amici.IDASolver_getSens(self)

    def getSensDky(self, t: 'amici::realtype', k: 'int') -> "void":
        return _amici.IDASolver_getSensDky(self, t, k)

    def getB(self, which: 'int') -> "void":
        return _amici.IDASolver_getB(self, which)

    def getDkyB(self, t: 'amici::realtype', k: 'int', which: 'int') -> "void":
        return _amici.IDASolver_getDkyB(self, t, k, which)

    def getQuadB(self, which: 'int') -> "void":
        return _amici.IDASolver_getQuadB(self, which)

    def getQuadDkyB(self, t: 'amici::realtype', k: 'int', which: 'int') -> "void":
        return _amici.IDASolver_getQuadDkyB(self, t, k, which)

    def getQuad(self, t: 'amici::realtype &') -> "void":
        return _amici.IDASolver_getQuad(self, t)

    def getQuadDky(self, t: 'amici::realtype', k: 'int') -> "void":
        return _amici.IDASolver_getQuadDky(self, t, k)

    def calcIC(self, tout1: 'amici::realtype') -> "void":
        return _amici.IDASolver_calcIC(self, tout1)

    def calcICB(self, which: 'int', tout1: 'amici::realtype') -> "void":
        return _amici.IDASolver_calcICB(self, which, tout1)

    def setStopTime(self, tstop: 'amici::realtype') -> "void":
        return _amici.IDASolver_setStopTime(self, tstop)

    def turnOffRootFinding(self) -> "void":
        return _amici.IDASolver_turnOffRootFinding(self)

    def getModel(self) -> "amici::Model const *":
        return _amici.IDASolver_getModel(self)

    def setLinearSolver(self) -> "void":
        return _amici.IDASolver_setLinearSolver(self)

    def setLinearSolverB(self, which: 'int') -> "void":
        return _amici.IDASolver_setLinearSolverB(self, which)

    def setNonLinearSolver(self) -> "void":
        return _amici.IDASolver_setNonLinearSolver(self)

    def setNonLinearSolverSens(self) -> "void":
        return _amici.IDASolver_setNonLinearSolverSens(self)

    def setNonLinearSolverB(self, which: 'int') -> "void":
        return _amici.IDASolver_setNonLinearSolverB(self, which)
IDASolver_swigregister = _amici.IDASolver_swigregister
IDASolver_swigregister(IDASolver)

class CVodeSolver(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVodeSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVodeSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_CVodeSolver
    __del__ = lambda self: None

    def clone(self) -> "amici::Solver *":
        return _amici.CVodeSolver_clone(self)

    def sensToggleOff(self) -> "void":
        return _amici.CVodeSolver_sensToggleOff(self)

    def solve(self, tout: 'amici::realtype', itask: 'int') -> "int":
        return _amici.CVodeSolver_solve(self, tout, itask)

    def solveF(self, tout: 'amici::realtype', itask: 'int', ncheckPtr: 'int *') -> "int":
        return _amici.CVodeSolver_solveF(self, tout, itask, ncheckPtr)

    def solveB(self, tBout: 'amici::realtype', itaskB: 'int') -> "void":
        return _amici.CVodeSolver_solveB(self, tBout, itaskB)

    def getDky(self, t: 'amici::realtype', k: 'int') -> "void":
        return _amici.CVodeSolver_getDky(self, t, k)

    def getSensDky(self, t: 'amici::realtype', k: 'int') -> "void":
        return _amici.CVodeSolver_getSensDky(self, t, k)

    def getQuadDkyB(self, t: 'amici::realtype', k: 'int', which: 'int') -> "void":
        return _amici.CVodeSolver_getQuadDkyB(self, t, k, which)

    def getDkyB(self, t: 'amici::realtype', k: 'int', which: 'int') -> "void":
        return _amici.CVodeSolver_getDkyB(self, t, k, which)

    def getRootInfo(self, rootsfound: 'int *') -> "void":
        return _amici.CVodeSolver_getRootInfo(self, rootsfound)

    def setStopTime(self, tstop: 'amici::realtype') -> "void":
        return _amici.CVodeSolver_setStopTime(self, tstop)

    def turnOffRootFinding(self) -> "void":
        return _amici.CVodeSolver_turnOffRootFinding(self)

    def getModel(self) -> "amici::Model const *":
        return _amici.CVodeSolver_getModel(self)

    def setLinearSolver(self, *args) -> "void":
        return _amici.CVodeSolver_setLinearSolver(self, *args)

    def setLinearSolverB(self, which: 'int') -> "void":
        return _amici.CVodeSolver_setLinearSolverB(self, which)

    def setNonLinearSolver(self) -> "void":
        return _amici.CVodeSolver_setNonLinearSolver(self)

    def setNonLinearSolverSens(self) -> "void":
        return _amici.CVodeSolver_setNonLinearSolverSens(self)

    def setNonLinearSolverB(self, which: 'int') -> "void":
        return _amici.CVodeSolver_setNonLinearSolverB(self, which)
CVodeSolver_swigregister = _amici.CVodeSolver_swigregister
CVodeSolver_swigregister(CVodeSolver)

class Model(AbstractModel):
    __swig_setmethods__ = {}
    for _s in [AbstractModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_Model
    __del__ = lambda self: None

    def clone(self) -> "amici::Model *":
        return _amici.Model_clone(self)

    def fdeltaqB(self, deltaqB: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', xB: 'amici::realtype const *') -> "void":
        return _amici.Model_fdeltaqB(self, deltaqB, t, x, p, k, h, ip, ie, xdot, xdot_old, xB)

    def fdeltasx(self, deltasx: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *', ip: 'int', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', sx: 'amici::realtype const *', stau: 'amici::realtype const *') -> "void":
        return _amici.Model_fdeltasx(self, deltasx, t, x, p, k, h, w, ip, ie, xdot, xdot_old, sx, stau)

    def fdeltax(self, deltax: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *') -> "void":
        return _amici.Model_fdeltax(self, deltax, t, x, p, k, h, ie, xdot, xdot_old)

    def fdeltaxB(self, deltaxB: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ie: 'int', xdot: 'amici::realtype const *', xdot_old: 'amici::realtype const *', xB: 'amici::realtype const *') -> "void":
        return _amici.Model_fdeltaxB(self, deltaxB, t, x, p, k, h, ie, xdot, xdot_old, xB)

    def fdJrzdsigma(self, dJrzdsigma: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', rz: 'amici::realtype const *', sigmaz: 'amici::realtype const *') -> "void":
        return _amici.Model_fdJrzdsigma(self, dJrzdsigma, iz, p, k, rz, sigmaz)

    def fdJrzdz(self, dJrzdz: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', rz: 'amici::realtype const *', sigmaz: 'amici::realtype const *') -> "void":
        return _amici.Model_fdJrzdz(self, dJrzdz, iz, p, k, rz, sigmaz)

    def fdJydsigma(self, dJydsigma: 'amici::realtype *', iy: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', y: 'amici::realtype const *', sigmay: 'amici::realtype const *', my: 'amici::realtype const *') -> "void":
        return _amici.Model_fdJydsigma(self, dJydsigma, iy, p, k, y, sigmay, my)

    def fdJydy(self, dJydy: 'amici::realtype *', iy: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', y: 'amici::realtype const *', sigmay: 'amici::realtype const *', my: 'amici::realtype const *') -> "void":
        return _amici.Model_fdJydy(self, dJydy, iy, p, k, y, sigmay, my)

    def fdJzdsigma(self, dJzdsigma: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', z: 'amici::realtype const *', sigmaz: 'amici::realtype const *', mz: 'amici::realtype const *') -> "void":
        return _amici.Model_fdJzdsigma(self, dJzdsigma, iz, p, k, z, sigmaz, mz)

    def fdJzdz(self, dJzdz: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', z: 'amici::realtype const *', sigmaz: 'amici::realtype const *', mz: 'amici::realtype const *') -> "void":
        return _amici.Model_fdJzdz(self, dJzdz, iz, p, k, z, sigmaz, mz)

    def fdrzdp(self, drzdp: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.Model_fdrzdp(self, drzdp, ie, t, x, p, k, h, ip)

    def fdrzdx(self, drzdx: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *') -> "void":
        return _amici.Model_fdrzdx(self, drzdx, ie, t, x, p, k, h)

    def fdsigmaydp(self, dsigmaydp: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.Model_fdsigmaydp(self, dsigmaydp, t, p, k, ip)

    def fdsigmazdp(self, dsigmazdp: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.Model_fdsigmazdp(self, dsigmazdp, t, p, k, ip)

    def fdwdp(self, *args) -> "void":
        return _amici.Model_fdwdp(self, *args)

    def fdwdp_colptrs(self, indexptrs: 'sunindextype *') -> "void":
        return _amici.Model_fdwdp_colptrs(self, indexptrs)

    def fdwdp_rowvals(self, indexvals: 'sunindextype *') -> "void":
        return _amici.Model_fdwdp_rowvals(self, indexvals)

    def fdwdx(self, dwdx: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *', tcl: 'amici::realtype const *') -> "void":
        return _amici.Model_fdwdx(self, dwdx, t, x, p, k, h, w, tcl)

    def fdwdx_colptrs(self, indexptrs: 'sunindextype *') -> "void":
        return _amici.Model_fdwdx_colptrs(self, indexptrs)

    def fdwdx_rowvals(self, indexvals: 'sunindextype *') -> "void":
        return _amici.Model_fdwdx_rowvals(self, indexvals)

    def fdydp(self, dydp: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int', w: 'amici::realtype const *', dwdp: 'amici::realtype const *') -> "void":
        return _amici.Model_fdydp(self, dydp, t, x, p, k, h, ip, w, dwdp)

    def fdydx(self, dydx: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *', dwdx: 'amici::realtype const *') -> "void":
        return _amici.Model_fdydx(self, dydx, t, x, p, k, h, w, dwdx)

    def fdzdp(self, dzdp: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.Model_fdzdp(self, dzdp, ie, t, x, p, k, h, ip)

    def fdzdx(self, dzdx: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *') -> "void":
        return _amici.Model_fdzdx(self, dzdx, ie, t, x, p, k, h)

    def fJrz(self, nllh: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', z: 'amici::realtype const *', sigmaz: 'amici::realtype const *') -> "void":
        return _amici.Model_fJrz(self, nllh, iz, p, k, z, sigmaz)

    def fJy(self, nllh: 'amici::realtype *', iy: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', y: 'amici::realtype const *', sigmay: 'amici::realtype const *', my: 'amici::realtype const *') -> "void":
        return _amici.Model_fJy(self, nllh, iy, p, k, y, sigmay, my)

    def fJz(self, nllh: 'amici::realtype *', iz: 'int', p: 'amici::realtype const *', k: 'amici::realtype const *', z: 'amici::realtype const *', sigmaz: 'amici::realtype const *', mz: 'amici::realtype const *') -> "void":
        return _amici.Model_fJz(self, nllh, iz, p, k, z, sigmaz, mz)

    def frz(self, rz: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *') -> "void":
        return _amici.Model_frz(self, rz, ie, t, x, p, k, h)

    def fsigmay(self, sigmay: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *') -> "void":
        return _amici.Model_fsigmay(self, sigmay, t, p, k)

    def fsigmaz(self, sigmaz: 'amici::realtype *', t: 'amici::realtype const', p: 'amici::realtype const *', k: 'amici::realtype const *') -> "void":
        return _amici.Model_fsigmaz(self, sigmaz, t, p, k)

    def fsrz(self, srz: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.Model_fsrz(self, srz, ie, t, x, p, k, h, sx, ip)

    def fstau(self, stau: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int', ie: 'int') -> "void":
        return _amici.Model_fstau(self, stau, t, x, p, k, h, sx, ip, ie)

    def fsz(self, sz: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', sx: 'amici::realtype const *', ip: 'int') -> "void":
        return _amici.Model_fsz(self, sz, ie, t, x, p, k, h, sx, ip)

    def fw(self, w: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', tcl: 'amici::realtype const *') -> "void":
        return _amici.Model_fw(self, w, t, x, p, k, h, tcl)

    def fy(self, y: 'amici::realtype *', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *', w: 'amici::realtype const *') -> "void":
        return _amici.Model_fy(self, y, t, x, p, k, h, w)

    def fz(self, z: 'amici::realtype *', ie: 'int', t: 'amici::realtype const', x: 'amici::realtype const *', p: 'amici::realtype const *', k: 'amici::realtype const *', h: 'amici::realtype const *') -> "void":
        return _amici.Model_fz(self, z, ie, t, x, p, k, h)

    def nplist(self) -> "int":
        return _amici.Model_nplist(self)

    def np(self) -> "int":
        return _amici.Model_np(self)

    def nk(self) -> "int":
        return _amici.Model_nk(self)

    def ncl(self) -> "int":
        return _amici.Model_ncl(self)

    def nx_reinit(self) -> "int":
        return _amici.Model_nx_reinit(self)

    def k(self) -> "double const *":
        return _amici.Model_k(self)

    def nMaxEvent(self) -> "int":
        return _amici.Model_nMaxEvent(self)

    def setNMaxEvent(self, nmaxevent: 'int') -> "void":
        return _amici.Model_setNMaxEvent(self, nmaxevent)

    def nt(self) -> "int":
        return _amici.Model_nt(self)

    def getParameterScale(self) -> "std::vector< amici::ParameterScaling,std::allocator< amici::ParameterScaling > > const &":
        return _amici.Model_getParameterScale(self)

    def setParameterScale(self, *args) -> "void":
        return _amici.Model_setParameterScale(self, *args)

    def getUnscaledParameters(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.Model_getUnscaledParameters(self)

    def getParameters(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.Model_getParameters(self)

    def getParameterById(self, par_id: 'std::string const &') -> "amici::realtype":
        return _amici.Model_getParameterById(self, par_id)

    def getParameterByName(self, par_name: 'std::string const &') -> "amici::realtype":
        return _amici.Model_getParameterByName(self, par_name)

    def setParameters(self, p: 'DoubleVector') -> "void":
        return _amici.Model_setParameters(self, p)

    def setParameterById(self, *args) -> "void":
        return _amici.Model_setParameterById(self, *args)

    def setParametersByIdRegex(self, par_id_regex: 'std::string const &', value: 'amici::realtype') -> "int":
        return _amici.Model_setParametersByIdRegex(self, par_id_regex, value)

    def setParameterByName(self, *args) -> "void":
        return _amici.Model_setParameterByName(self, *args)

    def setParametersByNameRegex(self, par_name_regex: 'std::string const &', value: 'amici::realtype') -> "int":
        return _amici.Model_setParametersByNameRegex(self, par_name_regex, value)

    def getFixedParameters(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.Model_getFixedParameters(self)

    def getFixedParameterById(self, par_id: 'std::string const &') -> "amici::realtype":
        return _amici.Model_getFixedParameterById(self, par_id)

    def getFixedParameterByName(self, par_name: 'std::string const &') -> "amici::realtype":
        return _amici.Model_getFixedParameterByName(self, par_name)

    def setFixedParameters(self, k: 'DoubleVector') -> "void":
        return _amici.Model_setFixedParameters(self, k)

    def setFixedParameterById(self, par_id: 'std::string const &', value: 'amici::realtype') -> "void":
        return _amici.Model_setFixedParameterById(self, par_id, value)

    def setFixedParametersByIdRegex(self, par_id_regex: 'std::string const &', value: 'amici::realtype') -> "int":
        return _amici.Model_setFixedParametersByIdRegex(self, par_id_regex, value)

    def setFixedParameterByName(self, par_name: 'std::string const &', value: 'amici::realtype') -> "void":
        return _amici.Model_setFixedParameterByName(self, par_name, value)

    def setFixedParametersByNameRegex(self, par_name_regex: 'std::string const &', value: 'amici::realtype') -> "int":
        return _amici.Model_setFixedParametersByNameRegex(self, par_name_regex, value)

    def getName(self) -> "std::string":
        return _amici.Model_getName(self)

    def hasParameterNames(self) -> "bool":
        return _amici.Model_hasParameterNames(self)

    def getParameterNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.Model_getParameterNames(self)

    def hasStateNames(self) -> "bool":
        return _amici.Model_hasStateNames(self)

    def getStateNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.Model_getStateNames(self)

    def hasFixedParameterNames(self) -> "bool":
        return _amici.Model_hasFixedParameterNames(self)

    def getFixedParameterNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.Model_getFixedParameterNames(self)

    def hasObservableNames(self) -> "bool":
        return _amici.Model_hasObservableNames(self)

    def getObservableNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.Model_getObservableNames(self)

    def hasParameterIds(self) -> "bool":
        return _amici.Model_hasParameterIds(self)

    def getParameterIds(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.Model_getParameterIds(self)

    def hasStateIds(self) -> "bool":
        return _amici.Model_hasStateIds(self)

    def getStateIds(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.Model_getStateIds(self)

    def hasFixedParameterIds(self) -> "bool":
        return _amici.Model_hasFixedParameterIds(self)

    def getFixedParameterIds(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.Model_getFixedParameterIds(self)

    def hasObservableIds(self) -> "bool":
        return _amici.Model_hasObservableIds(self)

    def getObservableIds(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _amici.Model_getObservableIds(self)

    def getTimepoints(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > > const &":
        return _amici.Model_getTimepoints(self)

    def getTimepoint(self, it: 'int') -> "amici::realtype":
        return _amici.Model_getTimepoint(self, it)

    def setTimepoints(self, ts: 'DoubleVector') -> "void":
        return _amici.Model_setTimepoints(self, ts)

    def t0(self) -> "double":
        return _amici.Model_t0(self)

    def setT0(self, t0: 'double') -> "void":
        return _amici.Model_setT0(self, t0)

    def getStateIsNonNegative(self) -> "std::vector< bool,std::allocator< bool > > const &":
        return _amici.Model_getStateIsNonNegative(self)

    def setStateIsNonNegative(self, stateIsNonNegative: 'BoolVector') -> "void":
        return _amici.Model_setStateIsNonNegative(self, stateIsNonNegative)

    def setAllStatesNonNegative(self) -> "void":
        return _amici.Model_setAllStatesNonNegative(self)

    def getParameterList(self) -> "std::vector< int,std::allocator< int > > const &":
        return _amici.Model_getParameterList(self)

    def plist(self, pos: 'int') -> "int":
        return _amici.Model_plist(self, pos)

    def setParameterList(self, plist: 'IntVector') -> "void":
        return _amici.Model_setParameterList(self, plist)

    def getInitialStates(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > >":
        return _amici.Model_getInitialStates(self)

    def setInitialStates(self, x0: 'DoubleVector') -> "void":
        return _amici.Model_setInitialStates(self, x0)

    def hasCustomInitialStates(self) -> "bool":
        return _amici.Model_hasCustomInitialStates(self)

    def getInitialStateSensitivities(self) -> "std::vector< amici::realtype,std::allocator< amici::realtype > >":
        return _amici.Model_getInitialStateSensitivities(self)

    def setInitialStateSensitivities(self, sx0: 'DoubleVector') -> "void":
        return _amici.Model_setInitialStateSensitivities(self, sx0)

    def hasCustomInitialStateSensitivities(self) -> "bool":
        return _amici.Model_hasCustomInitialStateSensitivities(self)

    def setUnscaledInitialStateSensitivities(self, sx0: 'DoubleVector') -> "void":
        return _amici.Model_setUnscaledInitialStateSensitivities(self, sx0)

    def setSteadyStateSensitivityMode(self, mode: 'amici::SteadyStateSensitivityMode') -> "void":
        return _amici.Model_setSteadyStateSensitivityMode(self, mode)

    def getSteadyStateSensitivityMode(self) -> "amici::SteadyStateSensitivityMode":
        return _amici.Model_getSteadyStateSensitivityMode(self)

    def setReinitializeFixedParameterInitialStates(self, flag: 'bool') -> "void":
        return _amici.Model_setReinitializeFixedParameterInitialStates(self, flag)

    def getReinitializeFixedParameterInitialStates(self) -> "bool":
        return _amici.Model_getReinitializeFixedParameterInitialStates(self)

    def requireSensitivitiesForAllParameters(self) -> "void":
        return _amici.Model_requireSensitivitiesForAllParameters(self)

    def getObservableSigma(self, sigmay: 'gsl::span< amici::realtype >', it: 'int const', edata: 'ExpData') -> "void":
        return _amici.Model_getObservableSigma(self, sigmay, it, edata)

    def getObservableSigmaSensitivity(self, ssigmay: 'gsl::span< amici::realtype >', it: 'int const', edata: 'ExpData') -> "void":
        return _amici.Model_getObservableSigmaSensitivity(self, ssigmay, it, edata)

    def getUnobservedEventSensitivity(self, sz: 'gsl::span< amici::realtype >', ie: 'int const') -> "void":
        return _amici.Model_getUnobservedEventSensitivity(self, sz, ie)

    def getEventSigma(self, sigmaz: 'gsl::span< amici::realtype >', ie: 'int const', nroots: 'int const', t: 'amici::realtype const', edata: 'ExpData') -> "void":
        return _amici.Model_getEventSigma(self, sigmaz, ie, nroots, t, edata)

    def getEventSigmaSensitivity(self, ssigmaz: 'gsl::span< amici::realtype >', ie: 'int const', nroots: 'int const', t: 'amici::realtype const', edata: 'ExpData') -> "void":
        return _amici.Model_getEventSigmaSensitivity(self, ssigmaz, ie, nroots, t, edata)

    def updateHeaviside(self, rootsfound: 'IntVector') -> "void":
        return _amici.Model_updateHeaviside(self, rootsfound)

    def updateHeavisideB(self, rootsfound: 'int const *') -> "void":
        return _amici.Model_updateHeavisideB(self, rootsfound)

    def checkFinite(self, array: 'gsl::span< amici::realtype const >', fun: 'char const *') -> "int":
        return _amici.Model_checkFinite(self, array, fun)

    def setAlwaysCheckFinite(self, alwaysCheck: 'bool') -> "void":
        return _amici.Model_setAlwaysCheckFinite(self, alwaysCheck)

    def getAlwaysCheckFinite(self) -> "bool":
        return _amici.Model_getAlwaysCheckFinite(self)

    def fx0(self, *args) -> "void":
        return _amici.Model_fx0(self, *args)

    def fx0_fixedParameters(self, *args) -> "void":
        return _amici.Model_fx0_fixedParameters(self, *args)

    def fsx0(self, *args) -> "void":
        return _amici.Model_fsx0(self, *args)

    def fsx0_fixedParameters(self, *args) -> "void":
        return _amici.Model_fsx0_fixedParameters(self, *args)

    def fsdx0(self) -> "void":
        return _amici.Model_fsdx0(self)
    __swig_setmethods__["nx_rdata"] = _amici.Model_nx_rdata_set
    __swig_getmethods__["nx_rdata"] = _amici.Model_nx_rdata_get
    if _newclass:
        nx_rdata = _swig_property(_amici.Model_nx_rdata_get, _amici.Model_nx_rdata_set)
    __swig_setmethods__["nxtrue_rdata"] = _amici.Model_nxtrue_rdata_set
    __swig_getmethods__["nxtrue_rdata"] = _amici.Model_nxtrue_rdata_get
    if _newclass:
        nxtrue_rdata = _swig_property(_amici.Model_nxtrue_rdata_get, _amici.Model_nxtrue_rdata_set)
    __swig_setmethods__["nx_solver"] = _amici.Model_nx_solver_set
    __swig_getmethods__["nx_solver"] = _amici.Model_nx_solver_get
    if _newclass:
        nx_solver = _swig_property(_amici.Model_nx_solver_get, _amici.Model_nx_solver_set)
    __swig_setmethods__["nxtrue_solver"] = _amici.Model_nxtrue_solver_set
    __swig_getmethods__["nxtrue_solver"] = _amici.Model_nxtrue_solver_get
    if _newclass:
        nxtrue_solver = _swig_property(_amici.Model_nxtrue_solver_get, _amici.Model_nxtrue_solver_set)
    __swig_setmethods__["nx_solver_reinit"] = _amici.Model_nx_solver_reinit_set
    __swig_getmethods__["nx_solver_reinit"] = _amici.Model_nx_solver_reinit_get
    if _newclass:
        nx_solver_reinit = _swig_property(_amici.Model_nx_solver_reinit_get, _amici.Model_nx_solver_reinit_set)
    __swig_setmethods__["ny"] = _amici.Model_ny_set
    __swig_getmethods__["ny"] = _amici.Model_ny_get
    if _newclass:
        ny = _swig_property(_amici.Model_ny_get, _amici.Model_ny_set)
    __swig_setmethods__["nytrue"] = _amici.Model_nytrue_set
    __swig_getmethods__["nytrue"] = _amici.Model_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.Model_nytrue_get, _amici.Model_nytrue_set)
    __swig_setmethods__["nz"] = _amici.Model_nz_set
    __swig_getmethods__["nz"] = _amici.Model_nz_get
    if _newclass:
        nz = _swig_property(_amici.Model_nz_get, _amici.Model_nz_set)
    __swig_setmethods__["nztrue"] = _amici.Model_nztrue_set
    __swig_getmethods__["nztrue"] = _amici.Model_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.Model_nztrue_get, _amici.Model_nztrue_set)
    __swig_setmethods__["ne"] = _amici.Model_ne_set
    __swig_getmethods__["ne"] = _amici.Model_ne_get
    if _newclass:
        ne = _swig_property(_amici.Model_ne_get, _amici.Model_ne_set)
    __swig_setmethods__["nw"] = _amici.Model_nw_set
    __swig_getmethods__["nw"] = _amici.Model_nw_get
    if _newclass:
        nw = _swig_property(_amici.Model_nw_get, _amici.Model_nw_set)
    __swig_setmethods__["ndwdx"] = _amici.Model_ndwdx_set
    __swig_getmethods__["ndwdx"] = _amici.Model_ndwdx_get
    if _newclass:
        ndwdx = _swig_property(_amici.Model_ndwdx_get, _amici.Model_ndwdx_set)
    __swig_setmethods__["ndwdp"] = _amici.Model_ndwdp_set
    __swig_getmethods__["ndwdp"] = _amici.Model_ndwdp_get
    if _newclass:
        ndwdp = _swig_property(_amici.Model_ndwdp_get, _amici.Model_ndwdp_set)
    __swig_setmethods__["ndxdotdw"] = _amici.Model_ndxdotdw_set
    __swig_getmethods__["ndxdotdw"] = _amici.Model_ndxdotdw_get
    if _newclass:
        ndxdotdw = _swig_property(_amici.Model_ndxdotdw_get, _amici.Model_ndxdotdw_set)
    __swig_setmethods__["ndJydy"] = _amici.Model_ndJydy_set
    __swig_getmethods__["ndJydy"] = _amici.Model_ndJydy_get
    if _newclass:
        ndJydy = _swig_property(_amici.Model_ndJydy_get, _amici.Model_ndJydy_set)
    __swig_setmethods__["nnz"] = _amici.Model_nnz_set
    __swig_getmethods__["nnz"] = _amici.Model_nnz_get
    if _newclass:
        nnz = _swig_property(_amici.Model_nnz_get, _amici.Model_nnz_set)
    __swig_setmethods__["nJ"] = _amici.Model_nJ_set
    __swig_getmethods__["nJ"] = _amici.Model_nJ_get
    if _newclass:
        nJ = _swig_property(_amici.Model_nJ_get, _amici.Model_nJ_set)
    __swig_setmethods__["ubw"] = _amici.Model_ubw_set
    __swig_getmethods__["ubw"] = _amici.Model_ubw_get
    if _newclass:
        ubw = _swig_property(_amici.Model_ubw_get, _amici.Model_ubw_set)
    __swig_setmethods__["lbw"] = _amici.Model_lbw_set
    __swig_getmethods__["lbw"] = _amici.Model_lbw_get
    if _newclass:
        lbw = _swig_property(_amici.Model_lbw_get, _amici.Model_lbw_set)
    __swig_setmethods__["pythonGenerated"] = _amici.Model_pythonGenerated_set
    __swig_getmethods__["pythonGenerated"] = _amici.Model_pythonGenerated_get
    if _newclass:
        pythonGenerated = _swig_property(_amici.Model_pythonGenerated_get, _amici.Model_pythonGenerated_set)
    __swig_setmethods__["ndxdotdp_explicit"] = _amici.Model_ndxdotdp_explicit_set
    __swig_getmethods__["ndxdotdp_explicit"] = _amici.Model_ndxdotdp_explicit_get
    if _newclass:
        ndxdotdp_explicit = _swig_property(_amici.Model_ndxdotdp_explicit_get, _amici.Model_ndxdotdp_explicit_set)
    __swig_setmethods__["ndxdotdp_implicit"] = _amici.Model_ndxdotdp_implicit_set
    __swig_getmethods__["ndxdotdp_implicit"] = _amici.Model_ndxdotdp_implicit_get
    if _newclass:
        ndxdotdp_implicit = _swig_property(_amici.Model_ndxdotdp_implicit_get, _amici.Model_ndxdotdp_implicit_set)
    __swig_setmethods__["o2mode"] = _amici.Model_o2mode_set
    __swig_getmethods__["o2mode"] = _amici.Model_o2mode_get
    if _newclass:
        o2mode = _swig_property(_amici.Model_o2mode_get, _amici.Model_o2mode_set)
    __swig_setmethods__["idlist"] = _amici.Model_idlist_set
    __swig_getmethods__["idlist"] = _amici.Model_idlist_get
    if _newclass:
        idlist = _swig_property(_amici.Model_idlist_get, _amici.Model_idlist_set)
    __swig_setmethods__["app"] = _amici.Model_app_set
    __swig_getmethods__["app"] = _amici.Model_app_get
    if _newclass:
        app = _swig_property(_amici.Model_app_get, _amici.Model_app_set)
Model_swigregister = _amici.Model_swigregister
Model_swigregister(Model)

def equals(*args) -> "bool":
    return _amici.equals(*args)
equals = _amici.equals


def __eq__(*args) -> "bool":
    return _amici.__eq__(*args)
__eq__ = _amici.__eq__
class Model_ODE(Model):
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model_ODE, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model_ODE, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def fJvB(self, vB: 'N_Vector', JvB: 'N_Vector', t: 'amici::realtype', x: 'N_Vector', xB: 'N_Vector') -> "void":
        return _amici.Model_ODE_fJvB(self, vB, JvB, t, x, xB)

    def fxBdot(self, t: 'amici::realtype', x: 'N_Vector', xB: 'N_Vector', xBdot: 'N_Vector') -> "void":
        return _amici.Model_ODE_fxBdot(self, t, x, xB, xBdot)

    def fqBdot(self, t: 'amici::realtype', x: 'N_Vector', xB: 'N_Vector', qBdot: 'N_Vector') -> "void":
        return _amici.Model_ODE_fqBdot(self, t, x, xB, qBdot)

    def fqBdot_ss(self, t: 'amici::realtype', xB: 'N_Vector', qBdot: 'N_Vector') -> "void":
        return _amici.Model_ODE_fqBdot_ss(self, t, xB, qBdot)

    def fdxdotdw(self, t: 'amici::realtype', x: 'N_Vector const') -> "void":
        return _amici.Model_ODE_fdxdotdw(self, t, x)

    def getSolver(self) -> "std::unique_ptr< amici::Solver >":
        return _amici.Model_ODE_getSolver(self)
    __swig_destroy__ = _amici.delete_Model_ODE
    __del__ = lambda self: None
Model_ODE_swigregister = _amici.Model_ODE_swigregister
Model_ODE_swigregister(Model_ODE)

class Model_DAE(Model):
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model_DAE, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model_DAE, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def fJvB(self, t: 'amici::realtype', x: 'N_Vector', dx: 'N_Vector', xB: 'N_Vector', dxB: 'N_Vector', vB: 'N_Vector', JvB: 'N_Vector', cj: 'amici::realtype') -> "void":
        return _amici.Model_DAE_fJvB(self, t, x, dx, xB, dxB, vB, JvB, cj)

    def fxBdot(self, t: 'amici::realtype', x: 'N_Vector', dx: 'N_Vector', xB: 'N_Vector', dxB: 'N_Vector', xBdot: 'N_Vector') -> "void":
        return _amici.Model_DAE_fxBdot(self, t, x, dx, xB, dxB, xBdot)

    def fqBdot(self, t: 'amici::realtype', x: 'N_Vector', dx: 'N_Vector', xB: 'N_Vector', dxB: 'N_Vector', qBdot: 'N_Vector') -> "void":
        return _amici.Model_DAE_fqBdot(self, t, x, dx, xB, dxB, qBdot)

    def fqBdot_ss(self, t: 'amici::realtype', xB: 'N_Vector', dxB: 'N_Vector', qBdot: 'N_Vector') -> "void":
        return _amici.Model_DAE_fqBdot_ss(self, t, xB, dxB, qBdot)

    def fM(self, t: 'amici::realtype', x: 'N_Vector const') -> "void":
        return _amici.Model_DAE_fM(self, t, x)

    def getSolver(self) -> "std::unique_ptr< amici::Solver >":
        return _amici.Model_DAE_getSolver(self)
    __swig_destroy__ = _amici.delete_Model_DAE
    __del__ = lambda self: None
Model_DAE_swigregister = _amici.Model_DAE_swigregister
Model_DAE_swigregister(Model_DAE)


def printErrMsgIdAndTxt(id: 'std::string const &', message: 'std::string const &') -> "void":
    return _amici.printErrMsgIdAndTxt(id, message)
printErrMsgIdAndTxt = _amici.printErrMsgIdAndTxt

def printWarnMsgIdAndTxt(id: 'std::string const &', message: 'std::string const &') -> "void":
    return _amici.printWarnMsgIdAndTxt(id, message)
printWarnMsgIdAndTxt = _amici.printWarnMsgIdAndTxt
class AmiciApplication(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmiciApplication, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AmiciApplication, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _amici.new_AmiciApplication()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def runAmiciSimulation(self, solver: 'Solver', edata: 'ExpData', model: 'Model', rethrow: 'bool'=False) -> "std::unique_ptr< amici::ReturnData >":
        return _amici.AmiciApplication_runAmiciSimulation(self, solver, edata, model, rethrow)

    def runAmiciSimulations(self, solver: 'Solver', edatas: 'ExpDataPtrVector', model: 'Model', failfast: 'bool', num_threads: 'int') -> "std::vector< std::unique_ptr< amici::ReturnData >,std::allocator< std::unique_ptr< amici::ReturnData > > >":
        return _amici.AmiciApplication_runAmiciSimulations(self, solver, edatas, model, failfast, num_threads)
    __swig_setmethods__["warning"] = _amici.AmiciApplication_warning_set
    __swig_getmethods__["warning"] = _amici.AmiciApplication_warning_get
    if _newclass:
        warning = _swig_property(_amici.AmiciApplication_warning_get, _amici.AmiciApplication_warning_set)
    __swig_setmethods__["error"] = _amici.AmiciApplication_error_set
    __swig_getmethods__["error"] = _amici.AmiciApplication_error_get
    if _newclass:
        error = _swig_property(_amici.AmiciApplication_error_get, _amici.AmiciApplication_error_set)

    def checkFinite(self, array: 'gsl::span< amici::realtype const >', fun: 'char const *') -> "int":
        return _amici.AmiciApplication_checkFinite(self, array, fun)
    __swig_destroy__ = _amici.delete_AmiciApplication
    __del__ = lambda self: None
AmiciApplication_swigregister = _amici.AmiciApplication_swigregister
AmiciApplication_swigregister(AmiciApplication)


def runAmiciSimulation(solver: 'Solver', edata: 'ExpData', model: 'Model', rethrow: 'bool'=False) -> "std::unique_ptr< amici::ReturnData >":
    return _amici.runAmiciSimulation(solver, edata, model, rethrow)
runAmiciSimulation = _amici.runAmiciSimulation

def runAmiciSimulations(solver: 'Solver', edatas: 'ExpDataPtrVector', model: 'Model', failfast: 'bool', num_threads: 'int') -> "std::vector< std::unique_ptr< amici::ReturnData >,std::allocator< std::unique_ptr< amici::ReturnData > > >":
    return _amici.runAmiciSimulations(solver, edatas, model, failfast, num_threads)
runAmiciSimulations = _amici.runAmiciSimulations
class ExpDataPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpDataPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpDataPtrVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amici.ExpDataPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amici.ExpDataPtrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amici.ExpDataPtrVector___bool__(self)

    def __len__(self) -> "std::vector< amici::ExpData * >::size_type":
        return _amici.ExpDataPtrVector___len__(self)

    def __getslice__(self, i: 'std::vector< amici::ExpData * >::difference_type', j: 'std::vector< amici::ExpData * >::difference_type') -> "std::vector< amici::ExpData *,std::allocator< amici::ExpData * > > *":
        return _amici.ExpDataPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amici.ExpDataPtrVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< amici::ExpData * >::difference_type', j: 'std::vector< amici::ExpData * >::difference_type') -> "void":
        return _amici.ExpDataPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amici.ExpDataPtrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< amici::ExpData * >::value_type":
        return _amici.ExpDataPtrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amici.ExpDataPtrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< amici::ExpData * >::value_type":
        return _amici.ExpDataPtrVector_pop(self)

    def append(self, x: 'ExpData') -> "void":
        return _amici.ExpDataPtrVector_append(self, x)

    def empty(self) -> "bool":
        return _amici.ExpDataPtrVector_empty(self)

    def size(self) -> "std::vector< amici::ExpData * >::size_type":
        return _amici.ExpDataPtrVector_size(self)

    def swap(self, v: 'ExpDataPtrVector') -> "void":
        return _amici.ExpDataPtrVector_swap(self, v)

    def begin(self) -> "std::vector< amici::ExpData * >::iterator":
        return _amici.ExpDataPtrVector_begin(self)

    def end(self) -> "std::vector< amici::ExpData * >::iterator":
        return _amici.ExpDataPtrVector_end(self)

    def rbegin(self) -> "std::vector< amici::ExpData * >::reverse_iterator":
        return _amici.ExpDataPtrVector_rbegin(self)

    def rend(self) -> "std::vector< amici::ExpData * >::reverse_iterator":
        return _amici.ExpDataPtrVector_rend(self)

    def clear(self) -> "void":
        return _amici.ExpDataPtrVector_clear(self)

    def get_allocator(self) -> "std::vector< amici::ExpData * >::allocator_type":
        return _amici.ExpDataPtrVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _amici.ExpDataPtrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< amici::ExpData * >::iterator":
        return _amici.ExpDataPtrVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_ExpDataPtrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'ExpData') -> "void":
        return _amici.ExpDataPtrVector_push_back(self, x)

    def front(self) -> "std::vector< amici::ExpData * >::value_type":
        return _amici.ExpDataPtrVector_front(self)

    def back(self) -> "std::vector< amici::ExpData * >::value_type":
        return _amici.ExpDataPtrVector_back(self)

    def assign(self, n: 'std::vector< amici::ExpData * >::size_type', x: 'ExpData') -> "void":
        return _amici.ExpDataPtrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amici.ExpDataPtrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amici.ExpDataPtrVector_insert(self, *args)

    def reserve(self, n: 'std::vector< amici::ExpData * >::size_type') -> "void":
        return _amici.ExpDataPtrVector_reserve(self, n)

    def capacity(self) -> "std::vector< amici::ExpData * >::size_type":
        return _amici.ExpDataPtrVector_capacity(self)
    __swig_destroy__ = _amici.delete_ExpDataPtrVector
    __del__ = lambda self: None
ExpDataPtrVector_swigregister = _amici.ExpDataPtrVector_swigregister
ExpDataPtrVector_swigregister(ExpDataPtrVector)


def parameterScalingFromIntVector(intVec: 'IntVector') -> "std::vector< amici::ParameterScaling,std::allocator< amici::ParameterScaling > >":
    return _amici.parameterScalingFromIntVector(intVec)
parameterScalingFromIntVector = _amici.parameterScalingFromIntVector
class ParameterScalingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterScalingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterScalingVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amici.ParameterScalingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amici.ParameterScalingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amici.ParameterScalingVector___bool__(self)

    def __len__(self) -> "std::vector< enum amici::ParameterScaling >::size_type":
        return _amici.ParameterScalingVector___len__(self)

    def __getslice__(self, i: 'std::vector< enum amici::ParameterScaling >::difference_type', j: 'std::vector< enum amici::ParameterScaling >::difference_type') -> "std::vector< amici::ParameterScaling,std::allocator< amici::ParameterScaling > > *":
        return _amici.ParameterScalingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amici.ParameterScalingVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< enum amici::ParameterScaling >::difference_type', j: 'std::vector< enum amici::ParameterScaling >::difference_type') -> "void":
        return _amici.ParameterScalingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amici.ParameterScalingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< enum amici::ParameterScaling >::value_type const &":
        return _amici.ParameterScalingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amici.ParameterScalingVector___setitem__(self, *args)

    def pop(self) -> "std::vector< enum amici::ParameterScaling >::value_type":
        return _amici.ParameterScalingVector_pop(self)

    def append(self, x: 'std::vector< enum amici::ParameterScaling >::value_type const &') -> "void":
        return _amici.ParameterScalingVector_append(self, x)

    def empty(self) -> "bool":
        return _amici.ParameterScalingVector_empty(self)

    def size(self) -> "std::vector< enum amici::ParameterScaling >::size_type":
        return _amici.ParameterScalingVector_size(self)

    def swap(self, v: 'ParameterScalingVector') -> "void":
        return _amici.ParameterScalingVector_swap(self, v)

    def begin(self) -> "std::vector< enum amici::ParameterScaling >::iterator":
        return _amici.ParameterScalingVector_begin(self)

    def end(self) -> "std::vector< enum amici::ParameterScaling >::iterator":
        return _amici.ParameterScalingVector_end(self)

    def rbegin(self) -> "std::vector< enum amici::ParameterScaling >::reverse_iterator":
        return _amici.ParameterScalingVector_rbegin(self)

    def rend(self) -> "std::vector< enum amici::ParameterScaling >::reverse_iterator":
        return _amici.ParameterScalingVector_rend(self)

    def clear(self) -> "void":
        return _amici.ParameterScalingVector_clear(self)

    def get_allocator(self) -> "std::vector< enum amici::ParameterScaling >::allocator_type":
        return _amici.ParameterScalingVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _amici.ParameterScalingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< enum amici::ParameterScaling >::iterator":
        return _amici.ParameterScalingVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_ParameterScalingVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< enum amici::ParameterScaling >::value_type const &') -> "void":
        return _amici.ParameterScalingVector_push_back(self, x)

    def front(self) -> "std::vector< enum amici::ParameterScaling >::value_type const &":
        return _amici.ParameterScalingVector_front(self)

    def back(self) -> "std::vector< enum amici::ParameterScaling >::value_type const &":
        return _amici.ParameterScalingVector_back(self)

    def assign(self, n: 'std::vector< enum amici::ParameterScaling >::size_type', x: 'std::vector< enum amici::ParameterScaling >::value_type const &') -> "void":
        return _amici.ParameterScalingVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amici.ParameterScalingVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amici.ParameterScalingVector_insert(self, *args)

    def reserve(self, n: 'std::vector< enum amici::ParameterScaling >::size_type') -> "void":
        return _amici.ParameterScalingVector_reserve(self, n)

    def capacity(self) -> "std::vector< enum amici::ParameterScaling >::size_type":
        return _amici.ParameterScalingVector_capacity(self)
    __swig_destroy__ = _amici.delete_ParameterScalingVector
    __del__ = lambda self: None
ParameterScalingVector_swigregister = _amici.ParameterScalingVector_swigregister
ParameterScalingVector_swigregister(ParameterScalingVector)


def compiledWithOpenMP() -> "bool":
    return _amici.compiledWithOpenMP()
compiledWithOpenMP = _amici.compiledWithOpenMP

from enum import IntEnum
def enum(prefix):
    values = {k:v for k,v in globals().items() if k.startswith(prefix + '_')}
    values = {k[len(prefix)+1:]:v for k,v in values.items()}
    return IntEnum(prefix, values)
ParameterScaling = enum('ParameterScaling')
SecondOrderMode = enum('SecondOrderMode')
SensitivityOrder = enum('SensitivityOrder')
SensitivityMethod = enum('SensitivityMethod')
LinearSolver = enum('LinearSolver')
InternalSensitivityMethod = enum('InternalSensitivityMethod')
InterpolationType = enum('InterpolationType')
LinearMultistepMethod = enum('LinearMultistepMethod')
NonlinearSolverIteration = enum('NonlinearSolverIteration')
SteadyStateSensitivityMode = enum('SteadyStateSensitivityMode')
SteadyStateStatus = enum('SteadyStateStatus')
NewtonDampingFactorMode = enum('NewtonDampingFactorMode')
FixedParameterContext = enum('FixedParameterContext')
RDataReporting = enum('RDataReporting')

class SteadyStateStatusVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteadyStateStatusVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SteadyStateStatusVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _amici.SteadyStateStatusVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _amici.SteadyStateStatusVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _amici.SteadyStateStatusVector___bool__(self)

    def __len__(self) -> "std::vector< enum amici::SteadyStateStatus >::size_type":
        return _amici.SteadyStateStatusVector___len__(self)

    def __getslice__(self, i: 'std::vector< enum amici::SteadyStateStatus >::difference_type', j: 'std::vector< enum amici::SteadyStateStatus >::difference_type') -> "std::vector< amici::SteadyStateStatus,std::allocator< amici::SteadyStateStatus > > *":
        return _amici.SteadyStateStatusVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _amici.SteadyStateStatusVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< enum amici::SteadyStateStatus >::difference_type', j: 'std::vector< enum amici::SteadyStateStatus >::difference_type') -> "void":
        return _amici.SteadyStateStatusVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _amici.SteadyStateStatusVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< enum amici::SteadyStateStatus >::value_type const &":
        return _amici.SteadyStateStatusVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _amici.SteadyStateStatusVector___setitem__(self, *args)

    def pop(self) -> "std::vector< enum amici::SteadyStateStatus >::value_type":
        return _amici.SteadyStateStatusVector_pop(self)

    def append(self, x: 'std::vector< enum amici::SteadyStateStatus >::value_type const &') -> "void":
        return _amici.SteadyStateStatusVector_append(self, x)

    def empty(self) -> "bool":
        return _amici.SteadyStateStatusVector_empty(self)

    def size(self) -> "std::vector< enum amici::SteadyStateStatus >::size_type":
        return _amici.SteadyStateStatusVector_size(self)

    def swap(self, v: 'SteadyStateStatusVector') -> "void":
        return _amici.SteadyStateStatusVector_swap(self, v)

    def begin(self) -> "std::vector< enum amici::SteadyStateStatus >::iterator":
        return _amici.SteadyStateStatusVector_begin(self)

    def end(self) -> "std::vector< enum amici::SteadyStateStatus >::iterator":
        return _amici.SteadyStateStatusVector_end(self)

    def rbegin(self) -> "std::vector< enum amici::SteadyStateStatus >::reverse_iterator":
        return _amici.SteadyStateStatusVector_rbegin(self)

    def rend(self) -> "std::vector< enum amici::SteadyStateStatus >::reverse_iterator":
        return _amici.SteadyStateStatusVector_rend(self)

    def clear(self) -> "void":
        return _amici.SteadyStateStatusVector_clear(self)

    def get_allocator(self) -> "std::vector< enum amici::SteadyStateStatus >::allocator_type":
        return _amici.SteadyStateStatusVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _amici.SteadyStateStatusVector_pop_back(self)

    def erase(self, *args) -> "std::vector< enum amici::SteadyStateStatus >::iterator":
        return _amici.SteadyStateStatusVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_SteadyStateStatusVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< enum amici::SteadyStateStatus >::value_type const &') -> "void":
        return _amici.SteadyStateStatusVector_push_back(self, x)

    def front(self) -> "std::vector< enum amici::SteadyStateStatus >::value_type const &":
        return _amici.SteadyStateStatusVector_front(self)

    def back(self) -> "std::vector< enum amici::SteadyStateStatus >::value_type const &":
        return _amici.SteadyStateStatusVector_back(self)

    def assign(self, n: 'std::vector< enum amici::SteadyStateStatus >::size_type', x: 'std::vector< enum amici::SteadyStateStatus >::value_type const &') -> "void":
        return _amici.SteadyStateStatusVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _amici.SteadyStateStatusVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _amici.SteadyStateStatusVector_insert(self, *args)

    def reserve(self, n: 'std::vector< enum amici::SteadyStateStatus >::size_type') -> "void":
        return _amici.SteadyStateStatusVector_reserve(self, n)

    def capacity(self) -> "std::vector< enum amici::SteadyStateStatus >::size_type":
        return _amici.SteadyStateStatusVector_capacity(self)
    __swig_destroy__ = _amici.delete_SteadyStateStatusVector
    __del__ = lambda self: None
SteadyStateStatusVector_swigregister = _amici.SteadyStateStatusVector_swigregister
SteadyStateStatusVector_swigregister(SteadyStateStatusVector)

# This file is compatible with both classic and new-style classes.


