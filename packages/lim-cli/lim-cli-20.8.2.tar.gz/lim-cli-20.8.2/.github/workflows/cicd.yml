name: CICD
on: [ push, pull_request ]
jobs:
  build-test:
    name: Test and Build
    runs-on: ubuntu-18.04
    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
    steps:
    - name: Check out src from GitHub
      uses: actions/checkout@v2
    - name: Expose variables for situational awareness
      run: |
        echo GITHUB_REF \"${GITHUB_REF}\"
        echo Running on branch \"${GITHUB_REF##*/}\"
        echo Actor \"${GITHUB_ACTOR}\"
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        sudo apt-get -y install make bats
        python3 -m pip install --upgrade pip setuptools wheel twine
        [ -f requirements.txt ] && python3 -m pip install -Ur requirements.txt
        make bats-libraries
    - name: Get repo name
      id: get_repo
      run: echo ::set-output name=REPO::$(echo ${{ github.repository }} | cut -d / -f 2)
      env:
        SETUPTOOLS_SCM_DEBUG: 1
    - name: Get version number
      id: get_version
      run: echo ::set-output name=VERSION::$(python setup.py --version)
      env:
        SETUPTOOLS_SCM_DEBUG: 1
    - name: Get artifact name
      id: get_artifact
      run: echo ::set-output name=ARTIFACT::${{ steps.get_repo.outputs.REPO }}-${{ steps.get_version.outputs.VERSION }}
    - name: Run tests
      run: make test
    - name: Build a binary wheel and a source tarball
      run: make bdist_wheel sdist twine-check
    - name: Display artifacts
      run: ls -lR dist
    - name: Store the source distribution
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.get_artifact.outputs.ARTIFACT }}
        path: dist/*
  deploy:
    name: Publish
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags') || endsWith(github.ref, 'develop'))
    needs:
      - build-test
    runs-on: ubuntu-18.04
    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
    steps:
    - name: Download all the artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ steps.get_artifact.outputs.ARTIFACT }}
    - name: Get repo name
      id: get_repo
      run: echo ::set-output name=REPO::$(echo ${{ github.repository }} | cut -d / -f 2)
      env:
        SETUPTOOLS_SCM_DEBUG: 1
    - name: Get artifact name
      id: get_artifact
      run: echo ::set-output name=ARTIFACT::$(echo ${{ steps.get_repo.outputs.REPO }}* )
    - name: Display artifacts
      run: >-
          ls -lR ${{ steps.get_artifact.outputs.ARTIFACT }}
    - name: Publish to TestPyPI
      if: >-
        github.event_name == 'push' &&
        endsWith(github.ref, 'develop')
      uses: pypa/gh-action-pypi-publish@master
      with:
        repository_url: https://test.pypi.org/legacy/
        password: ${{ secrets.lim_test_pypi_token }}
        packages_dir: ${{ steps.get_artifact.outputs.ARTIFACT }}
    - name: Publish to PyPI
      if: >-
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.lim_pypi_token }}
        packages_dir: ${{ steps.get_artifact.outputs.ARTIFACT }}

